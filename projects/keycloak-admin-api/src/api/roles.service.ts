/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ManagementPermissionReference } from '../model/managementPermissionReference';
import { RoleRepresentation } from '../model/roleRepresentation';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class RolesService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get all roles for the realm or client
     * 
     * @param realm realm name (not id!)
     * @param id id of client (not client-id)
     * @param briefRepresentation 
     * @param first 
     * @param max 
     * @param search 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmClientsIdRolesGet(realm: string, id: string, briefRepresentation?: boolean, first?: number, max?: number, search?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<{ [key: string]: any; }>>;
    public realmClientsIdRolesGet(realm: string, id: string, briefRepresentation?: boolean, first?: number, max?: number, search?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<{ [key: string]: any; }>>>;
    public realmClientsIdRolesGet(realm: string, id: string, briefRepresentation?: boolean, first?: number, max?: number, search?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<{ [key: string]: any; }>>>;
    public realmClientsIdRolesGet(realm: string, id: string, briefRepresentation?: boolean, first?: number, max?: number, search?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmClientsIdRolesGet.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling realmClientsIdRolesGet.');
        }





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (briefRepresentation !== undefined && briefRepresentation !== null) {
            queryParameters = queryParameters.set('briefRepresentation', <any>briefRepresentation);
        }
        if (first !== undefined && first !== null) {
            queryParameters = queryParameters.set('first', <any>first);
        }
        if (max !== undefined && max !== null) {
            queryParameters = queryParameters.set('max', <any>max);
        }
        if (search !== undefined && search !== null) {
            queryParameters = queryParameters.set('search', <any>search);
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<{ [key: string]: any; }>>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/clients/${encodeURIComponent(String(id))}/roles`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new role for the realm or client
     * 
     * @param body 
     * @param realm realm name (not id!)
     * @param id id of client (not client-id)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmClientsIdRolesPost(body: RoleRepresentation, realm: string, id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmClientsIdRolesPost(body: RoleRepresentation, realm: string, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmClientsIdRolesPost(body: RoleRepresentation, realm: string, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmClientsIdRolesPost(body: RoleRepresentation, realm: string, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling realmClientsIdRolesPost.');
        }

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmClientsIdRolesPost.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling realmClientsIdRolesPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/${encodeURIComponent(String(realm))}/clients/${encodeURIComponent(String(id))}/roles`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get client-level roles for the client that are in the role’s composite
     * 
     * @param realm realm name (not id!)
     * @param id id of client (not client-id)
     * @param roleName role’s name (not id!)
     * @param clientUuid 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmClientsIdRolesRoleNameCompositesClientsClientUuidGet(realm: string, id: string, roleName: string, clientUuid: string, observe?: 'body', reportProgress?: boolean): Observable<Array<{ [key: string]: any; }>>;
    public realmClientsIdRolesRoleNameCompositesClientsClientUuidGet(realm: string, id: string, roleName: string, clientUuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<{ [key: string]: any; }>>>;
    public realmClientsIdRolesRoleNameCompositesClientsClientUuidGet(realm: string, id: string, roleName: string, clientUuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<{ [key: string]: any; }>>>;
    public realmClientsIdRolesRoleNameCompositesClientsClientUuidGet(realm: string, id: string, roleName: string, clientUuid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmClientsIdRolesRoleNameCompositesClientsClientUuidGet.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling realmClientsIdRolesRoleNameCompositesClientsClientUuidGet.');
        }

        if (roleName === null || roleName === undefined) {
            throw new Error('Required parameter roleName was null or undefined when calling realmClientsIdRolesRoleNameCompositesClientsClientUuidGet.');
        }

        if (clientUuid === null || clientUuid === undefined) {
            throw new Error('Required parameter clientUuid was null or undefined when calling realmClientsIdRolesRoleNameCompositesClientsClientUuidGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<{ [key: string]: any; }>>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/clients/${encodeURIComponent(String(id))}/roles/${encodeURIComponent(String(roleName))}/composites/clients/${encodeURIComponent(String(clientUuid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Remove roles from the role’s composite
     * 
     * @param body roles to remove
     * @param realm realm name (not id!)
     * @param id id of client (not client-id)
     * @param roleName role’s name (not id!)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmClientsIdRolesRoleNameCompositesDelete(body: Array<RoleRepresentation>, realm: string, id: string, roleName: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmClientsIdRolesRoleNameCompositesDelete(body: Array<RoleRepresentation>, realm: string, id: string, roleName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmClientsIdRolesRoleNameCompositesDelete(body: Array<RoleRepresentation>, realm: string, id: string, roleName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmClientsIdRolesRoleNameCompositesDelete(body: Array<RoleRepresentation>, realm: string, id: string, roleName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling realmClientsIdRolesRoleNameCompositesDelete.');
        }

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmClientsIdRolesRoleNameCompositesDelete.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling realmClientsIdRolesRoleNameCompositesDelete.');
        }

        if (roleName === null || roleName === undefined) {
            throw new Error('Required parameter roleName was null or undefined when calling realmClientsIdRolesRoleNameCompositesDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('delete',`${this.basePath}/${encodeURIComponent(String(realm))}/clients/${encodeURIComponent(String(id))}/roles/${encodeURIComponent(String(roleName))}/composites`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get composites of the role
     * 
     * @param realm realm name (not id!)
     * @param id id of client (not client-id)
     * @param roleName role’s name (not id!)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmClientsIdRolesRoleNameCompositesGet(realm: string, id: string, roleName: string, observe?: 'body', reportProgress?: boolean): Observable<Array<{ [key: string]: any; }>>;
    public realmClientsIdRolesRoleNameCompositesGet(realm: string, id: string, roleName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<{ [key: string]: any; }>>>;
    public realmClientsIdRolesRoleNameCompositesGet(realm: string, id: string, roleName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<{ [key: string]: any; }>>>;
    public realmClientsIdRolesRoleNameCompositesGet(realm: string, id: string, roleName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmClientsIdRolesRoleNameCompositesGet.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling realmClientsIdRolesRoleNameCompositesGet.');
        }

        if (roleName === null || roleName === undefined) {
            throw new Error('Required parameter roleName was null or undefined when calling realmClientsIdRolesRoleNameCompositesGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<{ [key: string]: any; }>>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/clients/${encodeURIComponent(String(id))}/roles/${encodeURIComponent(String(roleName))}/composites`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add a composite to the role
     * 
     * @param body 
     * @param realm realm name (not id!)
     * @param id id of client (not client-id)
     * @param roleName role’s name (not id!)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmClientsIdRolesRoleNameCompositesPost(body: Array<RoleRepresentation>, realm: string, id: string, roleName: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmClientsIdRolesRoleNameCompositesPost(body: Array<RoleRepresentation>, realm: string, id: string, roleName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmClientsIdRolesRoleNameCompositesPost(body: Array<RoleRepresentation>, realm: string, id: string, roleName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmClientsIdRolesRoleNameCompositesPost(body: Array<RoleRepresentation>, realm: string, id: string, roleName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling realmClientsIdRolesRoleNameCompositesPost.');
        }

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmClientsIdRolesRoleNameCompositesPost.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling realmClientsIdRolesRoleNameCompositesPost.');
        }

        if (roleName === null || roleName === undefined) {
            throw new Error('Required parameter roleName was null or undefined when calling realmClientsIdRolesRoleNameCompositesPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/${encodeURIComponent(String(realm))}/clients/${encodeURIComponent(String(id))}/roles/${encodeURIComponent(String(roleName))}/composites`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get realm-level roles of the role’s composite
     * 
     * @param realm realm name (not id!)
     * @param id id of client (not client-id)
     * @param roleName role’s name (not id!)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmClientsIdRolesRoleNameCompositesRealmGet(realm: string, id: string, roleName: string, observe?: 'body', reportProgress?: boolean): Observable<Array<{ [key: string]: any; }>>;
    public realmClientsIdRolesRoleNameCompositesRealmGet(realm: string, id: string, roleName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<{ [key: string]: any; }>>>;
    public realmClientsIdRolesRoleNameCompositesRealmGet(realm: string, id: string, roleName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<{ [key: string]: any; }>>>;
    public realmClientsIdRolesRoleNameCompositesRealmGet(realm: string, id: string, roleName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmClientsIdRolesRoleNameCompositesRealmGet.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling realmClientsIdRolesRoleNameCompositesRealmGet.');
        }

        if (roleName === null || roleName === undefined) {
            throw new Error('Required parameter roleName was null or undefined when calling realmClientsIdRolesRoleNameCompositesRealmGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<{ [key: string]: any; }>>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/clients/${encodeURIComponent(String(id))}/roles/${encodeURIComponent(String(roleName))}/composites/realm`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a role by name
     * 
     * @param realm realm name (not id!)
     * @param id id of client (not client-id)
     * @param roleName role’s name (not id!)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmClientsIdRolesRoleNameDelete(realm: string, id: string, roleName: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmClientsIdRolesRoleNameDelete(realm: string, id: string, roleName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmClientsIdRolesRoleNameDelete(realm: string, id: string, roleName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmClientsIdRolesRoleNameDelete(realm: string, id: string, roleName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmClientsIdRolesRoleNameDelete.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling realmClientsIdRolesRoleNameDelete.');
        }

        if (roleName === null || roleName === undefined) {
            throw new Error('Required parameter roleName was null or undefined when calling realmClientsIdRolesRoleNameDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/${encodeURIComponent(String(realm))}/clients/${encodeURIComponent(String(id))}/roles/${encodeURIComponent(String(roleName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get a role by name
     * 
     * @param realm realm name (not id!)
     * @param id id of client (not client-id)
     * @param roleName role’s name (not id!)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmClientsIdRolesRoleNameGet(realm: string, id: string, roleName: string, observe?: 'body', reportProgress?: boolean): Observable<RoleRepresentation>;
    public realmClientsIdRolesRoleNameGet(realm: string, id: string, roleName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RoleRepresentation>>;
    public realmClientsIdRolesRoleNameGet(realm: string, id: string, roleName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RoleRepresentation>>;
    public realmClientsIdRolesRoleNameGet(realm: string, id: string, roleName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmClientsIdRolesRoleNameGet.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling realmClientsIdRolesRoleNameGet.');
        }

        if (roleName === null || roleName === undefined) {
            throw new Error('Required parameter roleName was null or undefined when calling realmClientsIdRolesRoleNameGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<RoleRepresentation>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/clients/${encodeURIComponent(String(id))}/roles/${encodeURIComponent(String(roleName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a stream of groups that have the specified role name
     * 
     * @param realm realm name (not id!)
     * @param id id of client (not client-id)
     * @param roleName the role name.
     * @param briefRepresentation if false, return a full representation of the {@code GroupRepresentation} objects.
     * @param first first result to return. Ignored if negative or {@code null}.
     * @param max maximum number of results to return. Ignored if negative or {@code null}.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmClientsIdRolesRoleNameGroupsGet(realm: string, id: string, roleName: string, briefRepresentation?: boolean, first?: number, max?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<{ [key: string]: any; }>>;
    public realmClientsIdRolesRoleNameGroupsGet(realm: string, id: string, roleName: string, briefRepresentation?: boolean, first?: number, max?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<{ [key: string]: any; }>>>;
    public realmClientsIdRolesRoleNameGroupsGet(realm: string, id: string, roleName: string, briefRepresentation?: boolean, first?: number, max?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<{ [key: string]: any; }>>>;
    public realmClientsIdRolesRoleNameGroupsGet(realm: string, id: string, roleName: string, briefRepresentation?: boolean, first?: number, max?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmClientsIdRolesRoleNameGroupsGet.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling realmClientsIdRolesRoleNameGroupsGet.');
        }

        if (roleName === null || roleName === undefined) {
            throw new Error('Required parameter roleName was null or undefined when calling realmClientsIdRolesRoleNameGroupsGet.');
        }




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (briefRepresentation !== undefined && briefRepresentation !== null) {
            queryParameters = queryParameters.set('briefRepresentation', <any>briefRepresentation);
        }
        if (first !== undefined && first !== null) {
            queryParameters = queryParameters.set('first', <any>first);
        }
        if (max !== undefined && max !== null) {
            queryParameters = queryParameters.set('max', <any>max);
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<{ [key: string]: any; }>>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/clients/${encodeURIComponent(String(id))}/roles/${encodeURIComponent(String(roleName))}/groups`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!)
     * @param id id of client (not client-id)
     * @param roleName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmClientsIdRolesRoleNameManagementPermissionsGet(realm: string, id: string, roleName: string, observe?: 'body', reportProgress?: boolean): Observable<ManagementPermissionReference>;
    public realmClientsIdRolesRoleNameManagementPermissionsGet(realm: string, id: string, roleName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ManagementPermissionReference>>;
    public realmClientsIdRolesRoleNameManagementPermissionsGet(realm: string, id: string, roleName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ManagementPermissionReference>>;
    public realmClientsIdRolesRoleNameManagementPermissionsGet(realm: string, id: string, roleName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmClientsIdRolesRoleNameManagementPermissionsGet.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling realmClientsIdRolesRoleNameManagementPermissionsGet.');
        }

        if (roleName === null || roleName === undefined) {
            throw new Error('Required parameter roleName was null or undefined when calling realmClientsIdRolesRoleNameManagementPermissionsGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ManagementPermissionReference>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/clients/${encodeURIComponent(String(id))}/roles/${encodeURIComponent(String(roleName))}/management/permissions`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     * 
     * @param body 
     * @param realm realm name (not id!)
     * @param id id of client (not client-id)
     * @param roleName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmClientsIdRolesRoleNameManagementPermissionsPut(body: ManagementPermissionReference, realm: string, id: string, roleName: string, observe?: 'body', reportProgress?: boolean): Observable<ManagementPermissionReference>;
    public realmClientsIdRolesRoleNameManagementPermissionsPut(body: ManagementPermissionReference, realm: string, id: string, roleName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ManagementPermissionReference>>;
    public realmClientsIdRolesRoleNameManagementPermissionsPut(body: ManagementPermissionReference, realm: string, id: string, roleName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ManagementPermissionReference>>;
    public realmClientsIdRolesRoleNameManagementPermissionsPut(body: ManagementPermissionReference, realm: string, id: string, roleName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling realmClientsIdRolesRoleNameManagementPermissionsPut.');
        }

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmClientsIdRolesRoleNameManagementPermissionsPut.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling realmClientsIdRolesRoleNameManagementPermissionsPut.');
        }

        if (roleName === null || roleName === undefined) {
            throw new Error('Required parameter roleName was null or undefined when calling realmClientsIdRolesRoleNameManagementPermissionsPut.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ManagementPermissionReference>('put',`${this.basePath}/${encodeURIComponent(String(realm))}/clients/${encodeURIComponent(String(id))}/roles/${encodeURIComponent(String(roleName))}/management/permissions`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a role by name
     * 
     * @param body 
     * @param realm realm name (not id!)
     * @param id id of client (not client-id)
     * @param roleName role’s name (not id!)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmClientsIdRolesRoleNamePut(body: RoleRepresentation, realm: string, id: string, roleName: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmClientsIdRolesRoleNamePut(body: RoleRepresentation, realm: string, id: string, roleName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmClientsIdRolesRoleNamePut(body: RoleRepresentation, realm: string, id: string, roleName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmClientsIdRolesRoleNamePut(body: RoleRepresentation, realm: string, id: string, roleName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling realmClientsIdRolesRoleNamePut.');
        }

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmClientsIdRolesRoleNamePut.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling realmClientsIdRolesRoleNamePut.');
        }

        if (roleName === null || roleName === undefined) {
            throw new Error('Required parameter roleName was null or undefined when calling realmClientsIdRolesRoleNamePut.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/${encodeURIComponent(String(realm))}/clients/${encodeURIComponent(String(id))}/roles/${encodeURIComponent(String(roleName))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a stream of users that have the specified role name.
     * 
     * @param realm realm name (not id!)
     * @param id id of client (not client-id)
     * @param roleName the role name.
     * @param first first result to return. Ignored if negative or {@code null}.
     * @param max maximum number of results to return. Ignored if negative or {@code null}.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmClientsIdRolesRoleNameUsersGet(realm: string, id: string, roleName: string, first?: number, max?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<{ [key: string]: any; }>>;
    public realmClientsIdRolesRoleNameUsersGet(realm: string, id: string, roleName: string, first?: number, max?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<{ [key: string]: any; }>>>;
    public realmClientsIdRolesRoleNameUsersGet(realm: string, id: string, roleName: string, first?: number, max?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<{ [key: string]: any; }>>>;
    public realmClientsIdRolesRoleNameUsersGet(realm: string, id: string, roleName: string, first?: number, max?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmClientsIdRolesRoleNameUsersGet.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling realmClientsIdRolesRoleNameUsersGet.');
        }

        if (roleName === null || roleName === undefined) {
            throw new Error('Required parameter roleName was null or undefined when calling realmClientsIdRolesRoleNameUsersGet.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (first !== undefined && first !== null) {
            queryParameters = queryParameters.set('first', <any>first);
        }
        if (max !== undefined && max !== null) {
            queryParameters = queryParameters.set('max', <any>max);
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<{ [key: string]: any; }>>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/clients/${encodeURIComponent(String(id))}/roles/${encodeURIComponent(String(roleName))}/users`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all roles for the realm or client
     * 
     * @param realm realm name (not id!)
     * @param briefRepresentation 
     * @param first 
     * @param max 
     * @param search 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmRolesGet(realm: string, briefRepresentation?: boolean, first?: number, max?: number, search?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<{ [key: string]: any; }>>;
    public realmRolesGet(realm: string, briefRepresentation?: boolean, first?: number, max?: number, search?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<{ [key: string]: any; }>>>;
    public realmRolesGet(realm: string, briefRepresentation?: boolean, first?: number, max?: number, search?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<{ [key: string]: any; }>>>;
    public realmRolesGet(realm: string, briefRepresentation?: boolean, first?: number, max?: number, search?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmRolesGet.');
        }





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (briefRepresentation !== undefined && briefRepresentation !== null) {
            queryParameters = queryParameters.set('briefRepresentation', <any>briefRepresentation);
        }
        if (first !== undefined && first !== null) {
            queryParameters = queryParameters.set('first', <any>first);
        }
        if (max !== undefined && max !== null) {
            queryParameters = queryParameters.set('max', <any>max);
        }
        if (search !== undefined && search !== null) {
            queryParameters = queryParameters.set('search', <any>search);
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<{ [key: string]: any; }>>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/roles`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new role for the realm or client
     * 
     * @param body 
     * @param realm realm name (not id!)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmRolesPost(body: RoleRepresentation, realm: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmRolesPost(body: RoleRepresentation, realm: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmRolesPost(body: RoleRepresentation, realm: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmRolesPost(body: RoleRepresentation, realm: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling realmRolesPost.');
        }

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmRolesPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/${encodeURIComponent(String(realm))}/roles`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get client-level roles for the client that are in the role’s composite
     * 
     * @param realm realm name (not id!)
     * @param roleName role’s name (not id!)
     * @param clientUuid 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmRolesRoleNameCompositesClientsClientUuidGet(realm: string, roleName: string, clientUuid: string, observe?: 'body', reportProgress?: boolean): Observable<Array<{ [key: string]: any; }>>;
    public realmRolesRoleNameCompositesClientsClientUuidGet(realm: string, roleName: string, clientUuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<{ [key: string]: any; }>>>;
    public realmRolesRoleNameCompositesClientsClientUuidGet(realm: string, roleName: string, clientUuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<{ [key: string]: any; }>>>;
    public realmRolesRoleNameCompositesClientsClientUuidGet(realm: string, roleName: string, clientUuid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmRolesRoleNameCompositesClientsClientUuidGet.');
        }

        if (roleName === null || roleName === undefined) {
            throw new Error('Required parameter roleName was null or undefined when calling realmRolesRoleNameCompositesClientsClientUuidGet.');
        }

        if (clientUuid === null || clientUuid === undefined) {
            throw new Error('Required parameter clientUuid was null or undefined when calling realmRolesRoleNameCompositesClientsClientUuidGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<{ [key: string]: any; }>>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/roles/${encodeURIComponent(String(roleName))}/composites/clients/${encodeURIComponent(String(clientUuid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Remove roles from the role’s composite
     * 
     * @param body roles to remove
     * @param realm realm name (not id!)
     * @param roleName role’s name (not id!)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmRolesRoleNameCompositesDelete(body: Array<RoleRepresentation>, realm: string, roleName: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmRolesRoleNameCompositesDelete(body: Array<RoleRepresentation>, realm: string, roleName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmRolesRoleNameCompositesDelete(body: Array<RoleRepresentation>, realm: string, roleName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmRolesRoleNameCompositesDelete(body: Array<RoleRepresentation>, realm: string, roleName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling realmRolesRoleNameCompositesDelete.');
        }

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmRolesRoleNameCompositesDelete.');
        }

        if (roleName === null || roleName === undefined) {
            throw new Error('Required parameter roleName was null or undefined when calling realmRolesRoleNameCompositesDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('delete',`${this.basePath}/${encodeURIComponent(String(realm))}/roles/${encodeURIComponent(String(roleName))}/composites`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get composites of the role
     * 
     * @param realm realm name (not id!)
     * @param roleName role’s name (not id!)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmRolesRoleNameCompositesGet(realm: string, roleName: string, observe?: 'body', reportProgress?: boolean): Observable<Array<{ [key: string]: any; }>>;
    public realmRolesRoleNameCompositesGet(realm: string, roleName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<{ [key: string]: any; }>>>;
    public realmRolesRoleNameCompositesGet(realm: string, roleName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<{ [key: string]: any; }>>>;
    public realmRolesRoleNameCompositesGet(realm: string, roleName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmRolesRoleNameCompositesGet.');
        }

        if (roleName === null || roleName === undefined) {
            throw new Error('Required parameter roleName was null or undefined when calling realmRolesRoleNameCompositesGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<{ [key: string]: any; }>>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/roles/${encodeURIComponent(String(roleName))}/composites`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add a composite to the role
     * 
     * @param body 
     * @param realm realm name (not id!)
     * @param roleName role’s name (not id!)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmRolesRoleNameCompositesPost(body: Array<RoleRepresentation>, realm: string, roleName: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmRolesRoleNameCompositesPost(body: Array<RoleRepresentation>, realm: string, roleName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmRolesRoleNameCompositesPost(body: Array<RoleRepresentation>, realm: string, roleName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmRolesRoleNameCompositesPost(body: Array<RoleRepresentation>, realm: string, roleName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling realmRolesRoleNameCompositesPost.');
        }

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmRolesRoleNameCompositesPost.');
        }

        if (roleName === null || roleName === undefined) {
            throw new Error('Required parameter roleName was null or undefined when calling realmRolesRoleNameCompositesPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/${encodeURIComponent(String(realm))}/roles/${encodeURIComponent(String(roleName))}/composites`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get realm-level roles of the role’s composite
     * 
     * @param realm realm name (not id!)
     * @param roleName role’s name (not id!)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmRolesRoleNameCompositesRealmGet(realm: string, roleName: string, observe?: 'body', reportProgress?: boolean): Observable<Array<{ [key: string]: any; }>>;
    public realmRolesRoleNameCompositesRealmGet(realm: string, roleName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<{ [key: string]: any; }>>>;
    public realmRolesRoleNameCompositesRealmGet(realm: string, roleName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<{ [key: string]: any; }>>>;
    public realmRolesRoleNameCompositesRealmGet(realm: string, roleName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmRolesRoleNameCompositesRealmGet.');
        }

        if (roleName === null || roleName === undefined) {
            throw new Error('Required parameter roleName was null or undefined when calling realmRolesRoleNameCompositesRealmGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<{ [key: string]: any; }>>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/roles/${encodeURIComponent(String(roleName))}/composites/realm`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a role by name
     * 
     * @param realm realm name (not id!)
     * @param roleName role’s name (not id!)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmRolesRoleNameDelete(realm: string, roleName: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmRolesRoleNameDelete(realm: string, roleName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmRolesRoleNameDelete(realm: string, roleName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmRolesRoleNameDelete(realm: string, roleName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmRolesRoleNameDelete.');
        }

        if (roleName === null || roleName === undefined) {
            throw new Error('Required parameter roleName was null or undefined when calling realmRolesRoleNameDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/${encodeURIComponent(String(realm))}/roles/${encodeURIComponent(String(roleName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get a role by name
     * 
     * @param realm realm name (not id!)
     * @param roleName role’s name (not id!)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmRolesRoleNameGet(realm: string, roleName: string, observe?: 'body', reportProgress?: boolean): Observable<RoleRepresentation>;
    public realmRolesRoleNameGet(realm: string, roleName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RoleRepresentation>>;
    public realmRolesRoleNameGet(realm: string, roleName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RoleRepresentation>>;
    public realmRolesRoleNameGet(realm: string, roleName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmRolesRoleNameGet.');
        }

        if (roleName === null || roleName === undefined) {
            throw new Error('Required parameter roleName was null or undefined when calling realmRolesRoleNameGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<RoleRepresentation>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/roles/${encodeURIComponent(String(roleName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a stream of groups that have the specified role name
     * 
     * @param realm realm name (not id!)
     * @param roleName the role name.
     * @param briefRepresentation if false, return a full representation of the {@code GroupRepresentation} objects.
     * @param first first result to return. Ignored if negative or {@code null}.
     * @param max maximum number of results to return. Ignored if negative or {@code null}.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmRolesRoleNameGroupsGet(realm: string, roleName: string, briefRepresentation?: boolean, first?: number, max?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<{ [key: string]: any; }>>;
    public realmRolesRoleNameGroupsGet(realm: string, roleName: string, briefRepresentation?: boolean, first?: number, max?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<{ [key: string]: any; }>>>;
    public realmRolesRoleNameGroupsGet(realm: string, roleName: string, briefRepresentation?: boolean, first?: number, max?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<{ [key: string]: any; }>>>;
    public realmRolesRoleNameGroupsGet(realm: string, roleName: string, briefRepresentation?: boolean, first?: number, max?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmRolesRoleNameGroupsGet.');
        }

        if (roleName === null || roleName === undefined) {
            throw new Error('Required parameter roleName was null or undefined when calling realmRolesRoleNameGroupsGet.');
        }




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (briefRepresentation !== undefined && briefRepresentation !== null) {
            queryParameters = queryParameters.set('briefRepresentation', <any>briefRepresentation);
        }
        if (first !== undefined && first !== null) {
            queryParameters = queryParameters.set('first', <any>first);
        }
        if (max !== undefined && max !== null) {
            queryParameters = queryParameters.set('max', <any>max);
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<{ [key: string]: any; }>>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/roles/${encodeURIComponent(String(roleName))}/groups`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!)
     * @param roleName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmRolesRoleNameManagementPermissionsGet(realm: string, roleName: string, observe?: 'body', reportProgress?: boolean): Observable<ManagementPermissionReference>;
    public realmRolesRoleNameManagementPermissionsGet(realm: string, roleName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ManagementPermissionReference>>;
    public realmRolesRoleNameManagementPermissionsGet(realm: string, roleName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ManagementPermissionReference>>;
    public realmRolesRoleNameManagementPermissionsGet(realm: string, roleName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmRolesRoleNameManagementPermissionsGet.');
        }

        if (roleName === null || roleName === undefined) {
            throw new Error('Required parameter roleName was null or undefined when calling realmRolesRoleNameManagementPermissionsGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ManagementPermissionReference>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/roles/${encodeURIComponent(String(roleName))}/management/permissions`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     * 
     * @param body 
     * @param realm realm name (not id!)
     * @param roleName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmRolesRoleNameManagementPermissionsPut(body: ManagementPermissionReference, realm: string, roleName: string, observe?: 'body', reportProgress?: boolean): Observable<ManagementPermissionReference>;
    public realmRolesRoleNameManagementPermissionsPut(body: ManagementPermissionReference, realm: string, roleName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ManagementPermissionReference>>;
    public realmRolesRoleNameManagementPermissionsPut(body: ManagementPermissionReference, realm: string, roleName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ManagementPermissionReference>>;
    public realmRolesRoleNameManagementPermissionsPut(body: ManagementPermissionReference, realm: string, roleName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling realmRolesRoleNameManagementPermissionsPut.');
        }

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmRolesRoleNameManagementPermissionsPut.');
        }

        if (roleName === null || roleName === undefined) {
            throw new Error('Required parameter roleName was null or undefined when calling realmRolesRoleNameManagementPermissionsPut.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ManagementPermissionReference>('put',`${this.basePath}/${encodeURIComponent(String(realm))}/roles/${encodeURIComponent(String(roleName))}/management/permissions`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a role by name
     * 
     * @param body 
     * @param realm realm name (not id!)
     * @param roleName role’s name (not id!)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmRolesRoleNamePut(body: RoleRepresentation, realm: string, roleName: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmRolesRoleNamePut(body: RoleRepresentation, realm: string, roleName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmRolesRoleNamePut(body: RoleRepresentation, realm: string, roleName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmRolesRoleNamePut(body: RoleRepresentation, realm: string, roleName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling realmRolesRoleNamePut.');
        }

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmRolesRoleNamePut.');
        }

        if (roleName === null || roleName === undefined) {
            throw new Error('Required parameter roleName was null or undefined when calling realmRolesRoleNamePut.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/${encodeURIComponent(String(realm))}/roles/${encodeURIComponent(String(roleName))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a stream of users that have the specified role name.
     * 
     * @param realm realm name (not id!)
     * @param roleName the role name.
     * @param first first result to return. Ignored if negative or {@code null}.
     * @param max maximum number of results to return. Ignored if negative or {@code null}.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmRolesRoleNameUsersGet(realm: string, roleName: string, first?: number, max?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<{ [key: string]: any; }>>;
    public realmRolesRoleNameUsersGet(realm: string, roleName: string, first?: number, max?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<{ [key: string]: any; }>>>;
    public realmRolesRoleNameUsersGet(realm: string, roleName: string, first?: number, max?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<{ [key: string]: any; }>>>;
    public realmRolesRoleNameUsersGet(realm: string, roleName: string, first?: number, max?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmRolesRoleNameUsersGet.');
        }

        if (roleName === null || roleName === undefined) {
            throw new Error('Required parameter roleName was null or undefined when calling realmRolesRoleNameUsersGet.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (first !== undefined && first !== null) {
            queryParameters = queryParameters.set('first', <any>first);
        }
        if (max !== undefined && max !== null) {
            queryParameters = queryParameters.set('max', <any>max);
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<{ [key: string]: any; }>>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/roles/${encodeURIComponent(String(roleName))}/users`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
