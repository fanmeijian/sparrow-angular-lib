/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { IdentityProviderMapperRepresentation } from '../model/identityProviderMapperRepresentation';
import { IdentityProviderRepresentation } from '../model/identityProviderRepresentation';
import { ManagementPermissionReference } from '../model/managementPermissionReference';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class IdentityProvidersService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Import identity provider from JSON body
     * 
     * @param body JSON body
     * @param realm realm name (not id!)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmIdentityProviderImportConfigPost(body: { [key: string]: any; }, realm: string, observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: any; }>;
    public realmIdentityProviderImportConfigPost(body: { [key: string]: any; }, realm: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: any; }>>;
    public realmIdentityProviderImportConfigPost(body: { [key: string]: any; }, realm: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: any; }>>;
    public realmIdentityProviderImportConfigPost(body: { [key: string]: any; }, realm: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling realmIdentityProviderImportConfigPost.');
        }

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmIdentityProviderImportConfigPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<{ [key: string]: any; }>('post',`${this.basePath}/${encodeURIComponent(String(realm))}/identity-provider/import-config`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete the identity provider
     * 
     * @param realm realm name (not id!)
     * @param alias 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmIdentityProviderInstancesAliasDelete(realm: string, alias: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmIdentityProviderInstancesAliasDelete(realm: string, alias: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmIdentityProviderInstancesAliasDelete(realm: string, alias: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmIdentityProviderInstancesAliasDelete(realm: string, alias: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmIdentityProviderInstancesAliasDelete.');
        }

        if (alias === null || alias === undefined) {
            throw new Error('Required parameter alias was null or undefined when calling realmIdentityProviderInstancesAliasDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/${encodeURIComponent(String(realm))}/identity-provider/instances/${encodeURIComponent(String(alias))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Export public broker configuration for identity provider
     * 
     * @param realm realm name (not id!)
     * @param alias 
     * @param format Format to use
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmIdentityProviderInstancesAliasExportGet(realm: string, alias: string, format?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmIdentityProviderInstancesAliasExportGet(realm: string, alias: string, format?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmIdentityProviderInstancesAliasExportGet(realm: string, alias: string, format?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmIdentityProviderInstancesAliasExportGet(realm: string, alias: string, format?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmIdentityProviderInstancesAliasExportGet.');
        }

        if (alias === null || alias === undefined) {
            throw new Error('Required parameter alias was null or undefined when calling realmIdentityProviderInstancesAliasExportGet.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (format !== undefined && format !== null) {
            queryParameters = queryParameters.set('format', <any>format);
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/identity-provider/instances/${encodeURIComponent(String(alias))}/export`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the identity provider
     * 
     * @param realm realm name (not id!)
     * @param alias 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmIdentityProviderInstancesAliasGet(realm: string, alias: string, observe?: 'body', reportProgress?: boolean): Observable<IdentityProviderRepresentation>;
    public realmIdentityProviderInstancesAliasGet(realm: string, alias: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IdentityProviderRepresentation>>;
    public realmIdentityProviderInstancesAliasGet(realm: string, alias: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IdentityProviderRepresentation>>;
    public realmIdentityProviderInstancesAliasGet(realm: string, alias: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmIdentityProviderInstancesAliasGet.');
        }

        if (alias === null || alias === undefined) {
            throw new Error('Required parameter alias was null or undefined when calling realmIdentityProviderInstancesAliasGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<IdentityProviderRepresentation>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/identity-provider/instances/${encodeURIComponent(String(alias))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!)
     * @param alias 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmIdentityProviderInstancesAliasManagementPermissionsGet(realm: string, alias: string, observe?: 'body', reportProgress?: boolean): Observable<ManagementPermissionReference>;
    public realmIdentityProviderInstancesAliasManagementPermissionsGet(realm: string, alias: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ManagementPermissionReference>>;
    public realmIdentityProviderInstancesAliasManagementPermissionsGet(realm: string, alias: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ManagementPermissionReference>>;
    public realmIdentityProviderInstancesAliasManagementPermissionsGet(realm: string, alias: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmIdentityProviderInstancesAliasManagementPermissionsGet.');
        }

        if (alias === null || alias === undefined) {
            throw new Error('Required parameter alias was null or undefined when calling realmIdentityProviderInstancesAliasManagementPermissionsGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ManagementPermissionReference>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/identity-provider/instances/${encodeURIComponent(String(alias))}/management/permissions`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     * 
     * @param body 
     * @param realm realm name (not id!)
     * @param alias 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmIdentityProviderInstancesAliasManagementPermissionsPut(body: ManagementPermissionReference, realm: string, alias: string, observe?: 'body', reportProgress?: boolean): Observable<ManagementPermissionReference>;
    public realmIdentityProviderInstancesAliasManagementPermissionsPut(body: ManagementPermissionReference, realm: string, alias: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ManagementPermissionReference>>;
    public realmIdentityProviderInstancesAliasManagementPermissionsPut(body: ManagementPermissionReference, realm: string, alias: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ManagementPermissionReference>>;
    public realmIdentityProviderInstancesAliasManagementPermissionsPut(body: ManagementPermissionReference, realm: string, alias: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling realmIdentityProviderInstancesAliasManagementPermissionsPut.');
        }

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmIdentityProviderInstancesAliasManagementPermissionsPut.');
        }

        if (alias === null || alias === undefined) {
            throw new Error('Required parameter alias was null or undefined when calling realmIdentityProviderInstancesAliasManagementPermissionsPut.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ManagementPermissionReference>('put',`${this.basePath}/${encodeURIComponent(String(realm))}/identity-provider/instances/${encodeURIComponent(String(alias))}/management/permissions`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get mapper types for identity provider
     * 
     * @param realm realm name (not id!)
     * @param alias 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmIdentityProviderInstancesAliasMapperTypesGet(realm: string, alias: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmIdentityProviderInstancesAliasMapperTypesGet(realm: string, alias: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmIdentityProviderInstancesAliasMapperTypesGet(realm: string, alias: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmIdentityProviderInstancesAliasMapperTypesGet(realm: string, alias: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmIdentityProviderInstancesAliasMapperTypesGet.');
        }

        if (alias === null || alias === undefined) {
            throw new Error('Required parameter alias was null or undefined when calling realmIdentityProviderInstancesAliasMapperTypesGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/identity-provider/instances/${encodeURIComponent(String(alias))}/mapper-types`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get mappers for identity provider
     * 
     * @param realm realm name (not id!)
     * @param alias 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmIdentityProviderInstancesAliasMappersGet(realm: string, alias: string, observe?: 'body', reportProgress?: boolean): Observable<Array<{ [key: string]: any; }>>;
    public realmIdentityProviderInstancesAliasMappersGet(realm: string, alias: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<{ [key: string]: any; }>>>;
    public realmIdentityProviderInstancesAliasMappersGet(realm: string, alias: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<{ [key: string]: any; }>>>;
    public realmIdentityProviderInstancesAliasMappersGet(realm: string, alias: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmIdentityProviderInstancesAliasMappersGet.');
        }

        if (alias === null || alias === undefined) {
            throw new Error('Required parameter alias was null or undefined when calling realmIdentityProviderInstancesAliasMappersGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<{ [key: string]: any; }>>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/identity-provider/instances/${encodeURIComponent(String(alias))}/mappers`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a mapper for the identity provider
     * 
     * @param realm realm name (not id!)
     * @param alias 
     * @param id Mapper id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmIdentityProviderInstancesAliasMappersIdDelete(realm: string, alias: string, id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmIdentityProviderInstancesAliasMappersIdDelete(realm: string, alias: string, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmIdentityProviderInstancesAliasMappersIdDelete(realm: string, alias: string, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmIdentityProviderInstancesAliasMappersIdDelete(realm: string, alias: string, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmIdentityProviderInstancesAliasMappersIdDelete.');
        }

        if (alias === null || alias === undefined) {
            throw new Error('Required parameter alias was null or undefined when calling realmIdentityProviderInstancesAliasMappersIdDelete.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling realmIdentityProviderInstancesAliasMappersIdDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/${encodeURIComponent(String(realm))}/identity-provider/instances/${encodeURIComponent(String(alias))}/mappers/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get mapper by id for the identity provider
     * 
     * @param realm realm name (not id!)
     * @param alias 
     * @param id Mapper id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmIdentityProviderInstancesAliasMappersIdGet(realm: string, alias: string, id: string, observe?: 'body', reportProgress?: boolean): Observable<IdentityProviderMapperRepresentation>;
    public realmIdentityProviderInstancesAliasMappersIdGet(realm: string, alias: string, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IdentityProviderMapperRepresentation>>;
    public realmIdentityProviderInstancesAliasMappersIdGet(realm: string, alias: string, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IdentityProviderMapperRepresentation>>;
    public realmIdentityProviderInstancesAliasMappersIdGet(realm: string, alias: string, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmIdentityProviderInstancesAliasMappersIdGet.');
        }

        if (alias === null || alias === undefined) {
            throw new Error('Required parameter alias was null or undefined when calling realmIdentityProviderInstancesAliasMappersIdGet.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling realmIdentityProviderInstancesAliasMappersIdGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<IdentityProviderMapperRepresentation>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/identity-provider/instances/${encodeURIComponent(String(alias))}/mappers/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a mapper for the identity provider
     * 
     * @param body 
     * @param realm realm name (not id!)
     * @param alias 
     * @param id Mapper id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmIdentityProviderInstancesAliasMappersIdPut(body: IdentityProviderMapperRepresentation, realm: string, alias: string, id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmIdentityProviderInstancesAliasMappersIdPut(body: IdentityProviderMapperRepresentation, realm: string, alias: string, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmIdentityProviderInstancesAliasMappersIdPut(body: IdentityProviderMapperRepresentation, realm: string, alias: string, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmIdentityProviderInstancesAliasMappersIdPut(body: IdentityProviderMapperRepresentation, realm: string, alias: string, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling realmIdentityProviderInstancesAliasMappersIdPut.');
        }

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmIdentityProviderInstancesAliasMappersIdPut.');
        }

        if (alias === null || alias === undefined) {
            throw new Error('Required parameter alias was null or undefined when calling realmIdentityProviderInstancesAliasMappersIdPut.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling realmIdentityProviderInstancesAliasMappersIdPut.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/${encodeURIComponent(String(realm))}/identity-provider/instances/${encodeURIComponent(String(alias))}/mappers/${encodeURIComponent(String(id))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add a mapper to identity provider
     * 
     * @param body 
     * @param realm realm name (not id!)
     * @param alias 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmIdentityProviderInstancesAliasMappersPost(body: IdentityProviderMapperRepresentation, realm: string, alias: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmIdentityProviderInstancesAliasMappersPost(body: IdentityProviderMapperRepresentation, realm: string, alias: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmIdentityProviderInstancesAliasMappersPost(body: IdentityProviderMapperRepresentation, realm: string, alias: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmIdentityProviderInstancesAliasMappersPost(body: IdentityProviderMapperRepresentation, realm: string, alias: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling realmIdentityProviderInstancesAliasMappersPost.');
        }

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmIdentityProviderInstancesAliasMappersPost.');
        }

        if (alias === null || alias === undefined) {
            throw new Error('Required parameter alias was null or undefined when calling realmIdentityProviderInstancesAliasMappersPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/${encodeURIComponent(String(realm))}/identity-provider/instances/${encodeURIComponent(String(alias))}/mappers`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update the identity provider
     * 
     * @param body 
     * @param realm realm name (not id!)
     * @param alias 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmIdentityProviderInstancesAliasPut(body: IdentityProviderRepresentation, realm: string, alias: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmIdentityProviderInstancesAliasPut(body: IdentityProviderRepresentation, realm: string, alias: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmIdentityProviderInstancesAliasPut(body: IdentityProviderRepresentation, realm: string, alias: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmIdentityProviderInstancesAliasPut(body: IdentityProviderRepresentation, realm: string, alias: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling realmIdentityProviderInstancesAliasPut.');
        }

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmIdentityProviderInstancesAliasPut.');
        }

        if (alias === null || alias === undefined) {
            throw new Error('Required parameter alias was null or undefined when calling realmIdentityProviderInstancesAliasPut.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/${encodeURIComponent(String(realm))}/identity-provider/instances/${encodeURIComponent(String(alias))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get identity providers
     * 
     * @param realm realm name (not id!)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmIdentityProviderInstancesGet(realm: string, observe?: 'body', reportProgress?: boolean): Observable<Array<{ [key: string]: any; }>>;
    public realmIdentityProviderInstancesGet(realm: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<{ [key: string]: any; }>>>;
    public realmIdentityProviderInstancesGet(realm: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<{ [key: string]: any; }>>>;
    public realmIdentityProviderInstancesGet(realm: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmIdentityProviderInstancesGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<{ [key: string]: any; }>>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/identity-provider/instances`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new identity provider
     * 
     * @param body JSON body
     * @param realm realm name (not id!)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmIdentityProviderInstancesPost(body: IdentityProviderRepresentation, realm: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmIdentityProviderInstancesPost(body: IdentityProviderRepresentation, realm: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmIdentityProviderInstancesPost(body: IdentityProviderRepresentation, realm: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmIdentityProviderInstancesPost(body: IdentityProviderRepresentation, realm: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling realmIdentityProviderInstancesPost.');
        }

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmIdentityProviderInstancesPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/${encodeURIComponent(String(realm))}/identity-provider/instances`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get identity providers
     * 
     * @param realm realm name (not id!)
     * @param providerId Provider id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmIdentityProviderProvidersProviderIdGet(realm: string, providerId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmIdentityProviderProvidersProviderIdGet(realm: string, providerId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmIdentityProviderProvidersProviderIdGet(realm: string, providerId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmIdentityProviderProvidersProviderIdGet(realm: string, providerId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmIdentityProviderProvidersProviderIdGet.');
        }

        if (providerId === null || providerId === undefined) {
            throw new Error('Required parameter providerId was null or undefined when calling realmIdentityProviderProvidersProviderIdGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/identity-provider/providers/${encodeURIComponent(String(providerId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
