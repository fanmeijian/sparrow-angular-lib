/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AuthenticationExecutionInfoRepresentation } from '../model/authenticationExecutionInfoRepresentation';
import { AuthenticationExecutionRepresentation } from '../model/authenticationExecutionRepresentation';
import { AuthenticationFlowRepresentation } from '../model/authenticationFlowRepresentation';
import { AuthenticatorConfigInfoRepresentation } from '../model/authenticatorConfigInfoRepresentation';
import { AuthenticatorConfigRepresentation } from '../model/authenticatorConfigRepresentation';
import { RequiredActionProviderRepresentation } from '../model/requiredActionProviderRepresentation';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AuthenticationManagementService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get authenticator providers   Returns a stream of authenticator providers.
     * 
     * @param realm realm name (not id!)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmAuthenticationAuthenticatorProvidersGet(realm: string, observe?: 'body', reportProgress?: boolean): Observable<Array<{ [key: string]: any; }>>;
    public realmAuthenticationAuthenticatorProvidersGet(realm: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<{ [key: string]: any; }>>>;
    public realmAuthenticationAuthenticatorProvidersGet(realm: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<{ [key: string]: any; }>>>;
    public realmAuthenticationAuthenticatorProvidersGet(realm: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmAuthenticationAuthenticatorProvidersGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<{ [key: string]: any; }>>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/authentication/authenticator-providers`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get client authenticator providers   Returns a stream of client authenticator providers.
     * 
     * @param realm realm name (not id!)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmAuthenticationClientAuthenticatorProvidersGet(realm: string, observe?: 'body', reportProgress?: boolean): Observable<Array<{ [key: string]: any; }>>;
    public realmAuthenticationClientAuthenticatorProvidersGet(realm: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<{ [key: string]: any; }>>>;
    public realmAuthenticationClientAuthenticatorProvidersGet(realm: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<{ [key: string]: any; }>>>;
    public realmAuthenticationClientAuthenticatorProvidersGet(realm: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmAuthenticationClientAuthenticatorProvidersGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<{ [key: string]: any; }>>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/authentication/client-authenticator-providers`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get authenticator providerâ€™s configuration description
     * 
     * @param realm realm name (not id!)
     * @param providerId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmAuthenticationConfigDescriptionProviderIdGet(realm: string, providerId: string, observe?: 'body', reportProgress?: boolean): Observable<AuthenticatorConfigInfoRepresentation>;
    public realmAuthenticationConfigDescriptionProviderIdGet(realm: string, providerId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AuthenticatorConfigInfoRepresentation>>;
    public realmAuthenticationConfigDescriptionProviderIdGet(realm: string, providerId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AuthenticatorConfigInfoRepresentation>>;
    public realmAuthenticationConfigDescriptionProviderIdGet(realm: string, providerId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmAuthenticationConfigDescriptionProviderIdGet.');
        }

        if (providerId === null || providerId === undefined) {
            throw new Error('Required parameter providerId was null or undefined when calling realmAuthenticationConfigDescriptionProviderIdGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<AuthenticatorConfigInfoRepresentation>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/authentication/config-description/${encodeURIComponent(String(providerId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete authenticator configuration
     * 
     * @param realm realm name (not id!)
     * @param id Configuration id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmAuthenticationConfigIdDelete(realm: string, id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmAuthenticationConfigIdDelete(realm: string, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmAuthenticationConfigIdDelete(realm: string, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmAuthenticationConfigIdDelete(realm: string, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmAuthenticationConfigIdDelete.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling realmAuthenticationConfigIdDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/${encodeURIComponent(String(realm))}/authentication/config/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get authenticator configuration
     * 
     * @param realm realm name (not id!)
     * @param id Configuration id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmAuthenticationConfigIdGet(realm: string, id: string, observe?: 'body', reportProgress?: boolean): Observable<AuthenticatorConfigRepresentation>;
    public realmAuthenticationConfigIdGet(realm: string, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AuthenticatorConfigRepresentation>>;
    public realmAuthenticationConfigIdGet(realm: string, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AuthenticatorConfigRepresentation>>;
    public realmAuthenticationConfigIdGet(realm: string, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmAuthenticationConfigIdGet.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling realmAuthenticationConfigIdGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<AuthenticatorConfigRepresentation>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/authentication/config/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update authenticator configuration
     * 
     * @param body JSON describing new state of authenticator configuration
     * @param realm realm name (not id!)
     * @param id Configuration id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmAuthenticationConfigIdPut(body: AuthenticatorConfigRepresentation, realm: string, id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmAuthenticationConfigIdPut(body: AuthenticatorConfigRepresentation, realm: string, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmAuthenticationConfigIdPut(body: AuthenticatorConfigRepresentation, realm: string, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmAuthenticationConfigIdPut(body: AuthenticatorConfigRepresentation, realm: string, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling realmAuthenticationConfigIdPut.');
        }

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmAuthenticationConfigIdPut.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling realmAuthenticationConfigIdPut.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/${encodeURIComponent(String(realm))}/authentication/config/${encodeURIComponent(String(id))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update execution with new configuration
     * 
     * @param body JSON with new configuration
     * @param realm realm name (not id!)
     * @param executionId Execution id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmAuthenticationExecutionsExecutionIdConfigPost(body: AuthenticatorConfigRepresentation, realm: string, executionId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmAuthenticationExecutionsExecutionIdConfigPost(body: AuthenticatorConfigRepresentation, realm: string, executionId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmAuthenticationExecutionsExecutionIdConfigPost(body: AuthenticatorConfigRepresentation, realm: string, executionId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmAuthenticationExecutionsExecutionIdConfigPost(body: AuthenticatorConfigRepresentation, realm: string, executionId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling realmAuthenticationExecutionsExecutionIdConfigPost.');
        }

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmAuthenticationExecutionsExecutionIdConfigPost.');
        }

        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling realmAuthenticationExecutionsExecutionIdConfigPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/${encodeURIComponent(String(realm))}/authentication/executions/${encodeURIComponent(String(executionId))}/config`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete execution
     * 
     * @param realm realm name (not id!)
     * @param executionId Execution id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmAuthenticationExecutionsExecutionIdDelete(realm: string, executionId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmAuthenticationExecutionsExecutionIdDelete(realm: string, executionId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmAuthenticationExecutionsExecutionIdDelete(realm: string, executionId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmAuthenticationExecutionsExecutionIdDelete(realm: string, executionId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmAuthenticationExecutionsExecutionIdDelete.');
        }

        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling realmAuthenticationExecutionsExecutionIdDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/${encodeURIComponent(String(realm))}/authentication/executions/${encodeURIComponent(String(executionId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Single Execution
     * 
     * @param realm realm name (not id!)
     * @param executionId Execution id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmAuthenticationExecutionsExecutionIdGet(realm: string, executionId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmAuthenticationExecutionsExecutionIdGet(realm: string, executionId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmAuthenticationExecutionsExecutionIdGet(realm: string, executionId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmAuthenticationExecutionsExecutionIdGet(realm: string, executionId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmAuthenticationExecutionsExecutionIdGet.');
        }

        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling realmAuthenticationExecutionsExecutionIdGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/authentication/executions/${encodeURIComponent(String(executionId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Lower executionâ€™s priority
     * 
     * @param realm realm name (not id!)
     * @param executionId Execution id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmAuthenticationExecutionsExecutionIdLowerPriorityPost(realm: string, executionId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmAuthenticationExecutionsExecutionIdLowerPriorityPost(realm: string, executionId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmAuthenticationExecutionsExecutionIdLowerPriorityPost(realm: string, executionId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmAuthenticationExecutionsExecutionIdLowerPriorityPost(realm: string, executionId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmAuthenticationExecutionsExecutionIdLowerPriorityPost.');
        }

        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling realmAuthenticationExecutionsExecutionIdLowerPriorityPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/${encodeURIComponent(String(realm))}/authentication/executions/${encodeURIComponent(String(executionId))}/lower-priority`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Raise executionâ€™s priority
     * 
     * @param realm realm name (not id!)
     * @param executionId Execution id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmAuthenticationExecutionsExecutionIdRaisePriorityPost(realm: string, executionId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmAuthenticationExecutionsExecutionIdRaisePriorityPost(realm: string, executionId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmAuthenticationExecutionsExecutionIdRaisePriorityPost(realm: string, executionId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmAuthenticationExecutionsExecutionIdRaisePriorityPost(realm: string, executionId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmAuthenticationExecutionsExecutionIdRaisePriorityPost.');
        }

        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling realmAuthenticationExecutionsExecutionIdRaisePriorityPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/${encodeURIComponent(String(realm))}/authentication/executions/${encodeURIComponent(String(executionId))}/raise-priority`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add new authentication execution
     * 
     * @param body JSON model describing authentication execution
     * @param realm realm name (not id!)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmAuthenticationExecutionsPost(body: AuthenticationExecutionRepresentation, realm: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmAuthenticationExecutionsPost(body: AuthenticationExecutionRepresentation, realm: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmAuthenticationExecutionsPost(body: AuthenticationExecutionRepresentation, realm: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmAuthenticationExecutionsPost(body: AuthenticationExecutionRepresentation, realm: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling realmAuthenticationExecutionsPost.');
        }

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmAuthenticationExecutionsPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/${encodeURIComponent(String(realm))}/authentication/executions`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Copy existing authentication flow under a new name   The new name is given as &#x27;newName&#x27; attribute of the passed JSON object
     * 
     * @param body JSON containing &#x27;newName&#x27; attribute
     * @param realm realm name (not id!)
     * @param flowAlias Name of the existing authentication flow
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmAuthenticationFlowsFlowAliasCopyPost(body: { [key: string]: any; }, realm: string, flowAlias: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmAuthenticationFlowsFlowAliasCopyPost(body: { [key: string]: any; }, realm: string, flowAlias: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmAuthenticationFlowsFlowAliasCopyPost(body: { [key: string]: any; }, realm: string, flowAlias: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmAuthenticationFlowsFlowAliasCopyPost(body: { [key: string]: any; }, realm: string, flowAlias: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling realmAuthenticationFlowsFlowAliasCopyPost.');
        }

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmAuthenticationFlowsFlowAliasCopyPost.');
        }

        if (flowAlias === null || flowAlias === undefined) {
            throw new Error('Required parameter flowAlias was null or undefined when calling realmAuthenticationFlowsFlowAliasCopyPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/${encodeURIComponent(String(realm))}/authentication/flows/${encodeURIComponent(String(flowAlias))}/copy`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add new authentication execution to a flow
     * 
     * @param body New execution JSON data containing &#x27;provider&#x27; attribute
     * @param realm realm name (not id!)
     * @param flowAlias Alias of parent flow
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmAuthenticationFlowsFlowAliasExecutionsExecutionPost(body: { [key: string]: any; }, realm: string, flowAlias: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmAuthenticationFlowsFlowAliasExecutionsExecutionPost(body: { [key: string]: any; }, realm: string, flowAlias: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmAuthenticationFlowsFlowAliasExecutionsExecutionPost(body: { [key: string]: any; }, realm: string, flowAlias: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmAuthenticationFlowsFlowAliasExecutionsExecutionPost(body: { [key: string]: any; }, realm: string, flowAlias: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling realmAuthenticationFlowsFlowAliasExecutionsExecutionPost.');
        }

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmAuthenticationFlowsFlowAliasExecutionsExecutionPost.');
        }

        if (flowAlias === null || flowAlias === undefined) {
            throw new Error('Required parameter flowAlias was null or undefined when calling realmAuthenticationFlowsFlowAliasExecutionsExecutionPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/${encodeURIComponent(String(realm))}/authentication/flows/${encodeURIComponent(String(flowAlias))}/executions/execution`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add new flow with new execution to existing flow
     * 
     * @param body New authentication flow / execution JSON data containing &#x27;alias&#x27;, &#x27;type&#x27;, &#x27;provider&#x27;, and &#x27;description&#x27; attributes
     * @param realm realm name (not id!)
     * @param flowAlias Alias of parent authentication flow
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmAuthenticationFlowsFlowAliasExecutionsFlowPost(body: { [key: string]: any; }, realm: string, flowAlias: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmAuthenticationFlowsFlowAliasExecutionsFlowPost(body: { [key: string]: any; }, realm: string, flowAlias: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmAuthenticationFlowsFlowAliasExecutionsFlowPost(body: { [key: string]: any; }, realm: string, flowAlias: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmAuthenticationFlowsFlowAliasExecutionsFlowPost(body: { [key: string]: any; }, realm: string, flowAlias: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling realmAuthenticationFlowsFlowAliasExecutionsFlowPost.');
        }

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmAuthenticationFlowsFlowAliasExecutionsFlowPost.');
        }

        if (flowAlias === null || flowAlias === undefined) {
            throw new Error('Required parameter flowAlias was null or undefined when calling realmAuthenticationFlowsFlowAliasExecutionsFlowPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/${encodeURIComponent(String(realm))}/authentication/flows/${encodeURIComponent(String(flowAlias))}/executions/flow`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get authentication executions for a flow
     * 
     * @param realm realm name (not id!)
     * @param flowAlias Flow alias
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmAuthenticationFlowsFlowAliasExecutionsGet(realm: string, flowAlias: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmAuthenticationFlowsFlowAliasExecutionsGet(realm: string, flowAlias: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmAuthenticationFlowsFlowAliasExecutionsGet(realm: string, flowAlias: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmAuthenticationFlowsFlowAliasExecutionsGet(realm: string, flowAlias: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmAuthenticationFlowsFlowAliasExecutionsGet.');
        }

        if (flowAlias === null || flowAlias === undefined) {
            throw new Error('Required parameter flowAlias was null or undefined when calling realmAuthenticationFlowsFlowAliasExecutionsGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/authentication/flows/${encodeURIComponent(String(flowAlias))}/executions`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update authentication executions of a Flow
     * 
     * @param body AuthenticationExecutionInfoRepresentation
     * @param realm realm name (not id!)
     * @param flowAlias Flow alias
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmAuthenticationFlowsFlowAliasExecutionsPut(body: AuthenticationExecutionInfoRepresentation, realm: string, flowAlias: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmAuthenticationFlowsFlowAliasExecutionsPut(body: AuthenticationExecutionInfoRepresentation, realm: string, flowAlias: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmAuthenticationFlowsFlowAliasExecutionsPut(body: AuthenticationExecutionInfoRepresentation, realm: string, flowAlias: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmAuthenticationFlowsFlowAliasExecutionsPut(body: AuthenticationExecutionInfoRepresentation, realm: string, flowAlias: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling realmAuthenticationFlowsFlowAliasExecutionsPut.');
        }

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmAuthenticationFlowsFlowAliasExecutionsPut.');
        }

        if (flowAlias === null || flowAlias === undefined) {
            throw new Error('Required parameter flowAlias was null or undefined when calling realmAuthenticationFlowsFlowAliasExecutionsPut.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/${encodeURIComponent(String(realm))}/authentication/flows/${encodeURIComponent(String(flowAlias))}/executions`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get authentication flows   Returns a stream of authentication flows.
     * 
     * @param realm realm name (not id!)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmAuthenticationFlowsGet(realm: string, observe?: 'body', reportProgress?: boolean): Observable<Array<{ [key: string]: any; }>>;
    public realmAuthenticationFlowsGet(realm: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<{ [key: string]: any; }>>>;
    public realmAuthenticationFlowsGet(realm: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<{ [key: string]: any; }>>>;
    public realmAuthenticationFlowsGet(realm: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmAuthenticationFlowsGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<{ [key: string]: any; }>>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/authentication/flows`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete an authentication flow
     * 
     * @param realm realm name (not id!)
     * @param id Flow id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmAuthenticationFlowsIdDelete(realm: string, id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmAuthenticationFlowsIdDelete(realm: string, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmAuthenticationFlowsIdDelete(realm: string, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmAuthenticationFlowsIdDelete(realm: string, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmAuthenticationFlowsIdDelete.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling realmAuthenticationFlowsIdDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/${encodeURIComponent(String(realm))}/authentication/flows/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get authentication flow for id
     * 
     * @param realm realm name (not id!)
     * @param id Flow id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmAuthenticationFlowsIdGet(realm: string, id: string, observe?: 'body', reportProgress?: boolean): Observable<AuthenticationFlowRepresentation>;
    public realmAuthenticationFlowsIdGet(realm: string, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AuthenticationFlowRepresentation>>;
    public realmAuthenticationFlowsIdGet(realm: string, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AuthenticationFlowRepresentation>>;
    public realmAuthenticationFlowsIdGet(realm: string, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmAuthenticationFlowsIdGet.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling realmAuthenticationFlowsIdGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<AuthenticationFlowRepresentation>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/authentication/flows/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update an authentication flow
     * 
     * @param body Authentication flow representation
     * @param realm realm name (not id!)
     * @param id Flow id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmAuthenticationFlowsIdPut(body: AuthenticationFlowRepresentation, realm: string, id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmAuthenticationFlowsIdPut(body: AuthenticationFlowRepresentation, realm: string, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmAuthenticationFlowsIdPut(body: AuthenticationFlowRepresentation, realm: string, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmAuthenticationFlowsIdPut(body: AuthenticationFlowRepresentation, realm: string, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling realmAuthenticationFlowsIdPut.');
        }

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmAuthenticationFlowsIdPut.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling realmAuthenticationFlowsIdPut.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/${encodeURIComponent(String(realm))}/authentication/flows/${encodeURIComponent(String(id))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new authentication flow
     * 
     * @param body Authentication flow representation
     * @param realm realm name (not id!)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmAuthenticationFlowsPost(body: AuthenticationFlowRepresentation, realm: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmAuthenticationFlowsPost(body: AuthenticationFlowRepresentation, realm: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmAuthenticationFlowsPost(body: AuthenticationFlowRepresentation, realm: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmAuthenticationFlowsPost(body: AuthenticationFlowRepresentation, realm: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling realmAuthenticationFlowsPost.');
        }

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmAuthenticationFlowsPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/${encodeURIComponent(String(realm))}/authentication/flows`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get form action providers   Returns a stream of form action providers.
     * 
     * @param realm realm name (not id!)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmAuthenticationFormActionProvidersGet(realm: string, observe?: 'body', reportProgress?: boolean): Observable<Array<{ [key: string]: any; }>>;
    public realmAuthenticationFormActionProvidersGet(realm: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<{ [key: string]: any; }>>>;
    public realmAuthenticationFormActionProvidersGet(realm: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<{ [key: string]: any; }>>>;
    public realmAuthenticationFormActionProvidersGet(realm: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmAuthenticationFormActionProvidersGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<{ [key: string]: any; }>>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/authentication/form-action-providers`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get form providers   Returns a stream of form providers.
     * 
     * @param realm realm name (not id!)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmAuthenticationFormProvidersGet(realm: string, observe?: 'body', reportProgress?: boolean): Observable<Array<{ [key: string]: any; }>>;
    public realmAuthenticationFormProvidersGet(realm: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<{ [key: string]: any; }>>>;
    public realmAuthenticationFormProvidersGet(realm: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<{ [key: string]: any; }>>>;
    public realmAuthenticationFormProvidersGet(realm: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmAuthenticationFormProvidersGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<{ [key: string]: any; }>>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/authentication/form-providers`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get configuration descriptions for all clients
     * 
     * @param realm realm name (not id!)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmAuthenticationPerClientConfigDescriptionGet(realm: string, observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: any; }>;
    public realmAuthenticationPerClientConfigDescriptionGet(realm: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: any; }>>;
    public realmAuthenticationPerClientConfigDescriptionGet(realm: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: any; }>>;
    public realmAuthenticationPerClientConfigDescriptionGet(realm: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmAuthenticationPerClientConfigDescriptionGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<{ [key: string]: any; }>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/authentication/per-client-config-description`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Register a new required actions
     * 
     * @param body JSON containing &#x27;providerId&#x27;, and &#x27;name&#x27; attributes.
     * @param realm realm name (not id!)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmAuthenticationRegisterRequiredActionPost(body: { [key: string]: any; }, realm: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmAuthenticationRegisterRequiredActionPost(body: { [key: string]: any; }, realm: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmAuthenticationRegisterRequiredActionPost(body: { [key: string]: any; }, realm: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmAuthenticationRegisterRequiredActionPost(body: { [key: string]: any; }, realm: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling realmAuthenticationRegisterRequiredActionPost.');
        }

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmAuthenticationRegisterRequiredActionPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/${encodeURIComponent(String(realm))}/authentication/register-required-action`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete required action
     * 
     * @param realm realm name (not id!)
     * @param alias Alias of required action
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmAuthenticationRequiredActionsAliasDelete(realm: string, alias: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmAuthenticationRequiredActionsAliasDelete(realm: string, alias: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmAuthenticationRequiredActionsAliasDelete(realm: string, alias: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmAuthenticationRequiredActionsAliasDelete(realm: string, alias: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmAuthenticationRequiredActionsAliasDelete.');
        }

        if (alias === null || alias === undefined) {
            throw new Error('Required parameter alias was null or undefined when calling realmAuthenticationRequiredActionsAliasDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/${encodeURIComponent(String(realm))}/authentication/required-actions/${encodeURIComponent(String(alias))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get required action for alias
     * 
     * @param realm realm name (not id!)
     * @param alias Alias of required action
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmAuthenticationRequiredActionsAliasGet(realm: string, alias: string, observe?: 'body', reportProgress?: boolean): Observable<RequiredActionProviderRepresentation>;
    public realmAuthenticationRequiredActionsAliasGet(realm: string, alias: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RequiredActionProviderRepresentation>>;
    public realmAuthenticationRequiredActionsAliasGet(realm: string, alias: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RequiredActionProviderRepresentation>>;
    public realmAuthenticationRequiredActionsAliasGet(realm: string, alias: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmAuthenticationRequiredActionsAliasGet.');
        }

        if (alias === null || alias === undefined) {
            throw new Error('Required parameter alias was null or undefined when calling realmAuthenticationRequiredActionsAliasGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<RequiredActionProviderRepresentation>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/authentication/required-actions/${encodeURIComponent(String(alias))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Lower required actionâ€™s priority
     * 
     * @param realm realm name (not id!)
     * @param alias Alias of required action
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmAuthenticationRequiredActionsAliasLowerPriorityPost(realm: string, alias: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmAuthenticationRequiredActionsAliasLowerPriorityPost(realm: string, alias: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmAuthenticationRequiredActionsAliasLowerPriorityPost(realm: string, alias: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmAuthenticationRequiredActionsAliasLowerPriorityPost(realm: string, alias: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmAuthenticationRequiredActionsAliasLowerPriorityPost.');
        }

        if (alias === null || alias === undefined) {
            throw new Error('Required parameter alias was null or undefined when calling realmAuthenticationRequiredActionsAliasLowerPriorityPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/${encodeURIComponent(String(realm))}/authentication/required-actions/${encodeURIComponent(String(alias))}/lower-priority`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update required action
     * 
     * @param body JSON describing new state of required action
     * @param realm realm name (not id!)
     * @param alias Alias of required action
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmAuthenticationRequiredActionsAliasPut(body: RequiredActionProviderRepresentation, realm: string, alias: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmAuthenticationRequiredActionsAliasPut(body: RequiredActionProviderRepresentation, realm: string, alias: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmAuthenticationRequiredActionsAliasPut(body: RequiredActionProviderRepresentation, realm: string, alias: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmAuthenticationRequiredActionsAliasPut(body: RequiredActionProviderRepresentation, realm: string, alias: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling realmAuthenticationRequiredActionsAliasPut.');
        }

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmAuthenticationRequiredActionsAliasPut.');
        }

        if (alias === null || alias === undefined) {
            throw new Error('Required parameter alias was null or undefined when calling realmAuthenticationRequiredActionsAliasPut.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/${encodeURIComponent(String(realm))}/authentication/required-actions/${encodeURIComponent(String(alias))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Raise required actionâ€™s priority
     * 
     * @param realm realm name (not id!)
     * @param alias Alias of required action
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmAuthenticationRequiredActionsAliasRaisePriorityPost(realm: string, alias: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public realmAuthenticationRequiredActionsAliasRaisePriorityPost(realm: string, alias: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public realmAuthenticationRequiredActionsAliasRaisePriorityPost(realm: string, alias: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public realmAuthenticationRequiredActionsAliasRaisePriorityPost(realm: string, alias: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmAuthenticationRequiredActionsAliasRaisePriorityPost.');
        }

        if (alias === null || alias === undefined) {
            throw new Error('Required parameter alias was null or undefined when calling realmAuthenticationRequiredActionsAliasRaisePriorityPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/${encodeURIComponent(String(realm))}/authentication/required-actions/${encodeURIComponent(String(alias))}/raise-priority`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get required actions   Returns a stream of required actions.
     * 
     * @param realm realm name (not id!)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmAuthenticationRequiredActionsGet(realm: string, observe?: 'body', reportProgress?: boolean): Observable<Array<{ [key: string]: any; }>>;
    public realmAuthenticationRequiredActionsGet(realm: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<{ [key: string]: any; }>>>;
    public realmAuthenticationRequiredActionsGet(realm: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<{ [key: string]: any; }>>>;
    public realmAuthenticationRequiredActionsGet(realm: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmAuthenticationRequiredActionsGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<{ [key: string]: any; }>>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/authentication/required-actions`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get unregistered required actions   Returns a stream of unregistered required actions.
     * 
     * @param realm realm name (not id!)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public realmAuthenticationUnregisteredRequiredActionsGet(realm: string, observe?: 'body', reportProgress?: boolean): Observable<Array<{ [key: string]: any; }>>;
    public realmAuthenticationUnregisteredRequiredActionsGet(realm: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<{ [key: string]: any; }>>>;
    public realmAuthenticationUnregisteredRequiredActionsGet(realm: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<{ [key: string]: any; }>>>;
    public realmAuthenticationUnregisteredRequiredActionsGet(realm: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realm === null || realm === undefined) {
            throw new Error('Required parameter realm was null or undefined when calling realmAuthenticationUnregisteredRequiredActionsGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<{ [key: string]: any; }>>('get',`${this.basePath}/${encodeURIComponent(String(realm))}/authentication/unregistered-required-actions`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
