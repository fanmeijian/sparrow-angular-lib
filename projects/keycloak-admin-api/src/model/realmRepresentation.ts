/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AuthenticationFlowRepresentation } from './authenticationFlowRepresentation';
import { AuthenticatorConfigRepresentation } from './authenticatorConfigRepresentation';
import { ClientRepresentation } from './clientRepresentation';
import { ClientScopeRepresentation } from './clientScopeRepresentation';
import { GroupRepresentation } from './groupRepresentation';
import { IdentityProviderMapperRepresentation } from './identityProviderMapperRepresentation';
import { IdentityProviderRepresentation } from './identityProviderRepresentation';
import { JsonNode } from './jsonNode';
import { MultivaluedHashMap } from './multivaluedHashMap';
import { ProtocolMapperRepresentation } from './protocolMapperRepresentation';
import { RequiredActionProviderRepresentation } from './requiredActionProviderRepresentation';
import { RoleRepresentation } from './roleRepresentation';
import { RolesRepresentation } from './rolesRepresentation';
import { ScopeMappingRepresentation } from './scopeMappingRepresentation';
import { UserFederationMapperRepresentation } from './userFederationMapperRepresentation';
import { UserFederationProviderRepresentation } from './userFederationProviderRepresentation';
import { UserRepresentation } from './userRepresentation';

export interface RealmRepresentation { 
    accessCodeLifespan?: number;
    accessCodeLifespanLogin?: number;
    accessCodeLifespanUserAction?: number;
    accessTokenLifespan?: number;
    accessTokenLifespanForImplicitFlow?: number;
    accountTheme?: string;
    actionTokenGeneratedByAdminLifespan?: number;
    actionTokenGeneratedByUserLifespan?: number;
    adminEventsDetailsEnabled?: boolean;
    adminEventsEnabled?: boolean;
    adminTheme?: string;
    attributes?: { [key: string]: any; };
    authenticationFlows?: Array<AuthenticationFlowRepresentation>;
    authenticatorConfig?: Array<AuthenticatorConfigRepresentation>;
    browserFlow?: string;
    browserSecurityHeaders?: { [key: string]: any; };
    bruteForceProtected?: boolean;
    clientAuthenticationFlow?: string;
    clientOfflineSessionIdleTimeout?: number;
    clientOfflineSessionMaxLifespan?: number;
    clientPolicies?: JsonNode;
    clientProfiles?: JsonNode;
    clientScopeMappings?: { [key: string]: any; };
    clientScopes?: Array<ClientScopeRepresentation>;
    clientSessionIdleTimeout?: number;
    clientSessionMaxLifespan?: number;
    clients?: Array<ClientRepresentation>;
    components?: MultivaluedHashMap;
    defaultDefaultClientScopes?: Array<string>;
    defaultGroups?: Array<string>;
    defaultLocale?: string;
    defaultOptionalClientScopes?: Array<string>;
    defaultRole?: RoleRepresentation;
    defaultSignatureAlgorithm?: string;
    directGrantFlow?: string;
    displayName?: string;
    displayNameHtml?: string;
    dockerAuthenticationFlow?: string;
    duplicateEmailsAllowed?: boolean;
    editUsernameAllowed?: boolean;
    emailTheme?: string;
    enabled?: boolean;
    enabledEventTypes?: Array<string>;
    eventsEnabled?: boolean;
    eventsExpiration?: number;
    eventsListeners?: Array<string>;
    failureFactor?: number;
    federatedUsers?: Array<UserRepresentation>;
    groups?: Array<GroupRepresentation>;
    id?: string;
    identityProviderMappers?: Array<IdentityProviderMapperRepresentation>;
    identityProviders?: Array<IdentityProviderRepresentation>;
    internationalizationEnabled?: boolean;
    keycloakVersion?: string;
    loginTheme?: string;
    loginWithEmailAllowed?: boolean;
    maxDeltaTimeSeconds?: number;
    maxFailureWaitSeconds?: number;
    minimumQuickLoginWaitSeconds?: number;
    notBefore?: number;
    oAuth2DeviceCodeLifespan?: number;
    oAuth2DevicePollingInterval?: number;
    oauth2DeviceCodeLifespan?: number;
    oauth2DevicePollingInterval?: number;
    offlineSessionIdleTimeout?: number;
    offlineSessionMaxLifespan?: number;
    offlineSessionMaxLifespanEnabled?: boolean;
    otpPolicyAlgorithm?: string;
    otpPolicyCodeReusable?: boolean;
    otpPolicyDigits?: number;
    otpPolicyInitialCounter?: number;
    otpPolicyLookAheadWindow?: number;
    otpPolicyPeriod?: number;
    otpPolicyType?: string;
    otpSupportedApplications?: Array<string>;
    passwordPolicy?: string;
    permanentLockout?: boolean;
    protocolMappers?: Array<ProtocolMapperRepresentation>;
    quickLoginCheckMilliSeconds?: number;
    realm?: string;
    refreshTokenMaxReuse?: number;
    registrationAllowed?: boolean;
    registrationEmailAsUsername?: boolean;
    registrationFlow?: string;
    rememberMe?: boolean;
    requiredActions?: Array<RequiredActionProviderRepresentation>;
    resetCredentialsFlow?: string;
    resetPasswordAllowed?: boolean;
    revokeRefreshToken?: boolean;
    roles?: RolesRepresentation;
    scopeMappings?: Array<ScopeMappingRepresentation>;
    smtpServer?: { [key: string]: any; };
    sslRequired?: string;
    ssoSessionIdleTimeout?: number;
    ssoSessionIdleTimeoutRememberMe?: number;
    ssoSessionMaxLifespan?: number;
    ssoSessionMaxLifespanRememberMe?: number;
    supportedLocales?: Array<string>;
    userFederationMappers?: Array<UserFederationMapperRepresentation>;
    userFederationProviders?: Array<UserFederationProviderRepresentation>;
    userManagedAccessAllowed?: boolean;
    users?: Array<UserRepresentation>;
    verifyEmail?: boolean;
    waitIncrementSeconds?: number;
    webAuthnPolicyAcceptableAaguids?: Array<string>;
    webAuthnPolicyAttestationConveyancePreference?: string;
    webAuthnPolicyAuthenticatorAttachment?: string;
    webAuthnPolicyAvoidSameAuthenticatorRegister?: boolean;
    webAuthnPolicyCreateTimeout?: number;
    webAuthnPolicyPasswordlessAcceptableAaguids?: Array<string>;
    webAuthnPolicyPasswordlessAttestationConveyancePreference?: string;
    webAuthnPolicyPasswordlessAuthenticatorAttachment?: string;
    webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister?: boolean;
    webAuthnPolicyPasswordlessCreateTimeout?: number;
    webAuthnPolicyPasswordlessRequireResidentKey?: string;
    webAuthnPolicyPasswordlessRpEntityName?: string;
    webAuthnPolicyPasswordlessRpId?: string;
    webAuthnPolicyPasswordlessSignatureAlgorithms?: Array<string>;
    webAuthnPolicyPasswordlessUserVerificationRequirement?: string;
    webAuthnPolicyRequireResidentKey?: string;
    webAuthnPolicyRpEntityName?: string;
    webAuthnPolicyRpId?: string;
    webAuthnPolicySignatureAlgorithms?: Array<string>;
    webAuthnPolicyUserVerificationRequirement?: string;
}