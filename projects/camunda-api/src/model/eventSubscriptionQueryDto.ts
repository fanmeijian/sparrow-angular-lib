/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.19.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { EventSubscriptionQueryDtoSorting } from './eventSubscriptionQueryDtoSorting';

/**
 * A event subscription query which retrieves a list of event subscriptions
 */
export interface EventSubscriptionQueryDto { 
    /**
     * The id of the event subscription.
     */
    eventSubscriptionId?: string;
    /**
     * The name of the event this subscription belongs to as defined in the process model.
     */
    eventName?: string;
    /**
     * The type of the event subscription.
     */
    eventType?: EventSubscriptionQueryDto.EventTypeEnum;
    /**
     * The execution that is subscribed on the referenced event.
     */
    executionId?: string;
    /**
     * The process instance this subscription belongs to.
     */
    processInstanceId?: string;
    /**
     * The identifier of the activity that this event subscription belongs to. This could for example be the id of a receive task.
     */
    activityId?: string;
    /**
     * Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids.
     */
    tenantIdIn?: Array<string>;
    /**
     * Only select subscriptions which have no tenant id. Value may only be `true`, as `false` is the default behavior.
     */
    withoutTenantId?: boolean;
    /**
     * Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be `true`, as `false` is the default behavior.
     */
    includeEventSubscriptionsWithoutTenantId?: boolean;
    /**
     * Apply sorting of the result
     */
    sorting?: Array<EventSubscriptionQueryDtoSorting>;
}
export namespace EventSubscriptionQueryDto {
    export type EventTypeEnum = 'message' | 'signal' | 'compensate' | 'conditional';
    export const EventTypeEnum = {
        Message: 'message' as EventTypeEnum,
        Signal: 'signal' as EventTypeEnum,
        Compensate: 'compensate' as EventTypeEnum,
        Conditional: 'conditional' as EventTypeEnum
    };
}