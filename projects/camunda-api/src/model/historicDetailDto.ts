/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.19.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

export interface HistoricDetailDto { 
    /**
     * The id of the historic detail.
     */
    id?: string;
    /**
     * The type of the historic detail. Either `formField` for a submitted form field value or `variableUpdate` for variable updates.
     */
    type?: string;
    /**
     * The key of the process definition that this historic detail belongs to.
     */
    processDefinitionKey?: string;
    /**
     * The id of the process definition that this historic detail belongs to.
     */
    processDefinitionId?: string;
    /**
     * The id of the process instance the historic detail belongs to.
     */
    processInstanceId?: string;
    /**
     * The id of the activity instance the historic detail belongs to.
     */
    activityInstanceId?: string;
    /**
     * The id of the execution the historic detail belongs to.
     */
    executionId?: string;
    /**
     * The key of the case definition that this historic detail belongs to.
     */
    caseDefinitionKey?: string;
    /**
     * The id of the case definition that this historic detail belongs to.
     */
    caseDefinitionId?: string;
    /**
     * The id of the case instance the historic detail belongs to.
     */
    caseInstanceId?: string;
    /**
     * The id of the case execution the historic detail belongs to.
     */
    caseExecutionId?: string;
    /**
     * The id of the task the historic detail belongs to.
     */
    taskId?: string;
    /**
     * The id of the tenant that this historic detail belongs to.
     */
    tenantId?: string;
    /**
     * The id of user operation which links historic detail with [user operation log](https://docs.camunda.org/manual/7.19/reference/rest/history/user-operation-log/) entries.
     */
    userOperationId?: string;
    /**
     * The time when this historic detail occurred. Default [format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
     */
    time?: Date;
    /**
     * The time after which the historic detail should be removed by the History Cleanup job. Default [format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
     */
    removalTime?: Date;
    /**
     * The process instance id of the root process instance that initiated the process containing this historic detail.
     */
    rootProcessInstanceId?: string;
    /**
     * The id of the form field.  **Note:** This property is only set for a `HistoricVariableUpdate` historic details. In these cases, the value of the `type` property is `formField`.
     */
    fieldId?: string;
    /**
     * The submitted form field value. The value differs depending on the form field's type and on the `deserializeValue` parameter.  **Note:** This property is only set for a `HistoricVariableUpdate` historic details. In these cases, the value of the `type` property is `formField`.
     */
    fieldValue?: any;
    /**
     * The name of the variable which has been updated.  **Note:** This property is only set for a `HistoricVariableUpdate` historic details. In these cases, the value of the `type` property is `variableUpdate`.
     */
    variableName?: string;
    /**
     * The id of the associated variable instance.  **Note:** This property is only set for a `HistoricVariableUpdate` historic details. In these cases, the value of the `type` property is `variableUpdate`.
     */
    variableInstanceId?: string;
    /**
     * The value type of the variable.  **Note:** This property is only set for a `HistoricVariableUpdate` historic details. In these cases, the value of the `type` property is `variableUpdate`.
     */
    variableType?: string;
    /**
     * The variable's value. Value differs depending on the variable's type and on the deserializeValues parameter.  **Note:** This property is only set for a `HistoricVariableUpdate` historic details. In these cases, the value of the `type` property is `variableUpdate`.
     */
    value?: any;
    /**
     * A JSON object containing additional, value-type-dependent properties. For variables of type `Object`, the following properties are returned:  * `objectTypeName`: A string representation of the object's type name. * `serializationDataFormat`: The serialization format used to store the variable.  **Note:** This property is only set for a `HistoricVariableUpdate` historic details. In these cases, the value of the `type` property is `variableUpdate`.
     */
    valueInfo?: { [key: string]: any; };
    /**
     * Returns `true` for variable updates that contains the initial values of the variables.  **Note:** This property is only set for a `HistoricVariableUpdate` historic details. In these cases, the value of the `type` property is `variableUpdate`.
     */
    initial?: boolean;
    /**
     * The revision of the historic variable update.  **Note:** This property is only set for a `HistoricVariableUpdate` historic details. In these cases, the value of the `type` property is `variableUpdate`.
     */
    revision?: number;
    /**
     * An error message in case a Java Serialized Object could not be de-serialized.  **Note:** This property is only set for a `HistoricVariableUpdate` historic details. In these cases, the value of the `type` property is `variableUpdate`.
     */
    errorMessage?: string;
}