/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.19.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CountResultDto } from '../model/countResultDto';
import { DecisionDefinitionDiagramDto } from '../model/decisionDefinitionDiagramDto';
import { DecisionDefinitionDto } from '../model/decisionDefinitionDto';
import { EvaluateDecisionDto } from '../model/evaluateDecisionDto';
import { ExceptionDto } from '../model/exceptionDto';
import { HistoryTimeToLiveDto } from '../model/historyTimeToLiveDto';
import { VariableValueDto } from '../model/variableValueDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DecisionDefinitionService {

    protected basePath = 'http://{host}:{port}/{contextPath}';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Evaluate By Id
     * Evaluates a given decision and returns the result. The input values of the decision have to be supplied in the request body.
     * @param id The id of the decision definition to be evaluated.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public evaluateDecisionById(id: string, body?: EvaluateDecisionDto, observe?: 'body', reportProgress?: boolean): Observable<Array<{ [key: string]: VariableValueDto; }>>;
    public evaluateDecisionById(id: string, body?: EvaluateDecisionDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<{ [key: string]: VariableValueDto; }>>>;
    public evaluateDecisionById(id: string, body?: EvaluateDecisionDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<{ [key: string]: VariableValueDto; }>>>;
    public evaluateDecisionById(id: string, body?: EvaluateDecisionDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling evaluateDecisionById.');
        }


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<{ [key: string]: VariableValueDto; }>>('post',`${this.basePath}/decision-definition/${encodeURIComponent(String(id))}/evaluate`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Evaluate By Key
     * Evaluates the latest version of the decision definition which belongs to no tenant. The input values of the decision have to be supplied in the request body.
     * @param key The key of the decision definition (the latest version thereof) to be evaluated.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public evaluateDecisionByKey(key: string, body?: EvaluateDecisionDto, observe?: 'body', reportProgress?: boolean): Observable<Array<{ [key: string]: VariableValueDto; }>>;
    public evaluateDecisionByKey(key: string, body?: EvaluateDecisionDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<{ [key: string]: VariableValueDto; }>>>;
    public evaluateDecisionByKey(key: string, body?: EvaluateDecisionDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<{ [key: string]: VariableValueDto; }>>>;
    public evaluateDecisionByKey(key: string, body?: EvaluateDecisionDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling evaluateDecisionByKey.');
        }


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<{ [key: string]: VariableValueDto; }>>('post',`${this.basePath}/decision-definition/key/${encodeURIComponent(String(key))}/evaluate`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Evaluate By Key And Tenant
     * Evaluates the latest version of the decision definition for tenant. The input values of the decision have to be supplied in the request body.
     * @param key The key of the decision definition (the latest version thereof) to be evaluated.
     * @param tenantId The id of the tenant the decision definition belongs to.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public evaluateDecisionByKeyAndTenant(key: string, tenantId: string, body?: EvaluateDecisionDto, observe?: 'body', reportProgress?: boolean): Observable<Array<{ [key: string]: VariableValueDto; }>>;
    public evaluateDecisionByKeyAndTenant(key: string, tenantId: string, body?: EvaluateDecisionDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<{ [key: string]: VariableValueDto; }>>>;
    public evaluateDecisionByKeyAndTenant(key: string, tenantId: string, body?: EvaluateDecisionDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<{ [key: string]: VariableValueDto; }>>>;
    public evaluateDecisionByKeyAndTenant(key: string, tenantId: string, body?: EvaluateDecisionDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling evaluateDecisionByKeyAndTenant.');
        }

        if (tenantId === null || tenantId === undefined) {
            throw new Error('Required parameter tenantId was null or undefined when calling evaluateDecisionByKeyAndTenant.');
        }


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<{ [key: string]: VariableValueDto; }>>('post',`${this.basePath}/decision-definition/key/${encodeURIComponent(String(key))}/tenant-id/${encodeURIComponent(String(tenantId))}/evaluate`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Decision Definition By Id
     * Retrieves a decision definition by id, according to the &#x60;DecisionDefinition&#x60; interface in the engine.
     * @param id The id of the decision definition to be retrieved.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDecisionDefinitionById(id: string, observe?: 'body', reportProgress?: boolean): Observable<DecisionDefinitionDto>;
    public getDecisionDefinitionById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DecisionDefinitionDto>>;
    public getDecisionDefinitionById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DecisionDefinitionDto>>;
    public getDecisionDefinitionById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getDecisionDefinitionById.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<DecisionDefinitionDto>('get',`${this.basePath}/decision-definition/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Decision Definition By Key
     * Retrieves the latest version of the decision definition which belongs to no tenant.
     * @param key The key of the decision definition (the latest version thereof) to be retrieved.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDecisionDefinitionByKey(key: string, observe?: 'body', reportProgress?: boolean): Observable<DecisionDefinitionDto>;
    public getDecisionDefinitionByKey(key: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DecisionDefinitionDto>>;
    public getDecisionDefinitionByKey(key: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DecisionDefinitionDto>>;
    public getDecisionDefinitionByKey(key: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling getDecisionDefinitionByKey.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<DecisionDefinitionDto>('get',`${this.basePath}/decision-definition/key/${encodeURIComponent(String(key))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Decision Definition By Key And Tenant Id
     * Retrieves the latest version of the decision definition for tenant
     * @param key The key of the decision definition (the latest version thereof) to be retrieved.
     * @param tenantId The id of the tenant the decision definition belongs to.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDecisionDefinitionByKeyAndTenantId(key: string, tenantId: string, observe?: 'body', reportProgress?: boolean): Observable<DecisionDefinitionDto>;
    public getDecisionDefinitionByKeyAndTenantId(key: string, tenantId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DecisionDefinitionDto>>;
    public getDecisionDefinitionByKeyAndTenantId(key: string, tenantId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DecisionDefinitionDto>>;
    public getDecisionDefinitionByKeyAndTenantId(key: string, tenantId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling getDecisionDefinitionByKeyAndTenantId.');
        }

        if (tenantId === null || tenantId === undefined) {
            throw new Error('Required parameter tenantId was null or undefined when calling getDecisionDefinitionByKeyAndTenantId.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<DecisionDefinitionDto>('get',`${this.basePath}/decision-definition/key/${encodeURIComponent(String(key))}/tenant-id/${encodeURIComponent(String(tenantId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Diagram
     * Retrieves the diagram of a decision definition.
     * @param id The id of the process definition.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDecisionDefinitionDiagram(id: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public getDecisionDefinitionDiagram(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public getDecisionDefinitionDiagram(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public getDecisionDefinitionDiagram(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getDecisionDefinitionDiagram.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream',
            '*/*',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request('get',`${this.basePath}/decision-definition/${encodeURIComponent(String(id))}/diagram`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Diagram By Key
     * Returns the diagram for the latest version of the decision definition which belongs to no tenant
     * @param key The key of the decision definition (the latest version thereof) to be retrieved.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDecisionDefinitionDiagramByKey(key: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public getDecisionDefinitionDiagramByKey(key: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public getDecisionDefinitionDiagramByKey(key: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public getDecisionDefinitionDiagramByKey(key: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling getDecisionDefinitionDiagramByKey.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream',
            '*/*',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request('get',`${this.basePath}/decision-definition/key/${encodeURIComponent(String(key))}/diagram`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Diagram By Key And Tenant
     * Returns the XML of the latest version of the decision definition for tenant.
     * @param key The key of the decision definition (the latest version thereof) to be retrieved.
     * @param tenantId The id of the tenant the decision definition belongs to.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDecisionDefinitionDiagramByKeyAndTenant(key: string, tenantId: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public getDecisionDefinitionDiagramByKeyAndTenant(key: string, tenantId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public getDecisionDefinitionDiagramByKeyAndTenant(key: string, tenantId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public getDecisionDefinitionDiagramByKeyAndTenant(key: string, tenantId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling getDecisionDefinitionDiagramByKeyAndTenant.');
        }

        if (tenantId === null || tenantId === undefined) {
            throw new Error('Required parameter tenantId was null or undefined when calling getDecisionDefinitionDiagramByKeyAndTenant.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream',
            '*/*',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request('get',`${this.basePath}/decision-definition/key/${encodeURIComponent(String(key))}/tenant-id/${encodeURIComponent(String(tenantId))}/diagram`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get XML By Id
     * Retrieves the DMN XML of a decision definition.
     * @param id The id of the decision definition.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDecisionDefinitionDmnXmlById(id: string, observe?: 'body', reportProgress?: boolean): Observable<DecisionDefinitionDiagramDto>;
    public getDecisionDefinitionDmnXmlById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DecisionDefinitionDiagramDto>>;
    public getDecisionDefinitionDmnXmlById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DecisionDefinitionDiagramDto>>;
    public getDecisionDefinitionDmnXmlById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getDecisionDefinitionDmnXmlById.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<DecisionDefinitionDiagramDto>('get',`${this.basePath}/decision-definition/${encodeURIComponent(String(id))}/xml`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get XML By Key
     * Retrieves the XML for the latest version of the decision definition which belongs to no tenant.
     * @param key The key of the decision definition (the latest version thereof).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDecisionDefinitionDmnXmlByKey(key: string, observe?: 'body', reportProgress?: boolean): Observable<DecisionDefinitionDiagramDto>;
    public getDecisionDefinitionDmnXmlByKey(key: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DecisionDefinitionDiagramDto>>;
    public getDecisionDefinitionDmnXmlByKey(key: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DecisionDefinitionDiagramDto>>;
    public getDecisionDefinitionDmnXmlByKey(key: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling getDecisionDefinitionDmnXmlByKey.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<DecisionDefinitionDiagramDto>('get',`${this.basePath}/decision-definition/key/${encodeURIComponent(String(key))}/xml`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get XML By Key and Tenant
     * Retrieves the XML of the latest version of the decision definition for tenant
     * @param key The key of the decision definition (the latest version thereof).
     * @param tenantId The id of the tenant the decision definition belongs to.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDecisionDefinitionDmnXmlByKeyAndTenant(key: string, tenantId: string, observe?: 'body', reportProgress?: boolean): Observable<DecisionDefinitionDiagramDto>;
    public getDecisionDefinitionDmnXmlByKeyAndTenant(key: string, tenantId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DecisionDefinitionDiagramDto>>;
    public getDecisionDefinitionDmnXmlByKeyAndTenant(key: string, tenantId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DecisionDefinitionDiagramDto>>;
    public getDecisionDefinitionDmnXmlByKeyAndTenant(key: string, tenantId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling getDecisionDefinitionDmnXmlByKeyAndTenant.');
        }

        if (tenantId === null || tenantId === undefined) {
            throw new Error('Required parameter tenantId was null or undefined when calling getDecisionDefinitionDmnXmlByKeyAndTenant.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<DecisionDefinitionDiagramDto>('get',`${this.basePath}/decision-definition/key/${encodeURIComponent(String(key))}/tenant-id/${encodeURIComponent(String(tenantId))}/xml`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get List
     * Queries for decision definitions that fulfill given parameters. Parameters may be the properties of decision definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Decision Definition Count](https://docs.camunda.org/manual/7.19/reference/rest/decision-definition/get-query-count/) method.
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param firstResult Pagination of results. Specifies the index of the first result to return.
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param decisionDefinitionId Filter by decision definition id.
     * @param decisionDefinitionIdIn Filter by decision definition ids.
     * @param name Filter by decision definition name.
     * @param nameLike Filter by decision definition names that the parameter is a substring of.
     * @param deploymentId Filter by the deployment the id belongs to.
     * @param deployedAfter Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time.
     * @param deployedAt Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match).
     * @param key Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match.
     * @param keyLike Filter by decision definition keys that the parameter is a substring of.
     * @param category Filter by decision definition category. Exact match.
     * @param categoryLike Filter by decision definition categories that the parameter is a substring of.
     * @param version Filter by decision definition version.
     * @param latestVersion Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param resourceName Filter by the name of the decision definition resource. Exact match.
     * @param resourceNameLike Filter by names of those decision definition resources that the parameter is a substring of.
     * @param decisionRequirementsDefinitionId Filter by the id of the decision requirements definition this decision definition belongs to.
     * @param decisionRequirementsDefinitionKey Filter by the key of the decision requirements definition this decision definition belongs to.
     * @param withoutDecisionRequirementsDefinition Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param tenantIdIn Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids.
     * @param withoutTenantId Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param includeDecisionDefinitionsWithoutTenantId Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param versionTag Filter by the version tag.
     * @param versionTagLike Filter by the version tags of those decision definition resources that the parameter is a substring of.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDecisionDefinitions(sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, decisionDefinitionId?: string, decisionDefinitionIdIn?: string, name?: string, nameLike?: string, deploymentId?: string, deployedAfter?: Date, deployedAt?: Date, key?: string, keyLike?: string, category?: string, categoryLike?: string, version?: number, latestVersion?: boolean, resourceName?: string, resourceNameLike?: string, decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionKey?: string, withoutDecisionRequirementsDefinition?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeDecisionDefinitionsWithoutTenantId?: boolean, versionTag?: string, versionTagLike?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<DecisionDefinitionDto>>;
    public getDecisionDefinitions(sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, decisionDefinitionId?: string, decisionDefinitionIdIn?: string, name?: string, nameLike?: string, deploymentId?: string, deployedAfter?: Date, deployedAt?: Date, key?: string, keyLike?: string, category?: string, categoryLike?: string, version?: number, latestVersion?: boolean, resourceName?: string, resourceNameLike?: string, decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionKey?: string, withoutDecisionRequirementsDefinition?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeDecisionDefinitionsWithoutTenantId?: boolean, versionTag?: string, versionTagLike?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DecisionDefinitionDto>>>;
    public getDecisionDefinitions(sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, decisionDefinitionId?: string, decisionDefinitionIdIn?: string, name?: string, nameLike?: string, deploymentId?: string, deployedAfter?: Date, deployedAt?: Date, key?: string, keyLike?: string, category?: string, categoryLike?: string, version?: number, latestVersion?: boolean, resourceName?: string, resourceNameLike?: string, decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionKey?: string, withoutDecisionRequirementsDefinition?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeDecisionDefinitionsWithoutTenantId?: boolean, versionTag?: string, versionTagLike?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DecisionDefinitionDto>>>;
    public getDecisionDefinitions(sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, decisionDefinitionId?: string, decisionDefinitionIdIn?: string, name?: string, nameLike?: string, deploymentId?: string, deployedAfter?: Date, deployedAt?: Date, key?: string, keyLike?: string, category?: string, categoryLike?: string, version?: number, latestVersion?: boolean, resourceName?: string, resourceNameLike?: string, decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionKey?: string, withoutDecisionRequirementsDefinition?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeDecisionDefinitionsWithoutTenantId?: boolean, versionTag?: string, versionTagLike?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




























        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (sortOrder !== undefined && sortOrder !== null) {
            queryParameters = queryParameters.set('sortOrder', <any>sortOrder);
        }
        if (firstResult !== undefined && firstResult !== null) {
            queryParameters = queryParameters.set('firstResult', <any>firstResult);
        }
        if (maxResults !== undefined && maxResults !== null) {
            queryParameters = queryParameters.set('maxResults', <any>maxResults);
        }
        if (decisionDefinitionId !== undefined && decisionDefinitionId !== null) {
            queryParameters = queryParameters.set('decisionDefinitionId', <any>decisionDefinitionId);
        }
        if (decisionDefinitionIdIn !== undefined && decisionDefinitionIdIn !== null) {
            queryParameters = queryParameters.set('decisionDefinitionIdIn', <any>decisionDefinitionIdIn);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (nameLike !== undefined && nameLike !== null) {
            queryParameters = queryParameters.set('nameLike', <any>nameLike);
        }
        if (deploymentId !== undefined && deploymentId !== null) {
            queryParameters = queryParameters.set('deploymentId', <any>deploymentId);
        }
        if (deployedAfter !== undefined && deployedAfter !== null) {
            queryParameters = queryParameters.set('deployedAfter', <any>deployedAfter.toISOString());
        }
        if (deployedAt !== undefined && deployedAt !== null) {
            queryParameters = queryParameters.set('deployedAt', <any>deployedAt.toISOString());
        }
        if (key !== undefined && key !== null) {
            queryParameters = queryParameters.set('key', <any>key);
        }
        if (keyLike !== undefined && keyLike !== null) {
            queryParameters = queryParameters.set('keyLike', <any>keyLike);
        }
        if (category !== undefined && category !== null) {
            queryParameters = queryParameters.set('category', <any>category);
        }
        if (categoryLike !== undefined && categoryLike !== null) {
            queryParameters = queryParameters.set('categoryLike', <any>categoryLike);
        }
        if (version !== undefined && version !== null) {
            queryParameters = queryParameters.set('version', <any>version);
        }
        if (latestVersion !== undefined && latestVersion !== null) {
            queryParameters = queryParameters.set('latestVersion', <any>latestVersion);
        }
        if (resourceName !== undefined && resourceName !== null) {
            queryParameters = queryParameters.set('resourceName', <any>resourceName);
        }
        if (resourceNameLike !== undefined && resourceNameLike !== null) {
            queryParameters = queryParameters.set('resourceNameLike', <any>resourceNameLike);
        }
        if (decisionRequirementsDefinitionId !== undefined && decisionRequirementsDefinitionId !== null) {
            queryParameters = queryParameters.set('decisionRequirementsDefinitionId', <any>decisionRequirementsDefinitionId);
        }
        if (decisionRequirementsDefinitionKey !== undefined && decisionRequirementsDefinitionKey !== null) {
            queryParameters = queryParameters.set('decisionRequirementsDefinitionKey', <any>decisionRequirementsDefinitionKey);
        }
        if (withoutDecisionRequirementsDefinition !== undefined && withoutDecisionRequirementsDefinition !== null) {
            queryParameters = queryParameters.set('withoutDecisionRequirementsDefinition', <any>withoutDecisionRequirementsDefinition);
        }
        if (tenantIdIn !== undefined && tenantIdIn !== null) {
            queryParameters = queryParameters.set('tenantIdIn', <any>tenantIdIn);
        }
        if (withoutTenantId !== undefined && withoutTenantId !== null) {
            queryParameters = queryParameters.set('withoutTenantId', <any>withoutTenantId);
        }
        if (includeDecisionDefinitionsWithoutTenantId !== undefined && includeDecisionDefinitionsWithoutTenantId !== null) {
            queryParameters = queryParameters.set('includeDecisionDefinitionsWithoutTenantId', <any>includeDecisionDefinitionsWithoutTenantId);
        }
        if (versionTag !== undefined && versionTag !== null) {
            queryParameters = queryParameters.set('versionTag', <any>versionTag);
        }
        if (versionTagLike !== undefined && versionTagLike !== null) {
            queryParameters = queryParameters.set('versionTagLike', <any>versionTagLike);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<DecisionDefinitionDto>>('get',`${this.basePath}/decision-definition`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get List Count
     * Requests the number of decision definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Decision Definition](https://docs.camunda.org/manual/7.19/reference/rest/decision-definition/get-query/) method.
     * @param decisionDefinitionId Filter by decision definition id.
     * @param decisionDefinitionIdIn Filter by decision definition ids.
     * @param name Filter by decision definition name.
     * @param nameLike Filter by decision definition names that the parameter is a substring of.
     * @param deploymentId Filter by the deployment the id belongs to.
     * @param deployedAfter Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time.
     * @param deployedAt Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match).
     * @param key Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match.
     * @param keyLike Filter by decision definition keys that the parameter is a substring of.
     * @param category Filter by decision definition category. Exact match.
     * @param categoryLike Filter by decision definition categories that the parameter is a substring of.
     * @param version Filter by decision definition version.
     * @param latestVersion Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param resourceName Filter by the name of the decision definition resource. Exact match.
     * @param resourceNameLike Filter by names of those decision definition resources that the parameter is a substring of.
     * @param decisionRequirementsDefinitionId Filter by the id of the decision requirements definition this decision definition belongs to.
     * @param decisionRequirementsDefinitionKey Filter by the key of the decision requirements definition this decision definition belongs to.
     * @param withoutDecisionRequirementsDefinition Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param tenantIdIn Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids.
     * @param withoutTenantId Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param includeDecisionDefinitionsWithoutTenantId Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param versionTag Filter by the version tag.
     * @param versionTagLike Filter by the version tags of those decision definition resources that the parameter is a substring of.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDecisionDefinitionsCount(decisionDefinitionId?: string, decisionDefinitionIdIn?: string, name?: string, nameLike?: string, deploymentId?: string, deployedAfter?: Date, deployedAt?: Date, key?: string, keyLike?: string, category?: string, categoryLike?: string, version?: number, latestVersion?: boolean, resourceName?: string, resourceNameLike?: string, decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionKey?: string, withoutDecisionRequirementsDefinition?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeDecisionDefinitionsWithoutTenantId?: boolean, versionTag?: string, versionTagLike?: string, observe?: 'body', reportProgress?: boolean): Observable<CountResultDto>;
    public getDecisionDefinitionsCount(decisionDefinitionId?: string, decisionDefinitionIdIn?: string, name?: string, nameLike?: string, deploymentId?: string, deployedAfter?: Date, deployedAt?: Date, key?: string, keyLike?: string, category?: string, categoryLike?: string, version?: number, latestVersion?: boolean, resourceName?: string, resourceNameLike?: string, decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionKey?: string, withoutDecisionRequirementsDefinition?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeDecisionDefinitionsWithoutTenantId?: boolean, versionTag?: string, versionTagLike?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CountResultDto>>;
    public getDecisionDefinitionsCount(decisionDefinitionId?: string, decisionDefinitionIdIn?: string, name?: string, nameLike?: string, deploymentId?: string, deployedAfter?: Date, deployedAt?: Date, key?: string, keyLike?: string, category?: string, categoryLike?: string, version?: number, latestVersion?: boolean, resourceName?: string, resourceNameLike?: string, decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionKey?: string, withoutDecisionRequirementsDefinition?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeDecisionDefinitionsWithoutTenantId?: boolean, versionTag?: string, versionTagLike?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CountResultDto>>;
    public getDecisionDefinitionsCount(decisionDefinitionId?: string, decisionDefinitionIdIn?: string, name?: string, nameLike?: string, deploymentId?: string, deployedAfter?: Date, deployedAt?: Date, key?: string, keyLike?: string, category?: string, categoryLike?: string, version?: number, latestVersion?: boolean, resourceName?: string, resourceNameLike?: string, decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionKey?: string, withoutDecisionRequirementsDefinition?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeDecisionDefinitionsWithoutTenantId?: boolean, versionTag?: string, versionTagLike?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
























        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (decisionDefinitionId !== undefined && decisionDefinitionId !== null) {
            queryParameters = queryParameters.set('decisionDefinitionId', <any>decisionDefinitionId);
        }
        if (decisionDefinitionIdIn !== undefined && decisionDefinitionIdIn !== null) {
            queryParameters = queryParameters.set('decisionDefinitionIdIn', <any>decisionDefinitionIdIn);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (nameLike !== undefined && nameLike !== null) {
            queryParameters = queryParameters.set('nameLike', <any>nameLike);
        }
        if (deploymentId !== undefined && deploymentId !== null) {
            queryParameters = queryParameters.set('deploymentId', <any>deploymentId);
        }
        if (deployedAfter !== undefined && deployedAfter !== null) {
            queryParameters = queryParameters.set('deployedAfter', <any>deployedAfter.toISOString());
        }
        if (deployedAt !== undefined && deployedAt !== null) {
            queryParameters = queryParameters.set('deployedAt', <any>deployedAt.toISOString());
        }
        if (key !== undefined && key !== null) {
            queryParameters = queryParameters.set('key', <any>key);
        }
        if (keyLike !== undefined && keyLike !== null) {
            queryParameters = queryParameters.set('keyLike', <any>keyLike);
        }
        if (category !== undefined && category !== null) {
            queryParameters = queryParameters.set('category', <any>category);
        }
        if (categoryLike !== undefined && categoryLike !== null) {
            queryParameters = queryParameters.set('categoryLike', <any>categoryLike);
        }
        if (version !== undefined && version !== null) {
            queryParameters = queryParameters.set('version', <any>version);
        }
        if (latestVersion !== undefined && latestVersion !== null) {
            queryParameters = queryParameters.set('latestVersion', <any>latestVersion);
        }
        if (resourceName !== undefined && resourceName !== null) {
            queryParameters = queryParameters.set('resourceName', <any>resourceName);
        }
        if (resourceNameLike !== undefined && resourceNameLike !== null) {
            queryParameters = queryParameters.set('resourceNameLike', <any>resourceNameLike);
        }
        if (decisionRequirementsDefinitionId !== undefined && decisionRequirementsDefinitionId !== null) {
            queryParameters = queryParameters.set('decisionRequirementsDefinitionId', <any>decisionRequirementsDefinitionId);
        }
        if (decisionRequirementsDefinitionKey !== undefined && decisionRequirementsDefinitionKey !== null) {
            queryParameters = queryParameters.set('decisionRequirementsDefinitionKey', <any>decisionRequirementsDefinitionKey);
        }
        if (withoutDecisionRequirementsDefinition !== undefined && withoutDecisionRequirementsDefinition !== null) {
            queryParameters = queryParameters.set('withoutDecisionRequirementsDefinition', <any>withoutDecisionRequirementsDefinition);
        }
        if (tenantIdIn !== undefined && tenantIdIn !== null) {
            queryParameters = queryParameters.set('tenantIdIn', <any>tenantIdIn);
        }
        if (withoutTenantId !== undefined && withoutTenantId !== null) {
            queryParameters = queryParameters.set('withoutTenantId', <any>withoutTenantId);
        }
        if (includeDecisionDefinitionsWithoutTenantId !== undefined && includeDecisionDefinitionsWithoutTenantId !== null) {
            queryParameters = queryParameters.set('includeDecisionDefinitionsWithoutTenantId', <any>includeDecisionDefinitionsWithoutTenantId);
        }
        if (versionTag !== undefined && versionTag !== null) {
            queryParameters = queryParameters.set('versionTag', <any>versionTag);
        }
        if (versionTagLike !== undefined && versionTagLike !== null) {
            queryParameters = queryParameters.set('versionTagLike', <any>versionTagLike);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CountResultDto>('get',`${this.basePath}/decision-definition/count`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update History Time to Live
     * Updates history time to live for decision definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.19/user-guide/process-engine/history/#history-cleanup).
     * @param id The id of the decision definition to change history time to live.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateHistoryTimeToLiveByDecisionDefinitionId(id: string, body?: HistoryTimeToLiveDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateHistoryTimeToLiveByDecisionDefinitionId(id: string, body?: HistoryTimeToLiveDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateHistoryTimeToLiveByDecisionDefinitionId(id: string, body?: HistoryTimeToLiveDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateHistoryTimeToLiveByDecisionDefinitionId(id: string, body?: HistoryTimeToLiveDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateHistoryTimeToLiveByDecisionDefinitionId.');
        }


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/decision-definition/${encodeURIComponent(String(id))}/history-time-to-live`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update History Time to Live By Key
     * Updates the latest version of the decision definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.19/user-guide/process-engine/history/#history-cleanup).
     * @param key The key of the decision definitions to change history time to live.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateHistoryTimeToLiveByDecisionDefinitionKey(key: string, body?: HistoryTimeToLiveDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateHistoryTimeToLiveByDecisionDefinitionKey(key: string, body?: HistoryTimeToLiveDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateHistoryTimeToLiveByDecisionDefinitionKey(key: string, body?: HistoryTimeToLiveDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateHistoryTimeToLiveByDecisionDefinitionKey(key: string, body?: HistoryTimeToLiveDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling updateHistoryTimeToLiveByDecisionDefinitionKey.');
        }


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/decision-definition/key/${encodeURIComponent(String(key))}/history-time-to-live`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update History Time to Live By Key And Tenant
     * Updates the latest version of the decision definition for tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.19/user-guide/process-engine/history/#history-cleanup).
     * @param key The key of the decision definitions to change history time to live.
     * @param tenantId The id of the tenant the decision definition belongs to.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant(key: string, tenantId: string, body?: HistoryTimeToLiveDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant(key: string, tenantId: string, body?: HistoryTimeToLiveDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant(key: string, tenantId: string, body?: HistoryTimeToLiveDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant(key: string, tenantId: string, body?: HistoryTimeToLiveDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant.');
        }

        if (tenantId === null || tenantId === undefined) {
            throw new Error('Required parameter tenantId was null or undefined when calling updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant.');
        }


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/decision-definition/key/${encodeURIComponent(String(key))}/tenant-id/${encodeURIComponent(String(tenantId))}/history-time-to-live`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
