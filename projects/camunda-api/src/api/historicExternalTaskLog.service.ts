/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.19.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CountResultDto } from '../model/countResultDto';
import { ExceptionDto } from '../model/exceptionDto';
import { HistoricExternalTaskLogDto } from '../model/historicExternalTaskLogDto';
import { HistoricExternalTaskLogQueryDto } from '../model/historicExternalTaskLogQueryDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class HistoricExternalTaskLogService {

    protected basePath = 'http://{host}:{port}/{contextPath}';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get External Task Log Error Details
     * Retrieves the corresponding error details of the passed historic external task log by id.
     * @param id The id of the historic external task log to get the error details for.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getErrorDetailsHistoricExternalTaskLog(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getErrorDetailsHistoricExternalTaskLog(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getErrorDetailsHistoricExternalTaskLog(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getErrorDetailsHistoricExternalTaskLog(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getErrorDetailsHistoricExternalTaskLog.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/history/external-task-log/${encodeURIComponent(String(id))}/error-details`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get External Task Log
     * Retrieves a historic external task log by id.
     * @param id The id of the log entry.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHistoricExternalTaskLog(id: string, observe?: 'body', reportProgress?: boolean): Observable<HistoricExternalTaskLogDto>;
    public getHistoricExternalTaskLog(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HistoricExternalTaskLogDto>>;
    public getHistoricExternalTaskLog(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HistoricExternalTaskLogDto>>;
    public getHistoricExternalTaskLog(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getHistoricExternalTaskLog.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<HistoricExternalTaskLogDto>('get',`${this.basePath}/history/external-task-log/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get External Task Logs
     * Queries for historic external task logs that fulfill the given parameters. The size of the result set can be retrieved by using the [Get External Task Log Count](https://docs.camunda.org/manual/7.19/reference/rest/history/external-task-log/get-external-task-log-query-count/) method.
     * @param logId Filter by historic external task log id.
     * @param externalTaskId Filter by external task id.
     * @param topicName Filter by an external task topic.
     * @param workerId Filter by the id of the worker that the task was most recently locked by.
     * @param errorMessage Filter by external task exception message.
     * @param activityIdIn Only include historic external task logs which belong to one of the passed activity ids.
     * @param activityInstanceIdIn Only include historic external task logs which belong to one of the passed activity instance ids.
     * @param executionIdIn Only include historic external task logs which belong to one of the passed execution ids.
     * @param processInstanceId Filter by process instance id.
     * @param processDefinitionId Filter by process definition id.
     * @param processDefinitionKey Filter by process definition key.
     * @param tenantIdIn Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids.
     * @param withoutTenantId Only include historic external task log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param priorityLowerThanOrEquals Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
     * @param priorityHigherThanOrEquals Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
     * @param creationLog Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param failureLog Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param successLog Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param deletionLog Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param firstResult Pagination of results. Specifies the index of the first result to return.
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHistoricExternalTaskLogs(logId?: string, externalTaskId?: string, topicName?: string, workerId?: string, errorMessage?: string, activityIdIn?: string, activityInstanceIdIn?: string, executionIdIn?: string, processInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, tenantIdIn?: string, withoutTenantId?: boolean, priorityLowerThanOrEquals?: number, priorityHigherThanOrEquals?: number, creationLog?: boolean, failureLog?: boolean, successLog?: boolean, deletionLog?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<HistoricExternalTaskLogDto>>;
    public getHistoricExternalTaskLogs(logId?: string, externalTaskId?: string, topicName?: string, workerId?: string, errorMessage?: string, activityIdIn?: string, activityInstanceIdIn?: string, executionIdIn?: string, processInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, tenantIdIn?: string, withoutTenantId?: boolean, priorityLowerThanOrEquals?: number, priorityHigherThanOrEquals?: number, creationLog?: boolean, failureLog?: boolean, successLog?: boolean, deletionLog?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<HistoricExternalTaskLogDto>>>;
    public getHistoricExternalTaskLogs(logId?: string, externalTaskId?: string, topicName?: string, workerId?: string, errorMessage?: string, activityIdIn?: string, activityInstanceIdIn?: string, executionIdIn?: string, processInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, tenantIdIn?: string, withoutTenantId?: boolean, priorityLowerThanOrEquals?: number, priorityHigherThanOrEquals?: number, creationLog?: boolean, failureLog?: boolean, successLog?: boolean, deletionLog?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<HistoricExternalTaskLogDto>>>;
    public getHistoricExternalTaskLogs(logId?: string, externalTaskId?: string, topicName?: string, workerId?: string, errorMessage?: string, activityIdIn?: string, activityInstanceIdIn?: string, executionIdIn?: string, processInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, tenantIdIn?: string, withoutTenantId?: boolean, priorityLowerThanOrEquals?: number, priorityHigherThanOrEquals?: number, creationLog?: boolean, failureLog?: boolean, successLog?: boolean, deletionLog?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
























        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (logId !== undefined && logId !== null) {
            queryParameters = queryParameters.set('logId', <any>logId);
        }
        if (externalTaskId !== undefined && externalTaskId !== null) {
            queryParameters = queryParameters.set('externalTaskId', <any>externalTaskId);
        }
        if (topicName !== undefined && topicName !== null) {
            queryParameters = queryParameters.set('topicName', <any>topicName);
        }
        if (workerId !== undefined && workerId !== null) {
            queryParameters = queryParameters.set('workerId', <any>workerId);
        }
        if (errorMessage !== undefined && errorMessage !== null) {
            queryParameters = queryParameters.set('errorMessage', <any>errorMessage);
        }
        if (activityIdIn !== undefined && activityIdIn !== null) {
            queryParameters = queryParameters.set('activityIdIn', <any>activityIdIn);
        }
        if (activityInstanceIdIn !== undefined && activityInstanceIdIn !== null) {
            queryParameters = queryParameters.set('activityInstanceIdIn', <any>activityInstanceIdIn);
        }
        if (executionIdIn !== undefined && executionIdIn !== null) {
            queryParameters = queryParameters.set('executionIdIn', <any>executionIdIn);
        }
        if (processInstanceId !== undefined && processInstanceId !== null) {
            queryParameters = queryParameters.set('processInstanceId', <any>processInstanceId);
        }
        if (processDefinitionId !== undefined && processDefinitionId !== null) {
            queryParameters = queryParameters.set('processDefinitionId', <any>processDefinitionId);
        }
        if (processDefinitionKey !== undefined && processDefinitionKey !== null) {
            queryParameters = queryParameters.set('processDefinitionKey', <any>processDefinitionKey);
        }
        if (tenantIdIn !== undefined && tenantIdIn !== null) {
            queryParameters = queryParameters.set('tenantIdIn', <any>tenantIdIn);
        }
        if (withoutTenantId !== undefined && withoutTenantId !== null) {
            queryParameters = queryParameters.set('withoutTenantId', <any>withoutTenantId);
        }
        if (priorityLowerThanOrEquals !== undefined && priorityLowerThanOrEquals !== null) {
            queryParameters = queryParameters.set('priorityLowerThanOrEquals', <any>priorityLowerThanOrEquals);
        }
        if (priorityHigherThanOrEquals !== undefined && priorityHigherThanOrEquals !== null) {
            queryParameters = queryParameters.set('priorityHigherThanOrEquals', <any>priorityHigherThanOrEquals);
        }
        if (creationLog !== undefined && creationLog !== null) {
            queryParameters = queryParameters.set('creationLog', <any>creationLog);
        }
        if (failureLog !== undefined && failureLog !== null) {
            queryParameters = queryParameters.set('failureLog', <any>failureLog);
        }
        if (successLog !== undefined && successLog !== null) {
            queryParameters = queryParameters.set('successLog', <any>successLog);
        }
        if (deletionLog !== undefined && deletionLog !== null) {
            queryParameters = queryParameters.set('deletionLog', <any>deletionLog);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (sortOrder !== undefined && sortOrder !== null) {
            queryParameters = queryParameters.set('sortOrder', <any>sortOrder);
        }
        if (firstResult !== undefined && firstResult !== null) {
            queryParameters = queryParameters.set('firstResult', <any>firstResult);
        }
        if (maxResults !== undefined && maxResults !== null) {
            queryParameters = queryParameters.set('maxResults', <any>maxResults);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<HistoricExternalTaskLogDto>>('get',`${this.basePath}/history/external-task-log`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get External Task Log Count
     * Queries for the number of historic external task logs that fulfill the given parameters. Takes the same parameters as the [Get External Task Logs](https://docs.camunda.org/manual/7.19/reference/rest/history/external-task-log/get-external-task-log-query/) method.
     * @param logId Filter by historic external task log id.
     * @param externalTaskId Filter by external task id.
     * @param topicName Filter by an external task topic.
     * @param workerId Filter by the id of the worker that the task was most recently locked by.
     * @param errorMessage Filter by external task exception message.
     * @param activityIdIn Only include historic external task logs which belong to one of the passed activity ids.
     * @param activityInstanceIdIn Only include historic external task logs which belong to one of the passed activity instance ids.
     * @param executionIdIn Only include historic external task logs which belong to one of the passed execution ids.
     * @param processInstanceId Filter by process instance id.
     * @param processDefinitionId Filter by process definition id.
     * @param processDefinitionKey Filter by process definition key.
     * @param tenantIdIn Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids.
     * @param withoutTenantId Only include historic external task log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param priorityLowerThanOrEquals Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
     * @param priorityHigherThanOrEquals Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
     * @param creationLog Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param failureLog Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param successLog Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param deletionLog Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHistoricExternalTaskLogsCount(logId?: string, externalTaskId?: string, topicName?: string, workerId?: string, errorMessage?: string, activityIdIn?: string, activityInstanceIdIn?: string, executionIdIn?: string, processInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, tenantIdIn?: string, withoutTenantId?: boolean, priorityLowerThanOrEquals?: number, priorityHigherThanOrEquals?: number, creationLog?: boolean, failureLog?: boolean, successLog?: boolean, deletionLog?: boolean, observe?: 'body', reportProgress?: boolean): Observable<CountResultDto>;
    public getHistoricExternalTaskLogsCount(logId?: string, externalTaskId?: string, topicName?: string, workerId?: string, errorMessage?: string, activityIdIn?: string, activityInstanceIdIn?: string, executionIdIn?: string, processInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, tenantIdIn?: string, withoutTenantId?: boolean, priorityLowerThanOrEquals?: number, priorityHigherThanOrEquals?: number, creationLog?: boolean, failureLog?: boolean, successLog?: boolean, deletionLog?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CountResultDto>>;
    public getHistoricExternalTaskLogsCount(logId?: string, externalTaskId?: string, topicName?: string, workerId?: string, errorMessage?: string, activityIdIn?: string, activityInstanceIdIn?: string, executionIdIn?: string, processInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, tenantIdIn?: string, withoutTenantId?: boolean, priorityLowerThanOrEquals?: number, priorityHigherThanOrEquals?: number, creationLog?: boolean, failureLog?: boolean, successLog?: boolean, deletionLog?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CountResultDto>>;
    public getHistoricExternalTaskLogsCount(logId?: string, externalTaskId?: string, topicName?: string, workerId?: string, errorMessage?: string, activityIdIn?: string, activityInstanceIdIn?: string, executionIdIn?: string, processInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, tenantIdIn?: string, withoutTenantId?: boolean, priorityLowerThanOrEquals?: number, priorityHigherThanOrEquals?: number, creationLog?: boolean, failureLog?: boolean, successLog?: boolean, deletionLog?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




















        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (logId !== undefined && logId !== null) {
            queryParameters = queryParameters.set('logId', <any>logId);
        }
        if (externalTaskId !== undefined && externalTaskId !== null) {
            queryParameters = queryParameters.set('externalTaskId', <any>externalTaskId);
        }
        if (topicName !== undefined && topicName !== null) {
            queryParameters = queryParameters.set('topicName', <any>topicName);
        }
        if (workerId !== undefined && workerId !== null) {
            queryParameters = queryParameters.set('workerId', <any>workerId);
        }
        if (errorMessage !== undefined && errorMessage !== null) {
            queryParameters = queryParameters.set('errorMessage', <any>errorMessage);
        }
        if (activityIdIn !== undefined && activityIdIn !== null) {
            queryParameters = queryParameters.set('activityIdIn', <any>activityIdIn);
        }
        if (activityInstanceIdIn !== undefined && activityInstanceIdIn !== null) {
            queryParameters = queryParameters.set('activityInstanceIdIn', <any>activityInstanceIdIn);
        }
        if (executionIdIn !== undefined && executionIdIn !== null) {
            queryParameters = queryParameters.set('executionIdIn', <any>executionIdIn);
        }
        if (processInstanceId !== undefined && processInstanceId !== null) {
            queryParameters = queryParameters.set('processInstanceId', <any>processInstanceId);
        }
        if (processDefinitionId !== undefined && processDefinitionId !== null) {
            queryParameters = queryParameters.set('processDefinitionId', <any>processDefinitionId);
        }
        if (processDefinitionKey !== undefined && processDefinitionKey !== null) {
            queryParameters = queryParameters.set('processDefinitionKey', <any>processDefinitionKey);
        }
        if (tenantIdIn !== undefined && tenantIdIn !== null) {
            queryParameters = queryParameters.set('tenantIdIn', <any>tenantIdIn);
        }
        if (withoutTenantId !== undefined && withoutTenantId !== null) {
            queryParameters = queryParameters.set('withoutTenantId', <any>withoutTenantId);
        }
        if (priorityLowerThanOrEquals !== undefined && priorityLowerThanOrEquals !== null) {
            queryParameters = queryParameters.set('priorityLowerThanOrEquals', <any>priorityLowerThanOrEquals);
        }
        if (priorityHigherThanOrEquals !== undefined && priorityHigherThanOrEquals !== null) {
            queryParameters = queryParameters.set('priorityHigherThanOrEquals', <any>priorityHigherThanOrEquals);
        }
        if (creationLog !== undefined && creationLog !== null) {
            queryParameters = queryParameters.set('creationLog', <any>creationLog);
        }
        if (failureLog !== undefined && failureLog !== null) {
            queryParameters = queryParameters.set('failureLog', <any>failureLog);
        }
        if (successLog !== undefined && successLog !== null) {
            queryParameters = queryParameters.set('successLog', <any>successLog);
        }
        if (deletionLog !== undefined && deletionLog !== null) {
            queryParameters = queryParameters.set('deletionLog', <any>deletionLog);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CountResultDto>('get',`${this.basePath}/history/external-task-log/count`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get External Task Logs (POST)
     * Queries for historic external task logs that fulfill the given parameters. This method is slightly more powerful than the [Get External Task Logs](https://docs.camunda.org/manual/7.19/reference/rest/history/external-task-log/get-external-task-log-query/) method because it allows filtering by historic external task logs values of the different types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public queryHistoricExternalTaskLogs(body?: HistoricExternalTaskLogQueryDto, observe?: 'body', reportProgress?: boolean): Observable<Array<HistoricExternalTaskLogDto>>;
    public queryHistoricExternalTaskLogs(body?: HistoricExternalTaskLogQueryDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<HistoricExternalTaskLogDto>>>;
    public queryHistoricExternalTaskLogs(body?: HistoricExternalTaskLogQueryDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<HistoricExternalTaskLogDto>>>;
    public queryHistoricExternalTaskLogs(body?: HistoricExternalTaskLogQueryDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<HistoricExternalTaskLogDto>>('post',`${this.basePath}/history/external-task-log`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get External Task Log Count (POST)
     * Queries for the number of historic external task logs that fulfill the given parameters. This method takes the same message body as the [Get External Task Logs (POST)](https://docs.camunda.org/manual/7.19/reference/rest/history/external-task-log/post-external-task-log-query/) method and therefore it is slightly more powerful than the [Get External Task Log Count](https://docs.camunda.org/manual/7.19/reference/rest/history/external-task-log/get-external-task-log-query-count/) method.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public queryHistoricExternalTaskLogsCount(body?: HistoricExternalTaskLogQueryDto, observe?: 'body', reportProgress?: boolean): Observable<CountResultDto>;
    public queryHistoricExternalTaskLogsCount(body?: HistoricExternalTaskLogQueryDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CountResultDto>>;
    public queryHistoricExternalTaskLogsCount(body?: HistoricExternalTaskLogQueryDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CountResultDto>>;
    public queryHistoricExternalTaskLogsCount(body?: HistoricExternalTaskLogQueryDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CountResultDto>('post',`${this.basePath}/history/external-task-log/count`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
