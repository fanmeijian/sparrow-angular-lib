/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.19.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AuthorizationExceptionDto } from '../model/authorizationExceptionDto';
import { CompleteTaskDto } from '../model/completeTaskDto';
import { CountResultDto } from '../model/countResultDto';
import { ExceptionDto } from '../model/exceptionDto';
import { FormDto } from '../model/formDto';
import { TaskBpmnErrorDto } from '../model/taskBpmnErrorDto';
import { TaskCountByCandidateGroupResultDto } from '../model/taskCountByCandidateGroupResultDto';
import { TaskDto } from '../model/taskDto';
import { TaskEscalationDto } from '../model/taskEscalationDto';
import { TaskQueryDto } from '../model/taskQueryDto';
import { UserIdDto } from '../model/userIdDto';
import { VariableValueDto } from '../model/variableValueDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TaskService {

    protected basePath = 'http://{host}:{port}/{contextPath}';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Claim
     * Claims a task for a specific user.  **Note:** The difference with the [Set Assignee](https://docs.camunda.org/manual/7.19/reference/rest/task/post-assignee/) method is that here a check is performed to see if the task already has a user assigned to it.
     * @param id The id of the task to claim.
     * @param body Provide the id of the user that claims the task.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public claim(id: string, body?: UserIdDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public claim(id: string, body?: UserIdDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public claim(id: string, body?: UserIdDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public claim(id: string, body?: UserIdDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling claim.');
        }


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/task/${encodeURIComponent(String(id))}/claim`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Complete
     * Completes a task and updates process variables.
     * @param id The id of the task to complete.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public complete(id: string, body?: CompleteTaskDto, observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: VariableValueDto; }>;
    public complete(id: string, body?: CompleteTaskDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: VariableValueDto; }>>;
    public complete(id: string, body?: CompleteTaskDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: VariableValueDto; }>>;
    public complete(id: string, body?: CompleteTaskDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling complete.');
        }


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<{ [key: string]: VariableValueDto; }>('post',`${this.basePath}/task/${encodeURIComponent(String(id))}/complete`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create
     * Creates a new task.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createTask(body?: TaskDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createTask(body?: TaskDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createTask(body?: TaskDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createTask(body?: TaskDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/task/create`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delegate
     * Delegates a task to another user.
     * @param id The id of the task to delegate.
     * @param body Provide the id of the user that the task should be delegated to.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public delegateTask(id: string, body?: UserIdDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public delegateTask(id: string, body?: UserIdDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public delegateTask(id: string, body?: UserIdDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public delegateTask(id: string, body?: UserIdDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling delegateTask.');
        }


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/task/${encodeURIComponent(String(id))}/delegate`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete
     * Removes a task by id.
     * @param id The id of the task to be removed.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteTask(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteTask(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteTask(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteTask(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteTask.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/task/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Deployed Form
     * Retrieves the deployed form that is referenced from a given task. For further information please refer to the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/task-forms/#embedded-task-forms).
     * @param id The id of the task to get the deployed form for.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDeployedForm(id: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public getDeployedForm(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public getDeployedForm(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public getDeployedForm(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getDeployedForm.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xhtml+xml',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request('get',`${this.basePath}/task/${encodeURIComponent(String(id))}/deployed-form`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Form Key
     * Retrieves the form key for a task. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine. This key can be used to do task-specific form rendering in client applications. Additionally, the context path of the containing process application is returned.
     * @param id The id of the task to retrieve the form for.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getForm(id: string, observe?: 'body', reportProgress?: boolean): Observable<FormDto>;
    public getForm(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FormDto>>;
    public getForm(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FormDto>>;
    public getForm(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getForm.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<FormDto>('get',`${this.basePath}/task/${encodeURIComponent(String(id))}/form`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Task Form Variables
     * Retrieves the form variables for a task. The form variables take form data specified on the task into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
     * @param id The id of the task to retrieve the variables for.
     * @param variableNames A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored.
     * @param deserializeValues Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFormVariables(id: string, variableNames?: string, deserializeValues?: boolean, observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: VariableValueDto; }>;
    public getFormVariables(id: string, variableNames?: string, deserializeValues?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: VariableValueDto; }>>;
    public getFormVariables(id: string, variableNames?: string, deserializeValues?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: VariableValueDto; }>>;
    public getFormVariables(id: string, variableNames?: string, deserializeValues?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getFormVariables.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (variableNames !== undefined && variableNames !== null) {
            queryParameters = queryParameters.set('variableNames', <any>variableNames);
        }
        if (deserializeValues !== undefined && deserializeValues !== null) {
            queryParameters = queryParameters.set('deserializeValues', <any>deserializeValues);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<{ [key: string]: VariableValueDto; }>('get',`${this.basePath}/task/${encodeURIComponent(String(id))}/form-variables`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Rendered Form
     * Retrieves the rendered form for a task. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.19/user-guide/task-forms/#generated-task-forms).
     * @param id The id of the task to get the rendered form for.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRenderedForm(id: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public getRenderedForm(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public getRenderedForm(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public getRenderedForm(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getRenderedForm.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xhtml+xml',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request('get',`${this.basePath}/task/${encodeURIComponent(String(id))}/rendered-form`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get
     * Retrieves a task by id.
     * @param id The id of the task to be retrieved.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTask(id: string, observe?: 'body', reportProgress?: boolean): Observable<TaskDto>;
    public getTask(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TaskDto>>;
    public getTask(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TaskDto>>;
    public getTask(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getTask.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<TaskDto>('get',`${this.basePath}/task/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Task Count By Candidate Group
     * Retrieves the number of tasks for each candidate group.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTaskCountByCandidateGroup(observe?: 'body', reportProgress?: boolean): Observable<Array<TaskCountByCandidateGroupResultDto>>;
    public getTaskCountByCandidateGroup(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TaskCountByCandidateGroupResultDto>>>;
    public getTaskCountByCandidateGroup(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TaskCountByCandidateGroupResultDto>>>;
    public getTaskCountByCandidateGroup(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/csv',
            'text/csv'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<TaskCountByCandidateGroupResultDto>>('get',`${this.basePath}/task/report/candidate-group-count`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get List
     * Queries for tasks that fulfill a given filter. The size of the result set can be retrieved by using the Get Task Count method.  **Security Consideration:** There are several query parameters (such as assigneeExpression) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations](https://docs.camunda.org/manual/7.19/user-guide/process-engine/securing-custom-code/) for custom code in the user guide for details.
     * @param taskId Restrict to task with the given id.
     * @param taskIdIn Restrict to tasks with any of the given ids.
     * @param processInstanceId Restrict to tasks that belong to process instances with the given id.
     * @param processInstanceIdIn Restrict to tasks that belong to process instances with the given ids.
     * @param processInstanceBusinessKey Restrict to tasks that belong to process instances with the given business key.
     * @param processInstanceBusinessKeyExpression Restrict to tasks that belong to process instances with the given business key which  is described by an expression. See the  [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions.
     * @param processInstanceBusinessKeyIn Restrict to tasks that belong to process instances with one of the give business keys.  The keys need to be in a comma-separated list.
     * @param processInstanceBusinessKeyLike Restrict to tasks that have a process instance business key that has the parameter  value as a substring.
     * @param processInstanceBusinessKeyLikeExpression Restrict to tasks that have a process instance business key that has the parameter  value as a substring and is described by an expression. See the [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param processDefinitionId Restrict to tasks that belong to a process definition with the given id.
     * @param processDefinitionKey Restrict to tasks that belong to a process definition with the given key.
     * @param processDefinitionKeyIn Restrict to tasks that belong to a process definition with one of the given keys. The  keys need to be in a comma-separated list.
     * @param processDefinitionName Restrict to tasks that belong to a process definition with the given name.
     * @param processDefinitionNameLike Restrict to tasks that have a process definition name that has the parameter value as  a substring.
     * @param executionId Restrict to tasks that belong to an execution with the given id.
     * @param caseInstanceId Restrict to tasks that belong to case instances with the given id.
     * @param caseInstanceBusinessKey Restrict to tasks that belong to case instances with the given business key.
     * @param caseInstanceBusinessKeyLike Restrict to tasks that have a case instance business key that has the parameter value  as a substring.
     * @param caseDefinitionId Restrict to tasks that belong to a case definition with the given id.
     * @param caseDefinitionKey Restrict to tasks that belong to a case definition with the given key.
     * @param caseDefinitionName Restrict to tasks that belong to a case definition with the given name.
     * @param caseDefinitionNameLike Restrict to tasks that have a case definition name that has the parameter value as a  substring.
     * @param caseExecutionId Restrict to tasks that belong to a case execution with the given id.
     * @param activityInstanceIdIn Only include tasks which belong to one of the passed and comma-separated activity  instance ids.
     * @param tenantIdIn Only include tasks which belong to one of the passed and comma-separated  tenant ids.
     * @param withoutTenantId Only include tasks which belong to no tenant. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior.
     * @param assignee Restrict to tasks that the given user is assigned to.
     * @param assigneeExpression Restrict to tasks that the user described by the given expression is assigned to.  See the  [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param assigneeLike Restrict to tasks that have an assignee that has the parameter  value as a substring.
     * @param assigneeLikeExpression Restrict to tasks that have an assignee that has the parameter value described by the  given expression as a substring. See the  [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param assigneeIn Only include tasks which are assigned to one of the passed and  comma-separated user ids.
     * @param assigneeNotIn Only include tasks which are not assigned to one of the passed and comma-separated user ids.
     * @param owner Restrict to tasks that the given user owns.
     * @param ownerExpression Restrict to tasks that the user described by the given expression owns. See the  [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param candidateGroup Only include tasks that are offered to the given group.
     * @param candidateGroupExpression Only include tasks that are offered to the group described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param candidateUser Only include tasks that are offered to the given user or to one of his groups.
     * @param candidateUserExpression Only include tasks that are offered to the user described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param includeAssignedTasks Also include tasks that are assigned to users in candidate queries. Default is to only  include tasks that are not assigned to any user if you query by candidate user or group(s).
     * @param involvedUser Only include tasks that the given user is involved in. A user is involved in a task if  an identity link exists between task and user (e.g., the user is the assignee).
     * @param involvedUserExpression Only include tasks that the user described by the given expression is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee). See the [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions.
     * @param assigned If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned.
     * @param unassigned If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned.
     * @param taskDefinitionKey Restrict to tasks that have the given key.
     * @param taskDefinitionKeyIn Restrict to tasks that have one of the given keys. The keys need to be in a comma-separated list.
     * @param taskDefinitionKeyLike Restrict to tasks that have a key that has the parameter value as a substring.
     * @param name Restrict to tasks that have the given name.
     * @param nameNotEqual Restrict to tasks that do not have the given name.
     * @param nameLike Restrict to tasks that have a name with the given parameter value as substring.
     * @param nameNotLike Restrict to tasks that do not have a name with the given parameter value as substring.
     * @param description Restrict to tasks that have the given description.
     * @param descriptionLike Restrict to tasks that have a description that has the parameter value as a substring.
     * @param priority Restrict to tasks that have the given priority.
     * @param maxPriority Restrict to tasks that have a lower or equal priority.
     * @param minPriority Restrict to tasks that have a higher or equal priority.
     * @param dueDate Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;.
     * @param dueDateExpression Restrict to tasks that are due on the date described by the given expression. See the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object.
     * @param dueAfter Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.435+0200&#x60;.
     * @param dueAfterExpression Restrict to tasks that are due after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object.
     * @param dueBefore Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.243+0200&#x60;.
     * @param dueBeforeExpression Restrict to tasks that are due before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object.
     * @param withoutDueDate Only include tasks which have no due date. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior.
     * @param followUpDate Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;.
     * @param followUpDateExpression Restrict to tasks that have a followUp date on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object.
     * @param followUpAfter Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.542+0200&#x60;.
     * @param followUpAfterExpression Restrict to tasks that have a followUp date after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object.
     * @param followUpBefore Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.234+0200&#x60;.
     * @param followUpBeforeExpression Restrict to tasks that have a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object.
     * @param followUpBeforeOrNotExistent Restrict to tasks that have no followUp date or a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.432+0200&#x60;. The typical use case is to query all &#x60;active&#x60; tasks for a user for a given date.
     * @param followUpBeforeOrNotExistentExpression Restrict to tasks that have no followUp date or a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object.
     * @param createdOn Restrict to tasks that were created on the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.324+0200&#x60;.
     * @param createdOnExpression Restrict to tasks that were created on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object.
     * @param createdAfter Restrict to tasks that were created after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;.
     * @param createdAfterExpression Restrict to tasks that were created after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object.
     * @param createdBefore Restrict to tasks that were created before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.332+0200&#x60;.
     * @param createdBeforeExpression Restrict to tasks that were created before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object.
     * @param updatedAfter Restrict to tasks that were updated after the given date. Every action that fires  a [task update event](https://docs.camunda.org/manual/7.19/user-guide/process-engine/delegation-code/#task-listener-event-lifecycle) is considered as updating the task. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.332+0200&#x60;.
     * @param updatedAfterExpression Restrict to tasks that were updated after the date described by the given expression. Every action that fires  a [task update event](https://docs.camunda.org/manual/7.19/user-guide/process-engine/delegation-code/#task-listener-event-lifecycle) is considered as updating the task. See the [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object.
     * @param delegationState Restrict to tasks that are in the given delegation state. Valid values are &#x60;PENDING&#x60; and &#x60;RESOLVED&#x60;.
     * @param candidateGroups Restrict to tasks that are offered to any of the given candidate groups. Takes a comma-separated list of group names, so for example &#x60;developers,support,sales&#x60;.
     * @param candidateGroupsExpression Restrict to tasks that are offered to any of the candidate groups described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to &#x60;java.util.List&#x60; of Strings.
     * @param withCandidateGroups Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param withoutCandidateGroups Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param withCandidateUsers Only include tasks which have a candidate user. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param withoutCandidateUsers Only include tasks which have no candidate users. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param active Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param suspended Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param taskVariables Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
     * @param processVariables Only include tasks that belong to process instances that have variables with certain  values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;; &#x60;notLike&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
     * @param caseInstanceVariables Only include tasks that belong to case instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
     * @param variableNamesIgnoreCase Match all variable names in this query case-insensitively. If set &#x60;variableName&#x60; and &#x60;variablename&#x60; are treated as equal.
     * @param variableValuesIgnoreCase Match all variable values in this query case-insensitively. If set &#x60;variableValue&#x60; and &#x60;variablevalue&#x60; are treated as equal.
     * @param parentTaskId Restrict query to all tasks that are sub tasks of the given task. Takes a task id.
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param firstResult Pagination of results. Specifies the index of the first result to return.
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTasks(taskId?: string, taskIdIn?: string, processInstanceId?: string, processInstanceIdIn?: string, processInstanceBusinessKey?: string, processInstanceBusinessKeyExpression?: string, processInstanceBusinessKeyIn?: string, processInstanceBusinessKeyLike?: string, processInstanceBusinessKeyLikeExpression?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionKeyIn?: string, processDefinitionName?: string, processDefinitionNameLike?: string, executionId?: string, caseInstanceId?: string, caseInstanceBusinessKey?: string, caseInstanceBusinessKeyLike?: string, caseDefinitionId?: string, caseDefinitionKey?: string, caseDefinitionName?: string, caseDefinitionNameLike?: string, caseExecutionId?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, assignee?: string, assigneeExpression?: string, assigneeLike?: string, assigneeLikeExpression?: string, assigneeIn?: string, assigneeNotIn?: string, owner?: string, ownerExpression?: string, candidateGroup?: string, candidateGroupExpression?: string, candidateUser?: string, candidateUserExpression?: string, includeAssignedTasks?: boolean, involvedUser?: string, involvedUserExpression?: string, assigned?: boolean, unassigned?: boolean, taskDefinitionKey?: string, taskDefinitionKeyIn?: string, taskDefinitionKeyLike?: string, name?: string, nameNotEqual?: string, nameLike?: string, nameNotLike?: string, description?: string, descriptionLike?: string, priority?: number, maxPriority?: number, minPriority?: number, dueDate?: string, dueDateExpression?: string, dueAfter?: string, dueAfterExpression?: string, dueBefore?: string, dueBeforeExpression?: string, withoutDueDate?: boolean, followUpDate?: string, followUpDateExpression?: string, followUpAfter?: string, followUpAfterExpression?: string, followUpBefore?: string, followUpBeforeExpression?: string, followUpBeforeOrNotExistent?: string, followUpBeforeOrNotExistentExpression?: string, createdOn?: string, createdOnExpression?: string, createdAfter?: string, createdAfterExpression?: string, createdBefore?: string, createdBeforeExpression?: string, updatedAfter?: string, updatedAfterExpression?: string, delegationState?: string, candidateGroups?: string, candidateGroupsExpression?: string, withCandidateGroups?: boolean, withoutCandidateGroups?: boolean, withCandidateUsers?: boolean, withoutCandidateUsers?: boolean, active?: boolean, suspended?: boolean, taskVariables?: string, processVariables?: string, caseInstanceVariables?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, parentTaskId?: string, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TaskDto>>;
    public getTasks(taskId?: string, taskIdIn?: string, processInstanceId?: string, processInstanceIdIn?: string, processInstanceBusinessKey?: string, processInstanceBusinessKeyExpression?: string, processInstanceBusinessKeyIn?: string, processInstanceBusinessKeyLike?: string, processInstanceBusinessKeyLikeExpression?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionKeyIn?: string, processDefinitionName?: string, processDefinitionNameLike?: string, executionId?: string, caseInstanceId?: string, caseInstanceBusinessKey?: string, caseInstanceBusinessKeyLike?: string, caseDefinitionId?: string, caseDefinitionKey?: string, caseDefinitionName?: string, caseDefinitionNameLike?: string, caseExecutionId?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, assignee?: string, assigneeExpression?: string, assigneeLike?: string, assigneeLikeExpression?: string, assigneeIn?: string, assigneeNotIn?: string, owner?: string, ownerExpression?: string, candidateGroup?: string, candidateGroupExpression?: string, candidateUser?: string, candidateUserExpression?: string, includeAssignedTasks?: boolean, involvedUser?: string, involvedUserExpression?: string, assigned?: boolean, unassigned?: boolean, taskDefinitionKey?: string, taskDefinitionKeyIn?: string, taskDefinitionKeyLike?: string, name?: string, nameNotEqual?: string, nameLike?: string, nameNotLike?: string, description?: string, descriptionLike?: string, priority?: number, maxPriority?: number, minPriority?: number, dueDate?: string, dueDateExpression?: string, dueAfter?: string, dueAfterExpression?: string, dueBefore?: string, dueBeforeExpression?: string, withoutDueDate?: boolean, followUpDate?: string, followUpDateExpression?: string, followUpAfter?: string, followUpAfterExpression?: string, followUpBefore?: string, followUpBeforeExpression?: string, followUpBeforeOrNotExistent?: string, followUpBeforeOrNotExistentExpression?: string, createdOn?: string, createdOnExpression?: string, createdAfter?: string, createdAfterExpression?: string, createdBefore?: string, createdBeforeExpression?: string, updatedAfter?: string, updatedAfterExpression?: string, delegationState?: string, candidateGroups?: string, candidateGroupsExpression?: string, withCandidateGroups?: boolean, withoutCandidateGroups?: boolean, withCandidateUsers?: boolean, withoutCandidateUsers?: boolean, active?: boolean, suspended?: boolean, taskVariables?: string, processVariables?: string, caseInstanceVariables?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, parentTaskId?: string, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TaskDto>>>;
    public getTasks(taskId?: string, taskIdIn?: string, processInstanceId?: string, processInstanceIdIn?: string, processInstanceBusinessKey?: string, processInstanceBusinessKeyExpression?: string, processInstanceBusinessKeyIn?: string, processInstanceBusinessKeyLike?: string, processInstanceBusinessKeyLikeExpression?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionKeyIn?: string, processDefinitionName?: string, processDefinitionNameLike?: string, executionId?: string, caseInstanceId?: string, caseInstanceBusinessKey?: string, caseInstanceBusinessKeyLike?: string, caseDefinitionId?: string, caseDefinitionKey?: string, caseDefinitionName?: string, caseDefinitionNameLike?: string, caseExecutionId?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, assignee?: string, assigneeExpression?: string, assigneeLike?: string, assigneeLikeExpression?: string, assigneeIn?: string, assigneeNotIn?: string, owner?: string, ownerExpression?: string, candidateGroup?: string, candidateGroupExpression?: string, candidateUser?: string, candidateUserExpression?: string, includeAssignedTasks?: boolean, involvedUser?: string, involvedUserExpression?: string, assigned?: boolean, unassigned?: boolean, taskDefinitionKey?: string, taskDefinitionKeyIn?: string, taskDefinitionKeyLike?: string, name?: string, nameNotEqual?: string, nameLike?: string, nameNotLike?: string, description?: string, descriptionLike?: string, priority?: number, maxPriority?: number, minPriority?: number, dueDate?: string, dueDateExpression?: string, dueAfter?: string, dueAfterExpression?: string, dueBefore?: string, dueBeforeExpression?: string, withoutDueDate?: boolean, followUpDate?: string, followUpDateExpression?: string, followUpAfter?: string, followUpAfterExpression?: string, followUpBefore?: string, followUpBeforeExpression?: string, followUpBeforeOrNotExistent?: string, followUpBeforeOrNotExistentExpression?: string, createdOn?: string, createdOnExpression?: string, createdAfter?: string, createdAfterExpression?: string, createdBefore?: string, createdBeforeExpression?: string, updatedAfter?: string, updatedAfterExpression?: string, delegationState?: string, candidateGroups?: string, candidateGroupsExpression?: string, withCandidateGroups?: boolean, withoutCandidateGroups?: boolean, withCandidateUsers?: boolean, withoutCandidateUsers?: boolean, active?: boolean, suspended?: boolean, taskVariables?: string, processVariables?: string, caseInstanceVariables?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, parentTaskId?: string, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TaskDto>>>;
    public getTasks(taskId?: string, taskIdIn?: string, processInstanceId?: string, processInstanceIdIn?: string, processInstanceBusinessKey?: string, processInstanceBusinessKeyExpression?: string, processInstanceBusinessKeyIn?: string, processInstanceBusinessKeyLike?: string, processInstanceBusinessKeyLikeExpression?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionKeyIn?: string, processDefinitionName?: string, processDefinitionNameLike?: string, executionId?: string, caseInstanceId?: string, caseInstanceBusinessKey?: string, caseInstanceBusinessKeyLike?: string, caseDefinitionId?: string, caseDefinitionKey?: string, caseDefinitionName?: string, caseDefinitionNameLike?: string, caseExecutionId?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, assignee?: string, assigneeExpression?: string, assigneeLike?: string, assigneeLikeExpression?: string, assigneeIn?: string, assigneeNotIn?: string, owner?: string, ownerExpression?: string, candidateGroup?: string, candidateGroupExpression?: string, candidateUser?: string, candidateUserExpression?: string, includeAssignedTasks?: boolean, involvedUser?: string, involvedUserExpression?: string, assigned?: boolean, unassigned?: boolean, taskDefinitionKey?: string, taskDefinitionKeyIn?: string, taskDefinitionKeyLike?: string, name?: string, nameNotEqual?: string, nameLike?: string, nameNotLike?: string, description?: string, descriptionLike?: string, priority?: number, maxPriority?: number, minPriority?: number, dueDate?: string, dueDateExpression?: string, dueAfter?: string, dueAfterExpression?: string, dueBefore?: string, dueBeforeExpression?: string, withoutDueDate?: boolean, followUpDate?: string, followUpDateExpression?: string, followUpAfter?: string, followUpAfterExpression?: string, followUpBefore?: string, followUpBeforeExpression?: string, followUpBeforeOrNotExistent?: string, followUpBeforeOrNotExistentExpression?: string, createdOn?: string, createdOnExpression?: string, createdAfter?: string, createdAfterExpression?: string, createdBefore?: string, createdBeforeExpression?: string, updatedAfter?: string, updatedAfterExpression?: string, delegationState?: string, candidateGroups?: string, candidateGroupsExpression?: string, withCandidateGroups?: boolean, withoutCandidateGroups?: boolean, withCandidateUsers?: boolean, withoutCandidateUsers?: boolean, active?: boolean, suspended?: boolean, taskVariables?: string, processVariables?: string, caseInstanceVariables?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, parentTaskId?: string, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


































































































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (taskId !== undefined && taskId !== null) {
            queryParameters = queryParameters.set('taskId', <any>taskId);
        }
        if (taskIdIn !== undefined && taskIdIn !== null) {
            queryParameters = queryParameters.set('taskIdIn', <any>taskIdIn);
        }
        if (processInstanceId !== undefined && processInstanceId !== null) {
            queryParameters = queryParameters.set('processInstanceId', <any>processInstanceId);
        }
        if (processInstanceIdIn !== undefined && processInstanceIdIn !== null) {
            queryParameters = queryParameters.set('processInstanceIdIn', <any>processInstanceIdIn);
        }
        if (processInstanceBusinessKey !== undefined && processInstanceBusinessKey !== null) {
            queryParameters = queryParameters.set('processInstanceBusinessKey', <any>processInstanceBusinessKey);
        }
        if (processInstanceBusinessKeyExpression !== undefined && processInstanceBusinessKeyExpression !== null) {
            queryParameters = queryParameters.set('processInstanceBusinessKeyExpression', <any>processInstanceBusinessKeyExpression);
        }
        if (processInstanceBusinessKeyIn !== undefined && processInstanceBusinessKeyIn !== null) {
            queryParameters = queryParameters.set('processInstanceBusinessKeyIn', <any>processInstanceBusinessKeyIn);
        }
        if (processInstanceBusinessKeyLike !== undefined && processInstanceBusinessKeyLike !== null) {
            queryParameters = queryParameters.set('processInstanceBusinessKeyLike', <any>processInstanceBusinessKeyLike);
        }
        if (processInstanceBusinessKeyLikeExpression !== undefined && processInstanceBusinessKeyLikeExpression !== null) {
            queryParameters = queryParameters.set('processInstanceBusinessKeyLikeExpression', <any>processInstanceBusinessKeyLikeExpression);
        }
        if (processDefinitionId !== undefined && processDefinitionId !== null) {
            queryParameters = queryParameters.set('processDefinitionId', <any>processDefinitionId);
        }
        if (processDefinitionKey !== undefined && processDefinitionKey !== null) {
            queryParameters = queryParameters.set('processDefinitionKey', <any>processDefinitionKey);
        }
        if (processDefinitionKeyIn !== undefined && processDefinitionKeyIn !== null) {
            queryParameters = queryParameters.set('processDefinitionKeyIn', <any>processDefinitionKeyIn);
        }
        if (processDefinitionName !== undefined && processDefinitionName !== null) {
            queryParameters = queryParameters.set('processDefinitionName', <any>processDefinitionName);
        }
        if (processDefinitionNameLike !== undefined && processDefinitionNameLike !== null) {
            queryParameters = queryParameters.set('processDefinitionNameLike', <any>processDefinitionNameLike);
        }
        if (executionId !== undefined && executionId !== null) {
            queryParameters = queryParameters.set('executionId', <any>executionId);
        }
        if (caseInstanceId !== undefined && caseInstanceId !== null) {
            queryParameters = queryParameters.set('caseInstanceId', <any>caseInstanceId);
        }
        if (caseInstanceBusinessKey !== undefined && caseInstanceBusinessKey !== null) {
            queryParameters = queryParameters.set('caseInstanceBusinessKey', <any>caseInstanceBusinessKey);
        }
        if (caseInstanceBusinessKeyLike !== undefined && caseInstanceBusinessKeyLike !== null) {
            queryParameters = queryParameters.set('caseInstanceBusinessKeyLike', <any>caseInstanceBusinessKeyLike);
        }
        if (caseDefinitionId !== undefined && caseDefinitionId !== null) {
            queryParameters = queryParameters.set('caseDefinitionId', <any>caseDefinitionId);
        }
        if (caseDefinitionKey !== undefined && caseDefinitionKey !== null) {
            queryParameters = queryParameters.set('caseDefinitionKey', <any>caseDefinitionKey);
        }
        if (caseDefinitionName !== undefined && caseDefinitionName !== null) {
            queryParameters = queryParameters.set('caseDefinitionName', <any>caseDefinitionName);
        }
        if (caseDefinitionNameLike !== undefined && caseDefinitionNameLike !== null) {
            queryParameters = queryParameters.set('caseDefinitionNameLike', <any>caseDefinitionNameLike);
        }
        if (caseExecutionId !== undefined && caseExecutionId !== null) {
            queryParameters = queryParameters.set('caseExecutionId', <any>caseExecutionId);
        }
        if (activityInstanceIdIn !== undefined && activityInstanceIdIn !== null) {
            queryParameters = queryParameters.set('activityInstanceIdIn', <any>activityInstanceIdIn);
        }
        if (tenantIdIn !== undefined && tenantIdIn !== null) {
            queryParameters = queryParameters.set('tenantIdIn', <any>tenantIdIn);
        }
        if (withoutTenantId !== undefined && withoutTenantId !== null) {
            queryParameters = queryParameters.set('withoutTenantId', <any>withoutTenantId);
        }
        if (assignee !== undefined && assignee !== null) {
            queryParameters = queryParameters.set('assignee', <any>assignee);
        }
        if (assigneeExpression !== undefined && assigneeExpression !== null) {
            queryParameters = queryParameters.set('assigneeExpression', <any>assigneeExpression);
        }
        if (assigneeLike !== undefined && assigneeLike !== null) {
            queryParameters = queryParameters.set('assigneeLike', <any>assigneeLike);
        }
        if (assigneeLikeExpression !== undefined && assigneeLikeExpression !== null) {
            queryParameters = queryParameters.set('assigneeLikeExpression', <any>assigneeLikeExpression);
        }
        if (assigneeIn !== undefined && assigneeIn !== null) {
            queryParameters = queryParameters.set('assigneeIn', <any>assigneeIn);
        }
        if (assigneeNotIn !== undefined && assigneeNotIn !== null) {
            queryParameters = queryParameters.set('assigneeNotIn', <any>assigneeNotIn);
        }
        if (owner !== undefined && owner !== null) {
            queryParameters = queryParameters.set('owner', <any>owner);
        }
        if (ownerExpression !== undefined && ownerExpression !== null) {
            queryParameters = queryParameters.set('ownerExpression', <any>ownerExpression);
        }
        if (candidateGroup !== undefined && candidateGroup !== null) {
            queryParameters = queryParameters.set('candidateGroup', <any>candidateGroup);
        }
        if (candidateGroupExpression !== undefined && candidateGroupExpression !== null) {
            queryParameters = queryParameters.set('candidateGroupExpression', <any>candidateGroupExpression);
        }
        if (candidateUser !== undefined && candidateUser !== null) {
            queryParameters = queryParameters.set('candidateUser', <any>candidateUser);
        }
        if (candidateUserExpression !== undefined && candidateUserExpression !== null) {
            queryParameters = queryParameters.set('candidateUserExpression', <any>candidateUserExpression);
        }
        if (includeAssignedTasks !== undefined && includeAssignedTasks !== null) {
            queryParameters = queryParameters.set('includeAssignedTasks', <any>includeAssignedTasks);
        }
        if (involvedUser !== undefined && involvedUser !== null) {
            queryParameters = queryParameters.set('involvedUser', <any>involvedUser);
        }
        if (involvedUserExpression !== undefined && involvedUserExpression !== null) {
            queryParameters = queryParameters.set('involvedUserExpression', <any>involvedUserExpression);
        }
        if (assigned !== undefined && assigned !== null) {
            queryParameters = queryParameters.set('assigned', <any>assigned);
        }
        if (unassigned !== undefined && unassigned !== null) {
            queryParameters = queryParameters.set('unassigned', <any>unassigned);
        }
        if (taskDefinitionKey !== undefined && taskDefinitionKey !== null) {
            queryParameters = queryParameters.set('taskDefinitionKey', <any>taskDefinitionKey);
        }
        if (taskDefinitionKeyIn !== undefined && taskDefinitionKeyIn !== null) {
            queryParameters = queryParameters.set('taskDefinitionKeyIn', <any>taskDefinitionKeyIn);
        }
        if (taskDefinitionKeyLike !== undefined && taskDefinitionKeyLike !== null) {
            queryParameters = queryParameters.set('taskDefinitionKeyLike', <any>taskDefinitionKeyLike);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (nameNotEqual !== undefined && nameNotEqual !== null) {
            queryParameters = queryParameters.set('nameNotEqual', <any>nameNotEqual);
        }
        if (nameLike !== undefined && nameLike !== null) {
            queryParameters = queryParameters.set('nameLike', <any>nameLike);
        }
        if (nameNotLike !== undefined && nameNotLike !== null) {
            queryParameters = queryParameters.set('nameNotLike', <any>nameNotLike);
        }
        if (description !== undefined && description !== null) {
            queryParameters = queryParameters.set('description', <any>description);
        }
        if (descriptionLike !== undefined && descriptionLike !== null) {
            queryParameters = queryParameters.set('descriptionLike', <any>descriptionLike);
        }
        if (priority !== undefined && priority !== null) {
            queryParameters = queryParameters.set('priority', <any>priority);
        }
        if (maxPriority !== undefined && maxPriority !== null) {
            queryParameters = queryParameters.set('maxPriority', <any>maxPriority);
        }
        if (minPriority !== undefined && minPriority !== null) {
            queryParameters = queryParameters.set('minPriority', <any>minPriority);
        }
        if (dueDate !== undefined && dueDate !== null) {
            queryParameters = queryParameters.set('dueDate', <any>dueDate);
        }
        if (dueDateExpression !== undefined && dueDateExpression !== null) {
            queryParameters = queryParameters.set('dueDateExpression', <any>dueDateExpression);
        }
        if (dueAfter !== undefined && dueAfter !== null) {
            queryParameters = queryParameters.set('dueAfter', <any>dueAfter);
        }
        if (dueAfterExpression !== undefined && dueAfterExpression !== null) {
            queryParameters = queryParameters.set('dueAfterExpression', <any>dueAfterExpression);
        }
        if (dueBefore !== undefined && dueBefore !== null) {
            queryParameters = queryParameters.set('dueBefore', <any>dueBefore);
        }
        if (dueBeforeExpression !== undefined && dueBeforeExpression !== null) {
            queryParameters = queryParameters.set('dueBeforeExpression', <any>dueBeforeExpression);
        }
        if (withoutDueDate !== undefined && withoutDueDate !== null) {
            queryParameters = queryParameters.set('withoutDueDate', <any>withoutDueDate);
        }
        if (followUpDate !== undefined && followUpDate !== null) {
            queryParameters = queryParameters.set('followUpDate', <any>followUpDate);
        }
        if (followUpDateExpression !== undefined && followUpDateExpression !== null) {
            queryParameters = queryParameters.set('followUpDateExpression', <any>followUpDateExpression);
        }
        if (followUpAfter !== undefined && followUpAfter !== null) {
            queryParameters = queryParameters.set('followUpAfter', <any>followUpAfter);
        }
        if (followUpAfterExpression !== undefined && followUpAfterExpression !== null) {
            queryParameters = queryParameters.set('followUpAfterExpression', <any>followUpAfterExpression);
        }
        if (followUpBefore !== undefined && followUpBefore !== null) {
            queryParameters = queryParameters.set('followUpBefore', <any>followUpBefore);
        }
        if (followUpBeforeExpression !== undefined && followUpBeforeExpression !== null) {
            queryParameters = queryParameters.set('followUpBeforeExpression', <any>followUpBeforeExpression);
        }
        if (followUpBeforeOrNotExistent !== undefined && followUpBeforeOrNotExistent !== null) {
            queryParameters = queryParameters.set('followUpBeforeOrNotExistent', <any>followUpBeforeOrNotExistent);
        }
        if (followUpBeforeOrNotExistentExpression !== undefined && followUpBeforeOrNotExistentExpression !== null) {
            queryParameters = queryParameters.set('followUpBeforeOrNotExistentExpression', <any>followUpBeforeOrNotExistentExpression);
        }
        if (createdOn !== undefined && createdOn !== null) {
            queryParameters = queryParameters.set('createdOn', <any>createdOn);
        }
        if (createdOnExpression !== undefined && createdOnExpression !== null) {
            queryParameters = queryParameters.set('createdOnExpression', <any>createdOnExpression);
        }
        if (createdAfter !== undefined && createdAfter !== null) {
            queryParameters = queryParameters.set('createdAfter', <any>createdAfter);
        }
        if (createdAfterExpression !== undefined && createdAfterExpression !== null) {
            queryParameters = queryParameters.set('createdAfterExpression', <any>createdAfterExpression);
        }
        if (createdBefore !== undefined && createdBefore !== null) {
            queryParameters = queryParameters.set('createdBefore', <any>createdBefore);
        }
        if (createdBeforeExpression !== undefined && createdBeforeExpression !== null) {
            queryParameters = queryParameters.set('createdBeforeExpression', <any>createdBeforeExpression);
        }
        if (updatedAfter !== undefined && updatedAfter !== null) {
            queryParameters = queryParameters.set('updatedAfter', <any>updatedAfter);
        }
        if (updatedAfterExpression !== undefined && updatedAfterExpression !== null) {
            queryParameters = queryParameters.set('updatedAfterExpression', <any>updatedAfterExpression);
        }
        if (delegationState !== undefined && delegationState !== null) {
            queryParameters = queryParameters.set('delegationState', <any>delegationState);
        }
        if (candidateGroups !== undefined && candidateGroups !== null) {
            queryParameters = queryParameters.set('candidateGroups', <any>candidateGroups);
        }
        if (candidateGroupsExpression !== undefined && candidateGroupsExpression !== null) {
            queryParameters = queryParameters.set('candidateGroupsExpression', <any>candidateGroupsExpression);
        }
        if (withCandidateGroups !== undefined && withCandidateGroups !== null) {
            queryParameters = queryParameters.set('withCandidateGroups', <any>withCandidateGroups);
        }
        if (withoutCandidateGroups !== undefined && withoutCandidateGroups !== null) {
            queryParameters = queryParameters.set('withoutCandidateGroups', <any>withoutCandidateGroups);
        }
        if (withCandidateUsers !== undefined && withCandidateUsers !== null) {
            queryParameters = queryParameters.set('withCandidateUsers', <any>withCandidateUsers);
        }
        if (withoutCandidateUsers !== undefined && withoutCandidateUsers !== null) {
            queryParameters = queryParameters.set('withoutCandidateUsers', <any>withoutCandidateUsers);
        }
        if (active !== undefined && active !== null) {
            queryParameters = queryParameters.set('active', <any>active);
        }
        if (suspended !== undefined && suspended !== null) {
            queryParameters = queryParameters.set('suspended', <any>suspended);
        }
        if (taskVariables !== undefined && taskVariables !== null) {
            queryParameters = queryParameters.set('taskVariables', <any>taskVariables);
        }
        if (processVariables !== undefined && processVariables !== null) {
            queryParameters = queryParameters.set('processVariables', <any>processVariables);
        }
        if (caseInstanceVariables !== undefined && caseInstanceVariables !== null) {
            queryParameters = queryParameters.set('caseInstanceVariables', <any>caseInstanceVariables);
        }
        if (variableNamesIgnoreCase !== undefined && variableNamesIgnoreCase !== null) {
            queryParameters = queryParameters.set('variableNamesIgnoreCase', <any>variableNamesIgnoreCase);
        }
        if (variableValuesIgnoreCase !== undefined && variableValuesIgnoreCase !== null) {
            queryParameters = queryParameters.set('variableValuesIgnoreCase', <any>variableValuesIgnoreCase);
        }
        if (parentTaskId !== undefined && parentTaskId !== null) {
            queryParameters = queryParameters.set('parentTaskId', <any>parentTaskId);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (sortOrder !== undefined && sortOrder !== null) {
            queryParameters = queryParameters.set('sortOrder', <any>sortOrder);
        }
        if (firstResult !== undefined && firstResult !== null) {
            queryParameters = queryParameters.set('firstResult', <any>firstResult);
        }
        if (maxResults !== undefined && maxResults !== null) {
            queryParameters = queryParameters.set('maxResults', <any>maxResults);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<TaskDto>>('get',`${this.basePath}/task`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get List Count
     * Retrieves the number of tasks that fulfill a provided filter. Corresponds to the size of the result set when using the [Get Tasks](https://docs.camunda.org/manual/7.19/reference/rest/task/) method.  **Security Consideration:** There are several query parameters (such as assigneeExpression) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations](https://docs.camunda.org/manual/7.19/user-guide/process-engine/securing-custom-code/) for custom code in the user guide for details.
     * @param taskId Restrict to task with the given id.
     * @param taskIdIn Restrict to tasks with any of the given ids.
     * @param processInstanceId Restrict to tasks that belong to process instances with the given id.
     * @param processInstanceIdIn Restrict to tasks that belong to process instances with the given ids.
     * @param processInstanceBusinessKey Restrict to tasks that belong to process instances with the given business key.
     * @param processInstanceBusinessKeyExpression Restrict to tasks that belong to process instances with the given business key which  is described by an expression. See the  [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions.
     * @param processInstanceBusinessKeyIn Restrict to tasks that belong to process instances with one of the give business keys.  The keys need to be in a comma-separated list.
     * @param processInstanceBusinessKeyLike Restrict to tasks that have a process instance business key that has the parameter  value as a substring.
     * @param processInstanceBusinessKeyLikeExpression Restrict to tasks that have a process instance business key that has the parameter  value as a substring and is described by an expression. See the [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param processDefinitionId Restrict to tasks that belong to a process definition with the given id.
     * @param processDefinitionKey Restrict to tasks that belong to a process definition with the given key.
     * @param processDefinitionKeyIn Restrict to tasks that belong to a process definition with one of the given keys. The  keys need to be in a comma-separated list.
     * @param processDefinitionName Restrict to tasks that belong to a process definition with the given name.
     * @param processDefinitionNameLike Restrict to tasks that have a process definition name that has the parameter value as  a substring.
     * @param executionId Restrict to tasks that belong to an execution with the given id.
     * @param caseInstanceId Restrict to tasks that belong to case instances with the given id.
     * @param caseInstanceBusinessKey Restrict to tasks that belong to case instances with the given business key.
     * @param caseInstanceBusinessKeyLike Restrict to tasks that have a case instance business key that has the parameter value  as a substring.
     * @param caseDefinitionId Restrict to tasks that belong to a case definition with the given id.
     * @param caseDefinitionKey Restrict to tasks that belong to a case definition with the given key.
     * @param caseDefinitionName Restrict to tasks that belong to a case definition with the given name.
     * @param caseDefinitionNameLike Restrict to tasks that have a case definition name that has the parameter value as a  substring.
     * @param caseExecutionId Restrict to tasks that belong to a case execution with the given id.
     * @param activityInstanceIdIn Only include tasks which belong to one of the passed and comma-separated activity  instance ids.
     * @param tenantIdIn Only include tasks which belong to one of the passed and comma-separated  tenant ids.
     * @param withoutTenantId Only include tasks which belong to no tenant. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior.
     * @param assignee Restrict to tasks that the given user is assigned to.
     * @param assigneeExpression Restrict to tasks that the user described by the given expression is assigned to.  See the  [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param assigneeLike Restrict to tasks that have an assignee that has the parameter  value as a substring.
     * @param assigneeLikeExpression Restrict to tasks that have an assignee that has the parameter value described by the  given expression as a substring. See the  [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param assigneeIn Only include tasks which are assigned to one of the passed and  comma-separated user ids.
     * @param assigneeNotIn Only include tasks which are not assigned to one of the passed and comma-separated user ids.
     * @param owner Restrict to tasks that the given user owns.
     * @param ownerExpression Restrict to tasks that the user described by the given expression owns. See the  [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param candidateGroup Only include tasks that are offered to the given group.
     * @param candidateGroupExpression Only include tasks that are offered to the group described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param candidateUser Only include tasks that are offered to the given user or to one of his groups.
     * @param candidateUserExpression Only include tasks that are offered to the user described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     * @param includeAssignedTasks Also include tasks that are assigned to users in candidate queries. Default is to only  include tasks that are not assigned to any user if you query by candidate user or group(s).
     * @param involvedUser Only include tasks that the given user is involved in. A user is involved in a task if  an identity link exists between task and user (e.g., the user is the assignee).
     * @param involvedUserExpression Only include tasks that the user described by the given expression is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee). See the [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions.
     * @param assigned If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned.
     * @param unassigned If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned.
     * @param taskDefinitionKey Restrict to tasks that have the given key.
     * @param taskDefinitionKeyIn Restrict to tasks that have one of the given keys. The keys need to be in a comma-separated list.
     * @param taskDefinitionKeyLike Restrict to tasks that have a key that has the parameter value as a substring.
     * @param name Restrict to tasks that have the given name.
     * @param nameNotEqual Restrict to tasks that do not have the given name.
     * @param nameLike Restrict to tasks that have a name with the given parameter value as substring.
     * @param nameNotLike Restrict to tasks that do not have a name with the given parameter value as substring.
     * @param description Restrict to tasks that have the given description.
     * @param descriptionLike Restrict to tasks that have a description that has the parameter value as a substring.
     * @param priority Restrict to tasks that have the given priority.
     * @param maxPriority Restrict to tasks that have a lower or equal priority.
     * @param minPriority Restrict to tasks that have a higher or equal priority.
     * @param dueDate Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;.
     * @param dueDateExpression Restrict to tasks that are due on the date described by the given expression. See the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object.
     * @param dueAfter Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.435+0200&#x60;.
     * @param dueAfterExpression Restrict to tasks that are due after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object.
     * @param dueBefore Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.243+0200&#x60;.
     * @param dueBeforeExpression Restrict to tasks that are due before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object.
     * @param withoutDueDate Only include tasks which have no due date. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior.
     * @param followUpDate Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;.
     * @param followUpDateExpression Restrict to tasks that have a followUp date on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object.
     * @param followUpAfter Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.542+0200&#x60;.
     * @param followUpAfterExpression Restrict to tasks that have a followUp date after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object.
     * @param followUpBefore Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.234+0200&#x60;.
     * @param followUpBeforeExpression Restrict to tasks that have a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object.
     * @param followUpBeforeOrNotExistent Restrict to tasks that have no followUp date or a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.432+0200&#x60;. The typical use case is to query all &#x60;active&#x60; tasks for a user for a given date.
     * @param followUpBeforeOrNotExistentExpression Restrict to tasks that have no followUp date or a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object.
     * @param createdOn Restrict to tasks that were created on the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.324+0200&#x60;.
     * @param createdOnExpression Restrict to tasks that were created on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object.
     * @param createdAfter Restrict to tasks that were created after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;.
     * @param createdAfterExpression Restrict to tasks that were created after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object.
     * @param createdBefore Restrict to tasks that were created before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.332+0200&#x60;.
     * @param createdBeforeExpression Restrict to tasks that were created before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object.
     * @param updatedAfter Restrict to tasks that were updated after the given date. Every action that fires  a [task update event](https://docs.camunda.org/manual/7.19/user-guide/process-engine/delegation-code/#task-listener-event-lifecycle) is considered as updating the task. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.332+0200&#x60;.
     * @param updatedAfterExpression Restrict to tasks that were updated after the date described by the given expression. Every action that fires  a [task update event](https://docs.camunda.org/manual/7.19/user-guide/process-engine/delegation-code/#task-listener-event-lifecycle) is considered as updating the task. See the [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object.
     * @param delegationState Restrict to tasks that are in the given delegation state. Valid values are &#x60;PENDING&#x60; and &#x60;RESOLVED&#x60;.
     * @param candidateGroups Restrict to tasks that are offered to any of the given candidate groups. Takes a comma-separated list of group names, so for example &#x60;developers,support,sales&#x60;.
     * @param candidateGroupsExpression Restrict to tasks that are offered to any of the candidate groups described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to &#x60;java.util.List&#x60; of Strings.
     * @param withCandidateGroups Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param withoutCandidateGroups Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param withCandidateUsers Only include tasks which have a candidate user. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param withoutCandidateUsers Only include tasks which have no candidate users. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param active Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param suspended Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param taskVariables Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
     * @param processVariables Only include tasks that belong to process instances that have variables with certain  values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;; &#x60;notLike&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
     * @param caseInstanceVariables Only include tasks that belong to case instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
     * @param variableNamesIgnoreCase Match all variable names in this query case-insensitively. If set &#x60;variableName&#x60; and &#x60;variablename&#x60; are treated as equal.
     * @param variableValuesIgnoreCase Match all variable values in this query case-insensitively. If set &#x60;variableValue&#x60; and &#x60;variablevalue&#x60; are treated as equal.
     * @param parentTaskId Restrict query to all tasks that are sub tasks of the given task. Takes a task id.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTasksCount(taskId?: string, taskIdIn?: string, processInstanceId?: string, processInstanceIdIn?: string, processInstanceBusinessKey?: string, processInstanceBusinessKeyExpression?: string, processInstanceBusinessKeyIn?: string, processInstanceBusinessKeyLike?: string, processInstanceBusinessKeyLikeExpression?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionKeyIn?: string, processDefinitionName?: string, processDefinitionNameLike?: string, executionId?: string, caseInstanceId?: string, caseInstanceBusinessKey?: string, caseInstanceBusinessKeyLike?: string, caseDefinitionId?: string, caseDefinitionKey?: string, caseDefinitionName?: string, caseDefinitionNameLike?: string, caseExecutionId?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, assignee?: string, assigneeExpression?: string, assigneeLike?: string, assigneeLikeExpression?: string, assigneeIn?: string, assigneeNotIn?: string, owner?: string, ownerExpression?: string, candidateGroup?: string, candidateGroupExpression?: string, candidateUser?: string, candidateUserExpression?: string, includeAssignedTasks?: boolean, involvedUser?: string, involvedUserExpression?: string, assigned?: boolean, unassigned?: boolean, taskDefinitionKey?: string, taskDefinitionKeyIn?: string, taskDefinitionKeyLike?: string, name?: string, nameNotEqual?: string, nameLike?: string, nameNotLike?: string, description?: string, descriptionLike?: string, priority?: number, maxPriority?: number, minPriority?: number, dueDate?: string, dueDateExpression?: string, dueAfter?: string, dueAfterExpression?: string, dueBefore?: string, dueBeforeExpression?: string, withoutDueDate?: boolean, followUpDate?: string, followUpDateExpression?: string, followUpAfter?: string, followUpAfterExpression?: string, followUpBefore?: string, followUpBeforeExpression?: string, followUpBeforeOrNotExistent?: string, followUpBeforeOrNotExistentExpression?: string, createdOn?: string, createdOnExpression?: string, createdAfter?: string, createdAfterExpression?: string, createdBefore?: string, createdBeforeExpression?: string, updatedAfter?: string, updatedAfterExpression?: string, delegationState?: string, candidateGroups?: string, candidateGroupsExpression?: string, withCandidateGroups?: boolean, withoutCandidateGroups?: boolean, withCandidateUsers?: boolean, withoutCandidateUsers?: boolean, active?: boolean, suspended?: boolean, taskVariables?: string, processVariables?: string, caseInstanceVariables?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, parentTaskId?: string, observe?: 'body', reportProgress?: boolean): Observable<CountResultDto>;
    public getTasksCount(taskId?: string, taskIdIn?: string, processInstanceId?: string, processInstanceIdIn?: string, processInstanceBusinessKey?: string, processInstanceBusinessKeyExpression?: string, processInstanceBusinessKeyIn?: string, processInstanceBusinessKeyLike?: string, processInstanceBusinessKeyLikeExpression?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionKeyIn?: string, processDefinitionName?: string, processDefinitionNameLike?: string, executionId?: string, caseInstanceId?: string, caseInstanceBusinessKey?: string, caseInstanceBusinessKeyLike?: string, caseDefinitionId?: string, caseDefinitionKey?: string, caseDefinitionName?: string, caseDefinitionNameLike?: string, caseExecutionId?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, assignee?: string, assigneeExpression?: string, assigneeLike?: string, assigneeLikeExpression?: string, assigneeIn?: string, assigneeNotIn?: string, owner?: string, ownerExpression?: string, candidateGroup?: string, candidateGroupExpression?: string, candidateUser?: string, candidateUserExpression?: string, includeAssignedTasks?: boolean, involvedUser?: string, involvedUserExpression?: string, assigned?: boolean, unassigned?: boolean, taskDefinitionKey?: string, taskDefinitionKeyIn?: string, taskDefinitionKeyLike?: string, name?: string, nameNotEqual?: string, nameLike?: string, nameNotLike?: string, description?: string, descriptionLike?: string, priority?: number, maxPriority?: number, minPriority?: number, dueDate?: string, dueDateExpression?: string, dueAfter?: string, dueAfterExpression?: string, dueBefore?: string, dueBeforeExpression?: string, withoutDueDate?: boolean, followUpDate?: string, followUpDateExpression?: string, followUpAfter?: string, followUpAfterExpression?: string, followUpBefore?: string, followUpBeforeExpression?: string, followUpBeforeOrNotExistent?: string, followUpBeforeOrNotExistentExpression?: string, createdOn?: string, createdOnExpression?: string, createdAfter?: string, createdAfterExpression?: string, createdBefore?: string, createdBeforeExpression?: string, updatedAfter?: string, updatedAfterExpression?: string, delegationState?: string, candidateGroups?: string, candidateGroupsExpression?: string, withCandidateGroups?: boolean, withoutCandidateGroups?: boolean, withCandidateUsers?: boolean, withoutCandidateUsers?: boolean, active?: boolean, suspended?: boolean, taskVariables?: string, processVariables?: string, caseInstanceVariables?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, parentTaskId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CountResultDto>>;
    public getTasksCount(taskId?: string, taskIdIn?: string, processInstanceId?: string, processInstanceIdIn?: string, processInstanceBusinessKey?: string, processInstanceBusinessKeyExpression?: string, processInstanceBusinessKeyIn?: string, processInstanceBusinessKeyLike?: string, processInstanceBusinessKeyLikeExpression?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionKeyIn?: string, processDefinitionName?: string, processDefinitionNameLike?: string, executionId?: string, caseInstanceId?: string, caseInstanceBusinessKey?: string, caseInstanceBusinessKeyLike?: string, caseDefinitionId?: string, caseDefinitionKey?: string, caseDefinitionName?: string, caseDefinitionNameLike?: string, caseExecutionId?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, assignee?: string, assigneeExpression?: string, assigneeLike?: string, assigneeLikeExpression?: string, assigneeIn?: string, assigneeNotIn?: string, owner?: string, ownerExpression?: string, candidateGroup?: string, candidateGroupExpression?: string, candidateUser?: string, candidateUserExpression?: string, includeAssignedTasks?: boolean, involvedUser?: string, involvedUserExpression?: string, assigned?: boolean, unassigned?: boolean, taskDefinitionKey?: string, taskDefinitionKeyIn?: string, taskDefinitionKeyLike?: string, name?: string, nameNotEqual?: string, nameLike?: string, nameNotLike?: string, description?: string, descriptionLike?: string, priority?: number, maxPriority?: number, minPriority?: number, dueDate?: string, dueDateExpression?: string, dueAfter?: string, dueAfterExpression?: string, dueBefore?: string, dueBeforeExpression?: string, withoutDueDate?: boolean, followUpDate?: string, followUpDateExpression?: string, followUpAfter?: string, followUpAfterExpression?: string, followUpBefore?: string, followUpBeforeExpression?: string, followUpBeforeOrNotExistent?: string, followUpBeforeOrNotExistentExpression?: string, createdOn?: string, createdOnExpression?: string, createdAfter?: string, createdAfterExpression?: string, createdBefore?: string, createdBeforeExpression?: string, updatedAfter?: string, updatedAfterExpression?: string, delegationState?: string, candidateGroups?: string, candidateGroupsExpression?: string, withCandidateGroups?: boolean, withoutCandidateGroups?: boolean, withCandidateUsers?: boolean, withoutCandidateUsers?: boolean, active?: boolean, suspended?: boolean, taskVariables?: string, processVariables?: string, caseInstanceVariables?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, parentTaskId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CountResultDto>>;
    public getTasksCount(taskId?: string, taskIdIn?: string, processInstanceId?: string, processInstanceIdIn?: string, processInstanceBusinessKey?: string, processInstanceBusinessKeyExpression?: string, processInstanceBusinessKeyIn?: string, processInstanceBusinessKeyLike?: string, processInstanceBusinessKeyLikeExpression?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionKeyIn?: string, processDefinitionName?: string, processDefinitionNameLike?: string, executionId?: string, caseInstanceId?: string, caseInstanceBusinessKey?: string, caseInstanceBusinessKeyLike?: string, caseDefinitionId?: string, caseDefinitionKey?: string, caseDefinitionName?: string, caseDefinitionNameLike?: string, caseExecutionId?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, assignee?: string, assigneeExpression?: string, assigneeLike?: string, assigneeLikeExpression?: string, assigneeIn?: string, assigneeNotIn?: string, owner?: string, ownerExpression?: string, candidateGroup?: string, candidateGroupExpression?: string, candidateUser?: string, candidateUserExpression?: string, includeAssignedTasks?: boolean, involvedUser?: string, involvedUserExpression?: string, assigned?: boolean, unassigned?: boolean, taskDefinitionKey?: string, taskDefinitionKeyIn?: string, taskDefinitionKeyLike?: string, name?: string, nameNotEqual?: string, nameLike?: string, nameNotLike?: string, description?: string, descriptionLike?: string, priority?: number, maxPriority?: number, minPriority?: number, dueDate?: string, dueDateExpression?: string, dueAfter?: string, dueAfterExpression?: string, dueBefore?: string, dueBeforeExpression?: string, withoutDueDate?: boolean, followUpDate?: string, followUpDateExpression?: string, followUpAfter?: string, followUpAfterExpression?: string, followUpBefore?: string, followUpBeforeExpression?: string, followUpBeforeOrNotExistent?: string, followUpBeforeOrNotExistentExpression?: string, createdOn?: string, createdOnExpression?: string, createdAfter?: string, createdAfterExpression?: string, createdBefore?: string, createdBeforeExpression?: string, updatedAfter?: string, updatedAfterExpression?: string, delegationState?: string, candidateGroups?: string, candidateGroupsExpression?: string, withCandidateGroups?: boolean, withoutCandidateGroups?: boolean, withCandidateUsers?: boolean, withoutCandidateUsers?: boolean, active?: boolean, suspended?: boolean, taskVariables?: string, processVariables?: string, caseInstanceVariables?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, parentTaskId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






























































































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (taskId !== undefined && taskId !== null) {
            queryParameters = queryParameters.set('taskId', <any>taskId);
        }
        if (taskIdIn !== undefined && taskIdIn !== null) {
            queryParameters = queryParameters.set('taskIdIn', <any>taskIdIn);
        }
        if (processInstanceId !== undefined && processInstanceId !== null) {
            queryParameters = queryParameters.set('processInstanceId', <any>processInstanceId);
        }
        if (processInstanceIdIn !== undefined && processInstanceIdIn !== null) {
            queryParameters = queryParameters.set('processInstanceIdIn', <any>processInstanceIdIn);
        }
        if (processInstanceBusinessKey !== undefined && processInstanceBusinessKey !== null) {
            queryParameters = queryParameters.set('processInstanceBusinessKey', <any>processInstanceBusinessKey);
        }
        if (processInstanceBusinessKeyExpression !== undefined && processInstanceBusinessKeyExpression !== null) {
            queryParameters = queryParameters.set('processInstanceBusinessKeyExpression', <any>processInstanceBusinessKeyExpression);
        }
        if (processInstanceBusinessKeyIn !== undefined && processInstanceBusinessKeyIn !== null) {
            queryParameters = queryParameters.set('processInstanceBusinessKeyIn', <any>processInstanceBusinessKeyIn);
        }
        if (processInstanceBusinessKeyLike !== undefined && processInstanceBusinessKeyLike !== null) {
            queryParameters = queryParameters.set('processInstanceBusinessKeyLike', <any>processInstanceBusinessKeyLike);
        }
        if (processInstanceBusinessKeyLikeExpression !== undefined && processInstanceBusinessKeyLikeExpression !== null) {
            queryParameters = queryParameters.set('processInstanceBusinessKeyLikeExpression', <any>processInstanceBusinessKeyLikeExpression);
        }
        if (processDefinitionId !== undefined && processDefinitionId !== null) {
            queryParameters = queryParameters.set('processDefinitionId', <any>processDefinitionId);
        }
        if (processDefinitionKey !== undefined && processDefinitionKey !== null) {
            queryParameters = queryParameters.set('processDefinitionKey', <any>processDefinitionKey);
        }
        if (processDefinitionKeyIn !== undefined && processDefinitionKeyIn !== null) {
            queryParameters = queryParameters.set('processDefinitionKeyIn', <any>processDefinitionKeyIn);
        }
        if (processDefinitionName !== undefined && processDefinitionName !== null) {
            queryParameters = queryParameters.set('processDefinitionName', <any>processDefinitionName);
        }
        if (processDefinitionNameLike !== undefined && processDefinitionNameLike !== null) {
            queryParameters = queryParameters.set('processDefinitionNameLike', <any>processDefinitionNameLike);
        }
        if (executionId !== undefined && executionId !== null) {
            queryParameters = queryParameters.set('executionId', <any>executionId);
        }
        if (caseInstanceId !== undefined && caseInstanceId !== null) {
            queryParameters = queryParameters.set('caseInstanceId', <any>caseInstanceId);
        }
        if (caseInstanceBusinessKey !== undefined && caseInstanceBusinessKey !== null) {
            queryParameters = queryParameters.set('caseInstanceBusinessKey', <any>caseInstanceBusinessKey);
        }
        if (caseInstanceBusinessKeyLike !== undefined && caseInstanceBusinessKeyLike !== null) {
            queryParameters = queryParameters.set('caseInstanceBusinessKeyLike', <any>caseInstanceBusinessKeyLike);
        }
        if (caseDefinitionId !== undefined && caseDefinitionId !== null) {
            queryParameters = queryParameters.set('caseDefinitionId', <any>caseDefinitionId);
        }
        if (caseDefinitionKey !== undefined && caseDefinitionKey !== null) {
            queryParameters = queryParameters.set('caseDefinitionKey', <any>caseDefinitionKey);
        }
        if (caseDefinitionName !== undefined && caseDefinitionName !== null) {
            queryParameters = queryParameters.set('caseDefinitionName', <any>caseDefinitionName);
        }
        if (caseDefinitionNameLike !== undefined && caseDefinitionNameLike !== null) {
            queryParameters = queryParameters.set('caseDefinitionNameLike', <any>caseDefinitionNameLike);
        }
        if (caseExecutionId !== undefined && caseExecutionId !== null) {
            queryParameters = queryParameters.set('caseExecutionId', <any>caseExecutionId);
        }
        if (activityInstanceIdIn !== undefined && activityInstanceIdIn !== null) {
            queryParameters = queryParameters.set('activityInstanceIdIn', <any>activityInstanceIdIn);
        }
        if (tenantIdIn !== undefined && tenantIdIn !== null) {
            queryParameters = queryParameters.set('tenantIdIn', <any>tenantIdIn);
        }
        if (withoutTenantId !== undefined && withoutTenantId !== null) {
            queryParameters = queryParameters.set('withoutTenantId', <any>withoutTenantId);
        }
        if (assignee !== undefined && assignee !== null) {
            queryParameters = queryParameters.set('assignee', <any>assignee);
        }
        if (assigneeExpression !== undefined && assigneeExpression !== null) {
            queryParameters = queryParameters.set('assigneeExpression', <any>assigneeExpression);
        }
        if (assigneeLike !== undefined && assigneeLike !== null) {
            queryParameters = queryParameters.set('assigneeLike', <any>assigneeLike);
        }
        if (assigneeLikeExpression !== undefined && assigneeLikeExpression !== null) {
            queryParameters = queryParameters.set('assigneeLikeExpression', <any>assigneeLikeExpression);
        }
        if (assigneeIn !== undefined && assigneeIn !== null) {
            queryParameters = queryParameters.set('assigneeIn', <any>assigneeIn);
        }
        if (assigneeNotIn !== undefined && assigneeNotIn !== null) {
            queryParameters = queryParameters.set('assigneeNotIn', <any>assigneeNotIn);
        }
        if (owner !== undefined && owner !== null) {
            queryParameters = queryParameters.set('owner', <any>owner);
        }
        if (ownerExpression !== undefined && ownerExpression !== null) {
            queryParameters = queryParameters.set('ownerExpression', <any>ownerExpression);
        }
        if (candidateGroup !== undefined && candidateGroup !== null) {
            queryParameters = queryParameters.set('candidateGroup', <any>candidateGroup);
        }
        if (candidateGroupExpression !== undefined && candidateGroupExpression !== null) {
            queryParameters = queryParameters.set('candidateGroupExpression', <any>candidateGroupExpression);
        }
        if (candidateUser !== undefined && candidateUser !== null) {
            queryParameters = queryParameters.set('candidateUser', <any>candidateUser);
        }
        if (candidateUserExpression !== undefined && candidateUserExpression !== null) {
            queryParameters = queryParameters.set('candidateUserExpression', <any>candidateUserExpression);
        }
        if (includeAssignedTasks !== undefined && includeAssignedTasks !== null) {
            queryParameters = queryParameters.set('includeAssignedTasks', <any>includeAssignedTasks);
        }
        if (involvedUser !== undefined && involvedUser !== null) {
            queryParameters = queryParameters.set('involvedUser', <any>involvedUser);
        }
        if (involvedUserExpression !== undefined && involvedUserExpression !== null) {
            queryParameters = queryParameters.set('involvedUserExpression', <any>involvedUserExpression);
        }
        if (assigned !== undefined && assigned !== null) {
            queryParameters = queryParameters.set('assigned', <any>assigned);
        }
        if (unassigned !== undefined && unassigned !== null) {
            queryParameters = queryParameters.set('unassigned', <any>unassigned);
        }
        if (taskDefinitionKey !== undefined && taskDefinitionKey !== null) {
            queryParameters = queryParameters.set('taskDefinitionKey', <any>taskDefinitionKey);
        }
        if (taskDefinitionKeyIn !== undefined && taskDefinitionKeyIn !== null) {
            queryParameters = queryParameters.set('taskDefinitionKeyIn', <any>taskDefinitionKeyIn);
        }
        if (taskDefinitionKeyLike !== undefined && taskDefinitionKeyLike !== null) {
            queryParameters = queryParameters.set('taskDefinitionKeyLike', <any>taskDefinitionKeyLike);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (nameNotEqual !== undefined && nameNotEqual !== null) {
            queryParameters = queryParameters.set('nameNotEqual', <any>nameNotEqual);
        }
        if (nameLike !== undefined && nameLike !== null) {
            queryParameters = queryParameters.set('nameLike', <any>nameLike);
        }
        if (nameNotLike !== undefined && nameNotLike !== null) {
            queryParameters = queryParameters.set('nameNotLike', <any>nameNotLike);
        }
        if (description !== undefined && description !== null) {
            queryParameters = queryParameters.set('description', <any>description);
        }
        if (descriptionLike !== undefined && descriptionLike !== null) {
            queryParameters = queryParameters.set('descriptionLike', <any>descriptionLike);
        }
        if (priority !== undefined && priority !== null) {
            queryParameters = queryParameters.set('priority', <any>priority);
        }
        if (maxPriority !== undefined && maxPriority !== null) {
            queryParameters = queryParameters.set('maxPriority', <any>maxPriority);
        }
        if (minPriority !== undefined && minPriority !== null) {
            queryParameters = queryParameters.set('minPriority', <any>minPriority);
        }
        if (dueDate !== undefined && dueDate !== null) {
            queryParameters = queryParameters.set('dueDate', <any>dueDate);
        }
        if (dueDateExpression !== undefined && dueDateExpression !== null) {
            queryParameters = queryParameters.set('dueDateExpression', <any>dueDateExpression);
        }
        if (dueAfter !== undefined && dueAfter !== null) {
            queryParameters = queryParameters.set('dueAfter', <any>dueAfter);
        }
        if (dueAfterExpression !== undefined && dueAfterExpression !== null) {
            queryParameters = queryParameters.set('dueAfterExpression', <any>dueAfterExpression);
        }
        if (dueBefore !== undefined && dueBefore !== null) {
            queryParameters = queryParameters.set('dueBefore', <any>dueBefore);
        }
        if (dueBeforeExpression !== undefined && dueBeforeExpression !== null) {
            queryParameters = queryParameters.set('dueBeforeExpression', <any>dueBeforeExpression);
        }
        if (withoutDueDate !== undefined && withoutDueDate !== null) {
            queryParameters = queryParameters.set('withoutDueDate', <any>withoutDueDate);
        }
        if (followUpDate !== undefined && followUpDate !== null) {
            queryParameters = queryParameters.set('followUpDate', <any>followUpDate);
        }
        if (followUpDateExpression !== undefined && followUpDateExpression !== null) {
            queryParameters = queryParameters.set('followUpDateExpression', <any>followUpDateExpression);
        }
        if (followUpAfter !== undefined && followUpAfter !== null) {
            queryParameters = queryParameters.set('followUpAfter', <any>followUpAfter);
        }
        if (followUpAfterExpression !== undefined && followUpAfterExpression !== null) {
            queryParameters = queryParameters.set('followUpAfterExpression', <any>followUpAfterExpression);
        }
        if (followUpBefore !== undefined && followUpBefore !== null) {
            queryParameters = queryParameters.set('followUpBefore', <any>followUpBefore);
        }
        if (followUpBeforeExpression !== undefined && followUpBeforeExpression !== null) {
            queryParameters = queryParameters.set('followUpBeforeExpression', <any>followUpBeforeExpression);
        }
        if (followUpBeforeOrNotExistent !== undefined && followUpBeforeOrNotExistent !== null) {
            queryParameters = queryParameters.set('followUpBeforeOrNotExistent', <any>followUpBeforeOrNotExistent);
        }
        if (followUpBeforeOrNotExistentExpression !== undefined && followUpBeforeOrNotExistentExpression !== null) {
            queryParameters = queryParameters.set('followUpBeforeOrNotExistentExpression', <any>followUpBeforeOrNotExistentExpression);
        }
        if (createdOn !== undefined && createdOn !== null) {
            queryParameters = queryParameters.set('createdOn', <any>createdOn);
        }
        if (createdOnExpression !== undefined && createdOnExpression !== null) {
            queryParameters = queryParameters.set('createdOnExpression', <any>createdOnExpression);
        }
        if (createdAfter !== undefined && createdAfter !== null) {
            queryParameters = queryParameters.set('createdAfter', <any>createdAfter);
        }
        if (createdAfterExpression !== undefined && createdAfterExpression !== null) {
            queryParameters = queryParameters.set('createdAfterExpression', <any>createdAfterExpression);
        }
        if (createdBefore !== undefined && createdBefore !== null) {
            queryParameters = queryParameters.set('createdBefore', <any>createdBefore);
        }
        if (createdBeforeExpression !== undefined && createdBeforeExpression !== null) {
            queryParameters = queryParameters.set('createdBeforeExpression', <any>createdBeforeExpression);
        }
        if (updatedAfter !== undefined && updatedAfter !== null) {
            queryParameters = queryParameters.set('updatedAfter', <any>updatedAfter);
        }
        if (updatedAfterExpression !== undefined && updatedAfterExpression !== null) {
            queryParameters = queryParameters.set('updatedAfterExpression', <any>updatedAfterExpression);
        }
        if (delegationState !== undefined && delegationState !== null) {
            queryParameters = queryParameters.set('delegationState', <any>delegationState);
        }
        if (candidateGroups !== undefined && candidateGroups !== null) {
            queryParameters = queryParameters.set('candidateGroups', <any>candidateGroups);
        }
        if (candidateGroupsExpression !== undefined && candidateGroupsExpression !== null) {
            queryParameters = queryParameters.set('candidateGroupsExpression', <any>candidateGroupsExpression);
        }
        if (withCandidateGroups !== undefined && withCandidateGroups !== null) {
            queryParameters = queryParameters.set('withCandidateGroups', <any>withCandidateGroups);
        }
        if (withoutCandidateGroups !== undefined && withoutCandidateGroups !== null) {
            queryParameters = queryParameters.set('withoutCandidateGroups', <any>withoutCandidateGroups);
        }
        if (withCandidateUsers !== undefined && withCandidateUsers !== null) {
            queryParameters = queryParameters.set('withCandidateUsers', <any>withCandidateUsers);
        }
        if (withoutCandidateUsers !== undefined && withoutCandidateUsers !== null) {
            queryParameters = queryParameters.set('withoutCandidateUsers', <any>withoutCandidateUsers);
        }
        if (active !== undefined && active !== null) {
            queryParameters = queryParameters.set('active', <any>active);
        }
        if (suspended !== undefined && suspended !== null) {
            queryParameters = queryParameters.set('suspended', <any>suspended);
        }
        if (taskVariables !== undefined && taskVariables !== null) {
            queryParameters = queryParameters.set('taskVariables', <any>taskVariables);
        }
        if (processVariables !== undefined && processVariables !== null) {
            queryParameters = queryParameters.set('processVariables', <any>processVariables);
        }
        if (caseInstanceVariables !== undefined && caseInstanceVariables !== null) {
            queryParameters = queryParameters.set('caseInstanceVariables', <any>caseInstanceVariables);
        }
        if (variableNamesIgnoreCase !== undefined && variableNamesIgnoreCase !== null) {
            queryParameters = queryParameters.set('variableNamesIgnoreCase', <any>variableNamesIgnoreCase);
        }
        if (variableValuesIgnoreCase !== undefined && variableValuesIgnoreCase !== null) {
            queryParameters = queryParameters.set('variableValuesIgnoreCase', <any>variableValuesIgnoreCase);
        }
        if (parentTaskId !== undefined && parentTaskId !== null) {
            queryParameters = queryParameters.set('parentTaskId', <any>parentTaskId);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CountResultDto>('get',`${this.basePath}/task/count`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Handle BPMN Error
     * Reports a business error in the context of a running task by id. The error code must be specified to identify the BPMN error handler. See the documentation for [Reporting Bpmn Error](https://docs.camunda.org/manual/7.19/reference/bpmn20/tasks/user-task/#reporting-bpmn-error) in User Tasks.
     * @param id The id of the task a BPMN error is reported for.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public handleBpmnError(id: string, body?: TaskBpmnErrorDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public handleBpmnError(id: string, body?: TaskBpmnErrorDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public handleBpmnError(id: string, body?: TaskBpmnErrorDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public handleBpmnError(id: string, body?: TaskBpmnErrorDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling handleBpmnError.');
        }


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/task/${encodeURIComponent(String(id))}/bpmnError`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Handle BPMN Escalation
     * Reports an escalation in the context of a running task by id. The escalation code must be specified to identify the escalation handler. See the documentation for [Reporting Bpmn Escalation](https://docs.camunda.org/manual/7.19/reference/bpmn20/tasks/user-task/#reporting-bpmn-escalation) in User Tasks.
     * @param id The id of the task in which context a BPMN escalation is reported.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public handleEscalation(id: string, body?: TaskEscalationDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public handleEscalation(id: string, body?: TaskEscalationDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public handleEscalation(id: string, body?: TaskEscalationDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public handleEscalation(id: string, body?: TaskEscalationDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling handleEscalation.');
        }


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/task/${encodeURIComponent(String(id))}/bpmnEscalation`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get List (POST)
     * Queries for tasks that fulfill a given filter. This method is slightly more powerful than the [Get Tasks](https://docs.camunda.org/manual/7.19/reference/rest/task/get-query/) method because it allows filtering by multiple process or task variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;. The size of the result set can be retrieved by using the [Get Task Count (POST)](https://docs.camunda.org/manual/7.19/reference/rest/task/post-query-count/) method.  **Security Consideration**: There are several parameters (such as &#x60;assigneeExpression&#x60;) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.19/user-guide/process-engine/securing-custom-code/) in the user guide for details.
     * @param body 
     * @param firstResult Pagination of results. Specifies the index of the first result to return.
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public queryTasks(body?: TaskQueryDto, firstResult?: number, maxResults?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TaskDto>>;
    public queryTasks(body?: TaskQueryDto, firstResult?: number, maxResults?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TaskDto>>>;
    public queryTasks(body?: TaskQueryDto, firstResult?: number, maxResults?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TaskDto>>>;
    public queryTasks(body?: TaskQueryDto, firstResult?: number, maxResults?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (firstResult !== undefined && firstResult !== null) {
            queryParameters = queryParameters.set('firstResult', <any>firstResult);
        }
        if (maxResults !== undefined && maxResults !== null) {
            queryParameters = queryParameters.set('maxResults', <any>maxResults);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<TaskDto>>('post',`${this.basePath}/task`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get List Count (POST)
     * Retrieves the number of tasks that fulfill the given filter. Corresponds to the size of the result set of the [Get Tasks (POST)](https://docs.camunda.org/manual/7.19/reference/rest/task/post-query/) method and takes the same parameters.  **Security Consideration**: There are several parameters (such as &#x60;assigneeExpression&#x60;) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.19/user-guide/process-engine/securing-custom-code/) in the user guide for details.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public queryTasksCount(body?: TaskQueryDto, observe?: 'body', reportProgress?: boolean): Observable<CountResultDto>;
    public queryTasksCount(body?: TaskQueryDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CountResultDto>>;
    public queryTasksCount(body?: TaskQueryDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CountResultDto>>;
    public queryTasksCount(body?: TaskQueryDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CountResultDto>('post',`${this.basePath}/task/count`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Resolve
     * Resolves a task and updates execution variables.  Resolving a task marks that the assignee is done with the task delegated to them, and that it can be sent back to the owner. Can only be executed when the task has been delegated. The assignee will be set to the owner, who performed the delegation.
     * @param id The id of the task to resolve.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public resolve(id: string, body?: CompleteTaskDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public resolve(id: string, body?: CompleteTaskDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public resolve(id: string, body?: CompleteTaskDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public resolve(id: string, body?: CompleteTaskDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling resolve.');
        }


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/task/${encodeURIComponent(String(id))}/resolve`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Set Assignee
     * Changes the assignee of a task to a specific user.  **Note:** The difference with the [Claim Task](https://docs.camunda.org/manual/7.19/reference/rest/task/post-claim/) method is that this method does not check if the task already has a user assigned to it.
     * @param id The id of the task to set the assignee for.
     * @param body Provide the id of the user that will be the assignee of the task.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setAssignee(id: string, body?: UserIdDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setAssignee(id: string, body?: UserIdDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setAssignee(id: string, body?: UserIdDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setAssignee(id: string, body?: UserIdDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling setAssignee.');
        }


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/task/${encodeURIComponent(String(id))}/assignee`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Submit Form
     * Completes a task and updates process variables using a form submit. There are two difference between this method and the &#x60;complete&#x60; method:  * If the task is in state &#x60;PENDING&#x60; - i.e., has been delegated before, it is not completed but resolved. Otherwise it will be completed. * If the task has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See the [Generated Task Forms](https://docs.camunda.org/manual/7.19/user-guide/task-forms/_index/#generated-task-forms) section of the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/) for more information.
     * @param id The id of the task to submit the form for.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public submit(id: string, body?: CompleteTaskDto, observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: VariableValueDto; }>;
    public submit(id: string, body?: CompleteTaskDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: VariableValueDto; }>>;
    public submit(id: string, body?: CompleteTaskDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: VariableValueDto; }>>;
    public submit(id: string, body?: CompleteTaskDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling submit.');
        }


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<{ [key: string]: VariableValueDto; }>('post',`${this.basePath}/task/${encodeURIComponent(String(id))}/submit-form`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Unclaim
     * Resets a task&#x27;s assignee. If successful, the task is not assigned to a user.
     * @param id The id of the task to unclaim.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public unclaim(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public unclaim(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public unclaim(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public unclaim(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling unclaim.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/task/${encodeURIComponent(String(id))}/unclaim`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update
     * Updates a task.
     * @param id The id of the task to be updated.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTask(id: string, body?: TaskDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateTask(id: string, body?: TaskDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateTask(id: string, body?: TaskDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateTask(id: string, body?: TaskDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateTask.');
        }


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/task/${encodeURIComponent(String(id))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
