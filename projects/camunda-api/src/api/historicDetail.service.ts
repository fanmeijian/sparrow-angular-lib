/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.19.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CountResultDto } from '../model/countResultDto';
import { ExceptionDto } from '../model/exceptionDto';
import { HistoricDetailDto } from '../model/historicDetailDto';
import { HistoricDetailQueryDto } from '../model/historicDetailQueryDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class HistoricDetailService {

    protected basePath = 'http://{host}:{port}/{contextPath}';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get Historic Details
     * Queries for historic details that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Historic Detail Count](https://docs.camunda.org/manual/7.19/reference/rest/history/detail/get-detail-query-count/) method.
     * @param processInstanceId Filter by process instance id.
     * @param processInstanceIdIn Only include historic details which belong to one of the passed comma-separated process instance ids.
     * @param executionId Filter by execution id.
     * @param taskId Filter by task id.
     * @param activityInstanceId Filter by activity instance id.
     * @param caseInstanceId Filter by case instance id.
     * @param caseExecutionId Filter by case execution id.
     * @param variableInstanceId Filter by variable instance id.
     * @param variableTypeIn Only include historic details where the variable updates belong to one of the passed comma-separated list of variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.19/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x60;serializable&#x60;.
     * @param tenantIdIn Filter by a comma-separated list of tenant ids.
     * @param withoutTenantId Only include historic details that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param userOperationId Filter by a user operation id.
     * @param formFields Only include &#x60;HistoricFormFields&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param variableUpdates Only include &#x60;HistoricVariableUpdates&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param excludeTaskDetails Excludes all task-related &#x60;HistoricDetails&#x60;, so only items which have no task id set will be selected. When this parameter is used together with &#x60;taskId&#x60;, this call is ignored and task details are not excluded. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param initial Restrict to historic variable updates that contain only initial variable values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param occurredBefore Restrict to historic details that occured before the given date (including the date). Default [format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.
     * @param occurredAfter Restrict to historic details that occured after the given date (including the date). Default [format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param firstResult Pagination of results. Specifies the index of the first result to return.
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param deserializeValues Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHistoricDetails(processInstanceId?: string, processInstanceIdIn?: string, executionId?: string, taskId?: string, activityInstanceId?: string, caseInstanceId?: string, caseExecutionId?: string, variableInstanceId?: string, variableTypeIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, userOperationId?: string, formFields?: boolean, variableUpdates?: boolean, excludeTaskDetails?: boolean, initial?: boolean, occurredBefore?: Date, occurredAfter?: Date, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, deserializeValues?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<HistoricDetailDto>>;
    public getHistoricDetails(processInstanceId?: string, processInstanceIdIn?: string, executionId?: string, taskId?: string, activityInstanceId?: string, caseInstanceId?: string, caseExecutionId?: string, variableInstanceId?: string, variableTypeIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, userOperationId?: string, formFields?: boolean, variableUpdates?: boolean, excludeTaskDetails?: boolean, initial?: boolean, occurredBefore?: Date, occurredAfter?: Date, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, deserializeValues?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<HistoricDetailDto>>>;
    public getHistoricDetails(processInstanceId?: string, processInstanceIdIn?: string, executionId?: string, taskId?: string, activityInstanceId?: string, caseInstanceId?: string, caseExecutionId?: string, variableInstanceId?: string, variableTypeIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, userOperationId?: string, formFields?: boolean, variableUpdates?: boolean, excludeTaskDetails?: boolean, initial?: boolean, occurredBefore?: Date, occurredAfter?: Date, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, deserializeValues?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<HistoricDetailDto>>>;
    public getHistoricDetails(processInstanceId?: string, processInstanceIdIn?: string, executionId?: string, taskId?: string, activityInstanceId?: string, caseInstanceId?: string, caseExecutionId?: string, variableInstanceId?: string, variableTypeIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, userOperationId?: string, formFields?: boolean, variableUpdates?: boolean, excludeTaskDetails?: boolean, initial?: boolean, occurredBefore?: Date, occurredAfter?: Date, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, deserializeValues?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
























        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (processInstanceId !== undefined && processInstanceId !== null) {
            queryParameters = queryParameters.set('processInstanceId', <any>processInstanceId);
        }
        if (processInstanceIdIn !== undefined && processInstanceIdIn !== null) {
            queryParameters = queryParameters.set('processInstanceIdIn', <any>processInstanceIdIn);
        }
        if (executionId !== undefined && executionId !== null) {
            queryParameters = queryParameters.set('executionId', <any>executionId);
        }
        if (taskId !== undefined && taskId !== null) {
            queryParameters = queryParameters.set('taskId', <any>taskId);
        }
        if (activityInstanceId !== undefined && activityInstanceId !== null) {
            queryParameters = queryParameters.set('activityInstanceId', <any>activityInstanceId);
        }
        if (caseInstanceId !== undefined && caseInstanceId !== null) {
            queryParameters = queryParameters.set('caseInstanceId', <any>caseInstanceId);
        }
        if (caseExecutionId !== undefined && caseExecutionId !== null) {
            queryParameters = queryParameters.set('caseExecutionId', <any>caseExecutionId);
        }
        if (variableInstanceId !== undefined && variableInstanceId !== null) {
            queryParameters = queryParameters.set('variableInstanceId', <any>variableInstanceId);
        }
        if (variableTypeIn !== undefined && variableTypeIn !== null) {
            queryParameters = queryParameters.set('variableTypeIn', <any>variableTypeIn);
        }
        if (tenantIdIn !== undefined && tenantIdIn !== null) {
            queryParameters = queryParameters.set('tenantIdIn', <any>tenantIdIn);
        }
        if (withoutTenantId !== undefined && withoutTenantId !== null) {
            queryParameters = queryParameters.set('withoutTenantId', <any>withoutTenantId);
        }
        if (userOperationId !== undefined && userOperationId !== null) {
            queryParameters = queryParameters.set('userOperationId', <any>userOperationId);
        }
        if (formFields !== undefined && formFields !== null) {
            queryParameters = queryParameters.set('formFields', <any>formFields);
        }
        if (variableUpdates !== undefined && variableUpdates !== null) {
            queryParameters = queryParameters.set('variableUpdates', <any>variableUpdates);
        }
        if (excludeTaskDetails !== undefined && excludeTaskDetails !== null) {
            queryParameters = queryParameters.set('excludeTaskDetails', <any>excludeTaskDetails);
        }
        if (initial !== undefined && initial !== null) {
            queryParameters = queryParameters.set('initial', <any>initial);
        }
        if (occurredBefore !== undefined && occurredBefore !== null) {
            queryParameters = queryParameters.set('occurredBefore', <any>occurredBefore.toISOString());
        }
        if (occurredAfter !== undefined && occurredAfter !== null) {
            queryParameters = queryParameters.set('occurredAfter', <any>occurredAfter.toISOString());
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (sortOrder !== undefined && sortOrder !== null) {
            queryParameters = queryParameters.set('sortOrder', <any>sortOrder);
        }
        if (firstResult !== undefined && firstResult !== null) {
            queryParameters = queryParameters.set('firstResult', <any>firstResult);
        }
        if (maxResults !== undefined && maxResults !== null) {
            queryParameters = queryParameters.set('maxResults', <any>maxResults);
        }
        if (deserializeValues !== undefined && deserializeValues !== null) {
            queryParameters = queryParameters.set('deserializeValues', <any>deserializeValues);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<HistoricDetailDto>>('get',`${this.basePath}/history/detail`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Historic Detail Count
     * Queries for the number of historic details that fulfill the given parameters. Takes the same parameters as the [Get Historic Details](https://docs.camunda.org/manual/7.19/reference/rest/history/detail/get-detail-query/) method.
     * @param processInstanceId Filter by process instance id.
     * @param processInstanceIdIn Only include historic details which belong to one of the passed comma-separated process instance ids.
     * @param executionId Filter by execution id.
     * @param taskId Filter by task id.
     * @param activityInstanceId Filter by activity instance id.
     * @param caseInstanceId Filter by case instance id.
     * @param caseExecutionId Filter by case execution id.
     * @param variableInstanceId Filter by variable instance id.
     * @param variableTypeIn Only include historic details where the variable updates belong to one of the passed comma-separated list of variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.19/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x60;serializable&#x60;.
     * @param tenantIdIn Filter by a comma-separated list of tenant ids.
     * @param withoutTenantId Only include historic details that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param userOperationId Filter by a user operation id.
     * @param formFields Only include &#x60;HistoricFormFields&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param variableUpdates Only include &#x60;HistoricVariableUpdates&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param excludeTaskDetails Excludes all task-related &#x60;HistoricDetails&#x60;, so only items which have no task id set will be selected. When this parameter is used together with &#x60;taskId&#x60;, this call is ignored and task details are not excluded. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param initial Restrict to historic variable updates that contain only initial variable values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param occurredBefore Restrict to historic details that occured before the given date (including the date). Default [format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.
     * @param occurredAfter Restrict to historic details that occured after the given date (including the date). Default [format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHistoricDetailsCount(processInstanceId?: string, processInstanceIdIn?: string, executionId?: string, taskId?: string, activityInstanceId?: string, caseInstanceId?: string, caseExecutionId?: string, variableInstanceId?: string, variableTypeIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, userOperationId?: string, formFields?: boolean, variableUpdates?: boolean, excludeTaskDetails?: boolean, initial?: boolean, occurredBefore?: Date, occurredAfter?: Date, observe?: 'body', reportProgress?: boolean): Observable<CountResultDto>;
    public getHistoricDetailsCount(processInstanceId?: string, processInstanceIdIn?: string, executionId?: string, taskId?: string, activityInstanceId?: string, caseInstanceId?: string, caseExecutionId?: string, variableInstanceId?: string, variableTypeIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, userOperationId?: string, formFields?: boolean, variableUpdates?: boolean, excludeTaskDetails?: boolean, initial?: boolean, occurredBefore?: Date, occurredAfter?: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CountResultDto>>;
    public getHistoricDetailsCount(processInstanceId?: string, processInstanceIdIn?: string, executionId?: string, taskId?: string, activityInstanceId?: string, caseInstanceId?: string, caseExecutionId?: string, variableInstanceId?: string, variableTypeIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, userOperationId?: string, formFields?: boolean, variableUpdates?: boolean, excludeTaskDetails?: boolean, initial?: boolean, occurredBefore?: Date, occurredAfter?: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CountResultDto>>;
    public getHistoricDetailsCount(processInstanceId?: string, processInstanceIdIn?: string, executionId?: string, taskId?: string, activityInstanceId?: string, caseInstanceId?: string, caseExecutionId?: string, variableInstanceId?: string, variableTypeIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, userOperationId?: string, formFields?: boolean, variableUpdates?: boolean, excludeTaskDetails?: boolean, initial?: boolean, occurredBefore?: Date, occurredAfter?: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



















        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (processInstanceId !== undefined && processInstanceId !== null) {
            queryParameters = queryParameters.set('processInstanceId', <any>processInstanceId);
        }
        if (processInstanceIdIn !== undefined && processInstanceIdIn !== null) {
            queryParameters = queryParameters.set('processInstanceIdIn', <any>processInstanceIdIn);
        }
        if (executionId !== undefined && executionId !== null) {
            queryParameters = queryParameters.set('executionId', <any>executionId);
        }
        if (taskId !== undefined && taskId !== null) {
            queryParameters = queryParameters.set('taskId', <any>taskId);
        }
        if (activityInstanceId !== undefined && activityInstanceId !== null) {
            queryParameters = queryParameters.set('activityInstanceId', <any>activityInstanceId);
        }
        if (caseInstanceId !== undefined && caseInstanceId !== null) {
            queryParameters = queryParameters.set('caseInstanceId', <any>caseInstanceId);
        }
        if (caseExecutionId !== undefined && caseExecutionId !== null) {
            queryParameters = queryParameters.set('caseExecutionId', <any>caseExecutionId);
        }
        if (variableInstanceId !== undefined && variableInstanceId !== null) {
            queryParameters = queryParameters.set('variableInstanceId', <any>variableInstanceId);
        }
        if (variableTypeIn !== undefined && variableTypeIn !== null) {
            queryParameters = queryParameters.set('variableTypeIn', <any>variableTypeIn);
        }
        if (tenantIdIn !== undefined && tenantIdIn !== null) {
            queryParameters = queryParameters.set('tenantIdIn', <any>tenantIdIn);
        }
        if (withoutTenantId !== undefined && withoutTenantId !== null) {
            queryParameters = queryParameters.set('withoutTenantId', <any>withoutTenantId);
        }
        if (userOperationId !== undefined && userOperationId !== null) {
            queryParameters = queryParameters.set('userOperationId', <any>userOperationId);
        }
        if (formFields !== undefined && formFields !== null) {
            queryParameters = queryParameters.set('formFields', <any>formFields);
        }
        if (variableUpdates !== undefined && variableUpdates !== null) {
            queryParameters = queryParameters.set('variableUpdates', <any>variableUpdates);
        }
        if (excludeTaskDetails !== undefined && excludeTaskDetails !== null) {
            queryParameters = queryParameters.set('excludeTaskDetails', <any>excludeTaskDetails);
        }
        if (initial !== undefined && initial !== null) {
            queryParameters = queryParameters.set('initial', <any>initial);
        }
        if (occurredBefore !== undefined && occurredBefore !== null) {
            queryParameters = queryParameters.set('occurredBefore', <any>occurredBefore.toISOString());
        }
        if (occurredAfter !== undefined && occurredAfter !== null) {
            queryParameters = queryParameters.set('occurredAfter', <any>occurredAfter.toISOString());
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CountResultDto>('get',`${this.basePath}/history/detail/count`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Historic Detail
     * Retrieves a historic detail by id.
     * @param id The id of the detail.
     * @param deserializeValue Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public historicDetail(id: string, deserializeValue?: boolean, observe?: 'body', reportProgress?: boolean): Observable<HistoricDetailDto>;
    public historicDetail(id: string, deserializeValue?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HistoricDetailDto>>;
    public historicDetail(id: string, deserializeValue?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HistoricDetailDto>>;
    public historicDetail(id: string, deserializeValue?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling historicDetail.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (deserializeValue !== undefined && deserializeValue !== null) {
            queryParameters = queryParameters.set('deserializeValue', <any>deserializeValue);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<HistoricDetailDto>('get',`${this.basePath}/history/detail/${encodeURIComponent(String(id))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Historic Detail (Binary)
     * Retrieves the content of a historic variable update by id. Applicable for byte array and file variables.
     * @param id The id of the historic variable update.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public historicDetailBinary(id: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public historicDetailBinary(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public historicDetailBinary(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public historicDetailBinary(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling historicDetailBinary.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream',
            '*/*',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request('get',`${this.basePath}/history/detail/${encodeURIComponent(String(id))}/data`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Historic Details (POST)
     * Queries for historic details that fulfill the given parameters. This method is slightly more powerful than the [Get Historic Details](https://docs.camunda.org/manual/7.19/reference/rest/history/detail/get-detail-query/) method because it allows sorting by multiple parameters. The size of the result set can be retrieved by using the [Get Historic Detail Count](https://docs.camunda.org/manual/7.19/reference/rest/history/detail/get-detail-query-count/) method.
     * @param body 
     * @param firstResult Pagination of results. Specifies the index of the first result to return.
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param deserializeValues Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public queryHistoricDetails(body?: HistoricDetailQueryDto, firstResult?: number, maxResults?: number, deserializeValues?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<HistoricDetailDto>>;
    public queryHistoricDetails(body?: HistoricDetailQueryDto, firstResult?: number, maxResults?: number, deserializeValues?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<HistoricDetailDto>>>;
    public queryHistoricDetails(body?: HistoricDetailQueryDto, firstResult?: number, maxResults?: number, deserializeValues?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<HistoricDetailDto>>>;
    public queryHistoricDetails(body?: HistoricDetailQueryDto, firstResult?: number, maxResults?: number, deserializeValues?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (firstResult !== undefined && firstResult !== null) {
            queryParameters = queryParameters.set('firstResult', <any>firstResult);
        }
        if (maxResults !== undefined && maxResults !== null) {
            queryParameters = queryParameters.set('maxResults', <any>maxResults);
        }
        if (deserializeValues !== undefined && deserializeValues !== null) {
            queryParameters = queryParameters.set('deserializeValues', <any>deserializeValues);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<HistoricDetailDto>>('post',`${this.basePath}/history/detail`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
