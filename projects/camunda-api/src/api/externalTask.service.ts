/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.19.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { BatchDto } from '../model/batchDto';
import { CompleteExternalTaskDto } from '../model/completeExternalTaskDto';
import { CountResultDto } from '../model/countResultDto';
import { ExceptionDto } from '../model/exceptionDto';
import { ExtendLockOnExternalTaskDto } from '../model/extendLockOnExternalTaskDto';
import { ExternalTaskBpmnError } from '../model/externalTaskBpmnError';
import { ExternalTaskDto } from '../model/externalTaskDto';
import { ExternalTaskFailureDto } from '../model/externalTaskFailureDto';
import { ExternalTaskQueryDto } from '../model/externalTaskQueryDto';
import { FetchExternalTasksDto } from '../model/fetchExternalTasksDto';
import { LockExternalTaskDto } from '../model/lockExternalTaskDto';
import { LockedExternalTaskDto } from '../model/lockedExternalTaskDto';
import { PriorityDto } from '../model/priorityDto';
import { RetriesDto } from '../model/retriesDto';
import { SetRetriesForExternalTasksDto } from '../model/setRetriesForExternalTasksDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ExternalTaskService {

    protected basePath = 'http://{host}:{port}/{contextPath}';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Complete
     * Completes an external task by id and updates process variables.
     * @param id The id of the task to complete.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public completeExternalTaskResource(id: string, body?: CompleteExternalTaskDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public completeExternalTaskResource(id: string, body?: CompleteExternalTaskDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public completeExternalTaskResource(id: string, body?: CompleteExternalTaskDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public completeExternalTaskResource(id: string, body?: CompleteExternalTaskDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling completeExternalTaskResource.');
        }


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/external-task/${encodeURIComponent(String(id))}/complete`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Extend Lock
     * Extends the timeout of the lock by a given amount of time.
     * @param id The id of the external task.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public extendLock(id: string, body?: ExtendLockOnExternalTaskDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public extendLock(id: string, body?: ExtendLockOnExternalTaskDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public extendLock(id: string, body?: ExtendLockOnExternalTaskDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public extendLock(id: string, body?: ExtendLockOnExternalTaskDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling extendLock.');
        }


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/external-task/${encodeURIComponent(String(id))}/extendLock`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Fetch and Lock
     * Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted to specific task topics and for each task topic an individual lock time can be provided.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fetchAndLock(body?: FetchExternalTasksDto, observe?: 'body', reportProgress?: boolean): Observable<Array<LockedExternalTaskDto>>;
    public fetchAndLock(body?: FetchExternalTasksDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<LockedExternalTaskDto>>>;
    public fetchAndLock(body?: FetchExternalTasksDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<LockedExternalTaskDto>>>;
    public fetchAndLock(body?: FetchExternalTasksDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<LockedExternalTaskDto>>('post',`${this.basePath}/external-task/fetchAndLock`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get
     * Retrieves an external task by id, corresponding to the &#x60;ExternalTask&#x60; interface in the engine.
     * @param id The id of the external task to be retrieved.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getExternalTask(id: string, observe?: 'body', reportProgress?: boolean): Observable<ExternalTaskDto>;
    public getExternalTask(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ExternalTaskDto>>;
    public getExternalTask(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ExternalTaskDto>>;
    public getExternalTask(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getExternalTask.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ExternalTaskDto>('get',`${this.basePath}/external-task/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Error Details
     * Retrieves the error details in the context of a running external task by id.
     * @param id The id of the external task for which the error details should be retrieved.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getExternalTaskErrorDetails(id: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getExternalTaskErrorDetails(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getExternalTaskErrorDetails(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getExternalTaskErrorDetails(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getExternalTaskErrorDetails.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('get',`${this.basePath}/external-task/${encodeURIComponent(String(id))}/errorDetails`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get List
     * Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the [Get External Task Count](https://docs.camunda.org/manual/7.19/reference/rest/external-task/get-query-count/) method.
     * @param externalTaskId Filter by an external task&#x27;s id.
     * @param externalTaskIdIn Filter by the comma-separated list of external task ids.
     * @param topicName Filter by an external task topic.
     * @param workerId Filter by the id of the worker that the task was most recently locked by.
     * @param locked Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param notLocked Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param withRetriesLeft Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param noRetriesLeft Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param lockExpirationAfter Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param lockExpirationBefore Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param activityId Filter by the id of the activity that an external task is created for.
     * @param activityIdIn Filter by the comma-separated list of ids of the activities that an external task is created for.
     * @param executionId Filter by the id of the execution that an external task belongs to.
     * @param processInstanceId Filter by the id of the process instance that an external task belongs to.
     * @param processInstanceIdIn Filter by a comma-separated list of process instance ids that an external task may belong to.
     * @param processDefinitionId Filter by the id of the process definition that an external task belongs to.
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids.
     * @param active Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param suspended Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param priorityHigherThanOrEquals Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
     * @param priorityLowerThanOrEquals Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param firstResult Pagination of results. Specifies the index of the first result to return.
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getExternalTasks(externalTaskId?: string, externalTaskIdIn?: string, topicName?: string, workerId?: string, locked?: boolean, notLocked?: boolean, withRetriesLeft?: boolean, noRetriesLeft?: boolean, lockExpirationAfter?: Date, lockExpirationBefore?: Date, activityId?: string, activityIdIn?: string, executionId?: string, processInstanceId?: string, processInstanceIdIn?: string, processDefinitionId?: string, tenantIdIn?: string, active?: boolean, suspended?: boolean, priorityHigherThanOrEquals?: number, priorityLowerThanOrEquals?: number, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ExternalTaskDto>>;
    public getExternalTasks(externalTaskId?: string, externalTaskIdIn?: string, topicName?: string, workerId?: string, locked?: boolean, notLocked?: boolean, withRetriesLeft?: boolean, noRetriesLeft?: boolean, lockExpirationAfter?: Date, lockExpirationBefore?: Date, activityId?: string, activityIdIn?: string, executionId?: string, processInstanceId?: string, processInstanceIdIn?: string, processDefinitionId?: string, tenantIdIn?: string, active?: boolean, suspended?: boolean, priorityHigherThanOrEquals?: number, priorityLowerThanOrEquals?: number, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ExternalTaskDto>>>;
    public getExternalTasks(externalTaskId?: string, externalTaskIdIn?: string, topicName?: string, workerId?: string, locked?: boolean, notLocked?: boolean, withRetriesLeft?: boolean, noRetriesLeft?: boolean, lockExpirationAfter?: Date, lockExpirationBefore?: Date, activityId?: string, activityIdIn?: string, executionId?: string, processInstanceId?: string, processInstanceIdIn?: string, processDefinitionId?: string, tenantIdIn?: string, active?: boolean, suspended?: boolean, priorityHigherThanOrEquals?: number, priorityLowerThanOrEquals?: number, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ExternalTaskDto>>>;
    public getExternalTasks(externalTaskId?: string, externalTaskIdIn?: string, topicName?: string, workerId?: string, locked?: boolean, notLocked?: boolean, withRetriesLeft?: boolean, noRetriesLeft?: boolean, lockExpirationAfter?: Date, lockExpirationBefore?: Date, activityId?: string, activityIdIn?: string, executionId?: string, processInstanceId?: string, processInstanceIdIn?: string, processDefinitionId?: string, tenantIdIn?: string, active?: boolean, suspended?: boolean, priorityHigherThanOrEquals?: number, priorityLowerThanOrEquals?: number, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


























        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (externalTaskId !== undefined && externalTaskId !== null) {
            queryParameters = queryParameters.set('externalTaskId', <any>externalTaskId);
        }
        if (externalTaskIdIn !== undefined && externalTaskIdIn !== null) {
            queryParameters = queryParameters.set('externalTaskIdIn', <any>externalTaskIdIn);
        }
        if (topicName !== undefined && topicName !== null) {
            queryParameters = queryParameters.set('topicName', <any>topicName);
        }
        if (workerId !== undefined && workerId !== null) {
            queryParameters = queryParameters.set('workerId', <any>workerId);
        }
        if (locked !== undefined && locked !== null) {
            queryParameters = queryParameters.set('locked', <any>locked);
        }
        if (notLocked !== undefined && notLocked !== null) {
            queryParameters = queryParameters.set('notLocked', <any>notLocked);
        }
        if (withRetriesLeft !== undefined && withRetriesLeft !== null) {
            queryParameters = queryParameters.set('withRetriesLeft', <any>withRetriesLeft);
        }
        if (noRetriesLeft !== undefined && noRetriesLeft !== null) {
            queryParameters = queryParameters.set('noRetriesLeft', <any>noRetriesLeft);
        }
        if (lockExpirationAfter !== undefined && lockExpirationAfter !== null) {
            queryParameters = queryParameters.set('lockExpirationAfter', <any>lockExpirationAfter.toISOString());
        }
        if (lockExpirationBefore !== undefined && lockExpirationBefore !== null) {
            queryParameters = queryParameters.set('lockExpirationBefore', <any>lockExpirationBefore.toISOString());
        }
        if (activityId !== undefined && activityId !== null) {
            queryParameters = queryParameters.set('activityId', <any>activityId);
        }
        if (activityIdIn !== undefined && activityIdIn !== null) {
            queryParameters = queryParameters.set('activityIdIn', <any>activityIdIn);
        }
        if (executionId !== undefined && executionId !== null) {
            queryParameters = queryParameters.set('executionId', <any>executionId);
        }
        if (processInstanceId !== undefined && processInstanceId !== null) {
            queryParameters = queryParameters.set('processInstanceId', <any>processInstanceId);
        }
        if (processInstanceIdIn !== undefined && processInstanceIdIn !== null) {
            queryParameters = queryParameters.set('processInstanceIdIn', <any>processInstanceIdIn);
        }
        if (processDefinitionId !== undefined && processDefinitionId !== null) {
            queryParameters = queryParameters.set('processDefinitionId', <any>processDefinitionId);
        }
        if (tenantIdIn !== undefined && tenantIdIn !== null) {
            queryParameters = queryParameters.set('tenantIdIn', <any>tenantIdIn);
        }
        if (active !== undefined && active !== null) {
            queryParameters = queryParameters.set('active', <any>active);
        }
        if (suspended !== undefined && suspended !== null) {
            queryParameters = queryParameters.set('suspended', <any>suspended);
        }
        if (priorityHigherThanOrEquals !== undefined && priorityHigherThanOrEquals !== null) {
            queryParameters = queryParameters.set('priorityHigherThanOrEquals', <any>priorityHigherThanOrEquals);
        }
        if (priorityLowerThanOrEquals !== undefined && priorityLowerThanOrEquals !== null) {
            queryParameters = queryParameters.set('priorityLowerThanOrEquals', <any>priorityLowerThanOrEquals);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (sortOrder !== undefined && sortOrder !== null) {
            queryParameters = queryParameters.set('sortOrder', <any>sortOrder);
        }
        if (firstResult !== undefined && firstResult !== null) {
            queryParameters = queryParameters.set('firstResult', <any>firstResult);
        }
        if (maxResults !== undefined && maxResults !== null) {
            queryParameters = queryParameters.set('maxResults', <any>maxResults);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<ExternalTaskDto>>('get',`${this.basePath}/external-task`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get List Count
     * Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the [Get External Tasks](https://docs.camunda.org/manual/7.19/reference/rest/external-task/get-query/) method.
     * @param externalTaskId Filter by an external task&#x27;s id.
     * @param externalTaskIdIn Filter by the comma-separated list of external task ids.
     * @param topicName Filter by an external task topic.
     * @param workerId Filter by the id of the worker that the task was most recently locked by.
     * @param locked Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param notLocked Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param withRetriesLeft Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param noRetriesLeft Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param lockExpirationAfter Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param lockExpirationBefore Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param activityId Filter by the id of the activity that an external task is created for.
     * @param activityIdIn Filter by the comma-separated list of ids of the activities that an external task is created for.
     * @param executionId Filter by the id of the execution that an external task belongs to.
     * @param processInstanceId Filter by the id of the process instance that an external task belongs to.
     * @param processInstanceIdIn Filter by a comma-separated list of process instance ids that an external task may belong to.
     * @param processDefinitionId Filter by the id of the process definition that an external task belongs to.
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids.
     * @param active Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param suspended Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param priorityHigherThanOrEquals Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
     * @param priorityLowerThanOrEquals Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getExternalTasksCount(externalTaskId?: string, externalTaskIdIn?: string, topicName?: string, workerId?: string, locked?: boolean, notLocked?: boolean, withRetriesLeft?: boolean, noRetriesLeft?: boolean, lockExpirationAfter?: Date, lockExpirationBefore?: Date, activityId?: string, activityIdIn?: string, executionId?: string, processInstanceId?: string, processInstanceIdIn?: string, processDefinitionId?: string, tenantIdIn?: string, active?: boolean, suspended?: boolean, priorityHigherThanOrEquals?: number, priorityLowerThanOrEquals?: number, observe?: 'body', reportProgress?: boolean): Observable<CountResultDto>;
    public getExternalTasksCount(externalTaskId?: string, externalTaskIdIn?: string, topicName?: string, workerId?: string, locked?: boolean, notLocked?: boolean, withRetriesLeft?: boolean, noRetriesLeft?: boolean, lockExpirationAfter?: Date, lockExpirationBefore?: Date, activityId?: string, activityIdIn?: string, executionId?: string, processInstanceId?: string, processInstanceIdIn?: string, processDefinitionId?: string, tenantIdIn?: string, active?: boolean, suspended?: boolean, priorityHigherThanOrEquals?: number, priorityLowerThanOrEquals?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CountResultDto>>;
    public getExternalTasksCount(externalTaskId?: string, externalTaskIdIn?: string, topicName?: string, workerId?: string, locked?: boolean, notLocked?: boolean, withRetriesLeft?: boolean, noRetriesLeft?: boolean, lockExpirationAfter?: Date, lockExpirationBefore?: Date, activityId?: string, activityIdIn?: string, executionId?: string, processInstanceId?: string, processInstanceIdIn?: string, processDefinitionId?: string, tenantIdIn?: string, active?: boolean, suspended?: boolean, priorityHigherThanOrEquals?: number, priorityLowerThanOrEquals?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CountResultDto>>;
    public getExternalTasksCount(externalTaskId?: string, externalTaskIdIn?: string, topicName?: string, workerId?: string, locked?: boolean, notLocked?: boolean, withRetriesLeft?: boolean, noRetriesLeft?: boolean, lockExpirationAfter?: Date, lockExpirationBefore?: Date, activityId?: string, activityIdIn?: string, executionId?: string, processInstanceId?: string, processInstanceIdIn?: string, processDefinitionId?: string, tenantIdIn?: string, active?: boolean, suspended?: boolean, priorityHigherThanOrEquals?: number, priorityLowerThanOrEquals?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






















        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (externalTaskId !== undefined && externalTaskId !== null) {
            queryParameters = queryParameters.set('externalTaskId', <any>externalTaskId);
        }
        if (externalTaskIdIn !== undefined && externalTaskIdIn !== null) {
            queryParameters = queryParameters.set('externalTaskIdIn', <any>externalTaskIdIn);
        }
        if (topicName !== undefined && topicName !== null) {
            queryParameters = queryParameters.set('topicName', <any>topicName);
        }
        if (workerId !== undefined && workerId !== null) {
            queryParameters = queryParameters.set('workerId', <any>workerId);
        }
        if (locked !== undefined && locked !== null) {
            queryParameters = queryParameters.set('locked', <any>locked);
        }
        if (notLocked !== undefined && notLocked !== null) {
            queryParameters = queryParameters.set('notLocked', <any>notLocked);
        }
        if (withRetriesLeft !== undefined && withRetriesLeft !== null) {
            queryParameters = queryParameters.set('withRetriesLeft', <any>withRetriesLeft);
        }
        if (noRetriesLeft !== undefined && noRetriesLeft !== null) {
            queryParameters = queryParameters.set('noRetriesLeft', <any>noRetriesLeft);
        }
        if (lockExpirationAfter !== undefined && lockExpirationAfter !== null) {
            queryParameters = queryParameters.set('lockExpirationAfter', <any>lockExpirationAfter.toISOString());
        }
        if (lockExpirationBefore !== undefined && lockExpirationBefore !== null) {
            queryParameters = queryParameters.set('lockExpirationBefore', <any>lockExpirationBefore.toISOString());
        }
        if (activityId !== undefined && activityId !== null) {
            queryParameters = queryParameters.set('activityId', <any>activityId);
        }
        if (activityIdIn !== undefined && activityIdIn !== null) {
            queryParameters = queryParameters.set('activityIdIn', <any>activityIdIn);
        }
        if (executionId !== undefined && executionId !== null) {
            queryParameters = queryParameters.set('executionId', <any>executionId);
        }
        if (processInstanceId !== undefined && processInstanceId !== null) {
            queryParameters = queryParameters.set('processInstanceId', <any>processInstanceId);
        }
        if (processInstanceIdIn !== undefined && processInstanceIdIn !== null) {
            queryParameters = queryParameters.set('processInstanceIdIn', <any>processInstanceIdIn);
        }
        if (processDefinitionId !== undefined && processDefinitionId !== null) {
            queryParameters = queryParameters.set('processDefinitionId', <any>processDefinitionId);
        }
        if (tenantIdIn !== undefined && tenantIdIn !== null) {
            queryParameters = queryParameters.set('tenantIdIn', <any>tenantIdIn);
        }
        if (active !== undefined && active !== null) {
            queryParameters = queryParameters.set('active', <any>active);
        }
        if (suspended !== undefined && suspended !== null) {
            queryParameters = queryParameters.set('suspended', <any>suspended);
        }
        if (priorityHigherThanOrEquals !== undefined && priorityHigherThanOrEquals !== null) {
            queryParameters = queryParameters.set('priorityHigherThanOrEquals', <any>priorityHigherThanOrEquals);
        }
        if (priorityLowerThanOrEquals !== undefined && priorityLowerThanOrEquals !== null) {
            queryParameters = queryParameters.set('priorityLowerThanOrEquals', <any>priorityLowerThanOrEquals);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CountResultDto>('get',`${this.basePath}/external-task/count`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get External Task Topic Names
     * Queries for distinct topic names of external tasks that fulfill given parameters. Query can be restricted to only tasks with retries left, tasks that are locked, or tasks that are unlocked. The parameters withLockedTasks and withUnlockedTasks are exclusive. Setting them both to true will return an empty list. Providing no parameters will return a list of all distinct topic names with external tasks.
     * @param withLockedTasks Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param withUnlockedTasks Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param withRetriesLeft Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTopicNames(withLockedTasks?: boolean, withUnlockedTasks?: boolean, withRetriesLeft?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public getTopicNames(withLockedTasks?: boolean, withUnlockedTasks?: boolean, withRetriesLeft?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public getTopicNames(withLockedTasks?: boolean, withUnlockedTasks?: boolean, withRetriesLeft?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public getTopicNames(withLockedTasks?: boolean, withUnlockedTasks?: boolean, withRetriesLeft?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (withLockedTasks !== undefined && withLockedTasks !== null) {
            queryParameters = queryParameters.set('withLockedTasks', <any>withLockedTasks);
        }
        if (withUnlockedTasks !== undefined && withUnlockedTasks !== null) {
            queryParameters = queryParameters.set('withUnlockedTasks', <any>withUnlockedTasks);
        }
        if (withRetriesLeft !== undefined && withRetriesLeft !== null) {
            queryParameters = queryParameters.set('withRetriesLeft', <any>withRetriesLeft);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<string>>('get',`${this.basePath}/external-task/topic-names`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Handle BPMN Error
     * Reports a business error in the context of a running external task by id. The error code must be specified to identify the BPMN error handler.
     * @param id The id of the external task in which context a BPMN error is reported.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public handleExternalTaskBpmnError(id: string, body?: ExternalTaskBpmnError, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public handleExternalTaskBpmnError(id: string, body?: ExternalTaskBpmnError, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public handleExternalTaskBpmnError(id: string, body?: ExternalTaskBpmnError, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public handleExternalTaskBpmnError(id: string, body?: ExternalTaskBpmnError, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling handleExternalTaskBpmnError.');
        }


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/external-task/${encodeURIComponent(String(id))}/bpmnError`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Handle Failure
     * Reports a failure to execute an external task by id. A number of retries and a timeout until the task can be retried can be specified. If retries are set to 0, an incident for this task is created.
     * @param id The id of the external task to report a failure for.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public handleFailure(id: string, body?: ExternalTaskFailureDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public handleFailure(id: string, body?: ExternalTaskFailureDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public handleFailure(id: string, body?: ExternalTaskFailureDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public handleFailure(id: string, body?: ExternalTaskFailureDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling handleFailure.');
        }


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/external-task/${encodeURIComponent(String(id))}/failure`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Lock an external task by a given id for a specified worker and amount of time.
     * @param id The id of the external task.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public lock(id: string, body?: LockExternalTaskDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public lock(id: string, body?: LockExternalTaskDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public lock(id: string, body?: LockExternalTaskDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public lock(id: string, body?: LockExternalTaskDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling lock.');
        }


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/external-task/${encodeURIComponent(String(id))}/lock`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get List (POST)
     * Queries for external tasks that fulfill given parameters in the form of a JSON object.  This method is slightly more powerful than the [Get External Tasks](https://docs.camunda.org/manual/7.19/reference/rest/external-task/get-query/) method because it allows to specify a hierarchical result sorting.
     * @param body 
     * @param firstResult Pagination of results. Specifies the index of the first result to return.
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public queryExternalTasks(body?: ExternalTaskQueryDto, firstResult?: number, maxResults?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ExternalTaskDto>>;
    public queryExternalTasks(body?: ExternalTaskQueryDto, firstResult?: number, maxResults?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ExternalTaskDto>>>;
    public queryExternalTasks(body?: ExternalTaskQueryDto, firstResult?: number, maxResults?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ExternalTaskDto>>>;
    public queryExternalTasks(body?: ExternalTaskQueryDto, firstResult?: number, maxResults?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (firstResult !== undefined && firstResult !== null) {
            queryParameters = queryParameters.set('firstResult', <any>firstResult);
        }
        if (maxResults !== undefined && maxResults !== null) {
            queryParameters = queryParameters.set('maxResults', <any>maxResults);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<ExternalTaskDto>>('post',`${this.basePath}/external-task`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get List Count (POST)
     * Queries for the number of external tasks that fulfill given parameters. This method takes the same message body as the [Get External Tasks (POST)](https://docs.camunda.org/manual/7.19/reference/rest/external-task/post-query/) method.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public queryExternalTasksCount(body?: ExternalTaskQueryDto, observe?: 'body', reportProgress?: boolean): Observable<CountResultDto>;
    public queryExternalTasksCount(body?: ExternalTaskQueryDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CountResultDto>>;
    public queryExternalTasksCount(body?: ExternalTaskQueryDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CountResultDto>>;
    public queryExternalTasksCount(body?: ExternalTaskQueryDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CountResultDto>('post',`${this.basePath}/external-task/count`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Set Priority
     * Sets the priority of an existing external task by id. The default value of a priority is 0.
     * @param id The id of the external task to set the priority for.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setExternalTaskResourcePriority(id: string, body?: PriorityDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setExternalTaskResourcePriority(id: string, body?: PriorityDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setExternalTaskResourcePriority(id: string, body?: PriorityDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setExternalTaskResourcePriority(id: string, body?: PriorityDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling setExternalTaskResourcePriority.');
        }


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/external-task/${encodeURIComponent(String(id))}/priority`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Set Retries
     * Sets the number of retries left to execute an external task by id. If retries are set to 0, an  incident is created.
     * @param id The id of the external task to set the number of retries for.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setExternalTaskResourceRetries(id: string, body?: RetriesDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setExternalTaskResourceRetries(id: string, body?: RetriesDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setExternalTaskResourceRetries(id: string, body?: RetriesDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setExternalTaskResourceRetries(id: string, body?: RetriesDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling setExternalTaskResourceRetries.');
        }


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/external-task/${encodeURIComponent(String(id))}/retries`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Set Retries Sync
     * Sets the number of retries left to execute external tasks by id synchronously. If retries are set to 0,  an incident is created.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setExternalTaskRetries(body?: SetRetriesForExternalTasksDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setExternalTaskRetries(body?: SetRetriesForExternalTasksDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setExternalTaskRetries(body?: SetRetriesForExternalTasksDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setExternalTaskRetries(body?: SetRetriesForExternalTasksDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/external-task/retries`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Set Retries Async
     * Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0, an incident is created.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setExternalTaskRetriesAsyncOperation(body?: SetRetriesForExternalTasksDto, observe?: 'body', reportProgress?: boolean): Observable<BatchDto>;
    public setExternalTaskRetriesAsyncOperation(body?: SetRetriesForExternalTasksDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BatchDto>>;
    public setExternalTaskRetriesAsyncOperation(body?: SetRetriesForExternalTasksDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BatchDto>>;
    public setExternalTaskRetriesAsyncOperation(body?: SetRetriesForExternalTasksDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<BatchDto>('post',`${this.basePath}/external-task/retries-async`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Unlock
     * Unlocks an external task by id. Clears the task&#x27;s lock expiration time and worker id.
     * @param id The id of the external task to unlock.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public unlock(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public unlock(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public unlock(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public unlock(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling unlock.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/external-task/${encodeURIComponent(String(id))}/unlock`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
