/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.19.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CountResultDto } from '../model/countResultDto';
import { ExceptionDto } from '../model/exceptionDto';
import { HistoricIdentityLinkLogDto } from '../model/historicIdentityLinkLogDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class HistoricIdentityLinkLogService {

    protected basePath = 'http://{host}:{port}/{contextPath}';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get Identity Link Logs
     * Queries for historic identity link logs that fulfill given parameters. The size of the result set can be retrieved by using the [Get Identity-Link-Log Count](https://docs.camunda.org/manual/7.19/reference/rest/history/identity-links/get-identity-link-query-count/) method.
     * @param type Restricts to identity links that have the given type (candidate/assignee/owner).
     * @param userId Restricts to identity links that have the given user id.
     * @param groupId Restricts to identity links that have the given group id.
     * @param dateBefore Restricts to identity links that have the time before the given time.
     * @param dateAfter Restricts to identity links that have the time after the given time.
     * @param taskId Restricts to identity links that have the given task id.
     * @param processDefinitionId Restricts to identity links that have the given process definition id.
     * @param processDefinitionKey Restricts to identity links that have the given process definition key.
     * @param operationType Restricts to identity links that have the given operationType (add/delete).
     * @param assignerId Restricts to identity links that have the given assigner id.
     * @param tenantIdIn Filter by a comma-separated list of tenant ids.
     * @param withoutTenantId Only include historic identity links that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param firstResult Pagination of results. Specifies the index of the first result to return.
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHistoricIdentityLinks(type?: string, userId?: string, groupId?: string, dateBefore?: Date, dateAfter?: Date, taskId?: string, processDefinitionId?: string, processDefinitionKey?: string, operationType?: string, assignerId?: string, tenantIdIn?: string, withoutTenantId?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<HistoricIdentityLinkLogDto>>;
    public getHistoricIdentityLinks(type?: string, userId?: string, groupId?: string, dateBefore?: Date, dateAfter?: Date, taskId?: string, processDefinitionId?: string, processDefinitionKey?: string, operationType?: string, assignerId?: string, tenantIdIn?: string, withoutTenantId?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<HistoricIdentityLinkLogDto>>>;
    public getHistoricIdentityLinks(type?: string, userId?: string, groupId?: string, dateBefore?: Date, dateAfter?: Date, taskId?: string, processDefinitionId?: string, processDefinitionKey?: string, operationType?: string, assignerId?: string, tenantIdIn?: string, withoutTenantId?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<HistoricIdentityLinkLogDto>>>;
    public getHistoricIdentityLinks(type?: string, userId?: string, groupId?: string, dateBefore?: Date, dateAfter?: Date, taskId?: string, processDefinitionId?: string, processDefinitionKey?: string, operationType?: string, assignerId?: string, tenantIdIn?: string, withoutTenantId?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

















        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (type !== undefined && type !== null) {
            queryParameters = queryParameters.set('type', <any>type);
        }
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }
        if (groupId !== undefined && groupId !== null) {
            queryParameters = queryParameters.set('groupId', <any>groupId);
        }
        if (dateBefore !== undefined && dateBefore !== null) {
            queryParameters = queryParameters.set('dateBefore', <any>dateBefore.toISOString());
        }
        if (dateAfter !== undefined && dateAfter !== null) {
            queryParameters = queryParameters.set('dateAfter', <any>dateAfter.toISOString());
        }
        if (taskId !== undefined && taskId !== null) {
            queryParameters = queryParameters.set('taskId', <any>taskId);
        }
        if (processDefinitionId !== undefined && processDefinitionId !== null) {
            queryParameters = queryParameters.set('processDefinitionId', <any>processDefinitionId);
        }
        if (processDefinitionKey !== undefined && processDefinitionKey !== null) {
            queryParameters = queryParameters.set('processDefinitionKey', <any>processDefinitionKey);
        }
        if (operationType !== undefined && operationType !== null) {
            queryParameters = queryParameters.set('operationType', <any>operationType);
        }
        if (assignerId !== undefined && assignerId !== null) {
            queryParameters = queryParameters.set('assignerId', <any>assignerId);
        }
        if (tenantIdIn !== undefined && tenantIdIn !== null) {
            queryParameters = queryParameters.set('tenantIdIn', <any>tenantIdIn);
        }
        if (withoutTenantId !== undefined && withoutTenantId !== null) {
            queryParameters = queryParameters.set('withoutTenantId', <any>withoutTenantId);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (sortOrder !== undefined && sortOrder !== null) {
            queryParameters = queryParameters.set('sortOrder', <any>sortOrder);
        }
        if (firstResult !== undefined && firstResult !== null) {
            queryParameters = queryParameters.set('firstResult', <any>firstResult);
        }
        if (maxResults !== undefined && maxResults !== null) {
            queryParameters = queryParameters.set('maxResults', <any>maxResults);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<HistoricIdentityLinkLogDto>>('get',`${this.basePath}/history/identity-link-log`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Identity Link Log Count
     * Queries for the number of historic identity link logs that fulfill the given parameters. Takes the same parameters as the [Get Identity-Link-Logs](https://docs.camunda.org/manual/7.19/reference/rest/history/identity-links/get-identity-link-query/) method.
     * @param type Restricts to identity links that have the given type (candidate/assignee/owner).
     * @param userId Restricts to identity links that have the given user id.
     * @param groupId Restricts to identity links that have the given group id.
     * @param dateBefore Restricts to identity links that have the time before the given time.
     * @param dateAfter Restricts to identity links that have the time after the given time.
     * @param taskId Restricts to identity links that have the given task id.
     * @param processDefinitionId Restricts to identity links that have the given process definition id.
     * @param processDefinitionKey Restricts to identity links that have the given process definition key.
     * @param operationType Restricts to identity links that have the given operationType (add/delete).
     * @param assignerId Restricts to identity links that have the given assigner id.
     * @param tenantIdIn Filter by a comma-separated list of tenant ids.
     * @param withoutTenantId Only include historic identity links that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHistoricIdentityLinksCount(type?: string, userId?: string, groupId?: string, dateBefore?: Date, dateAfter?: Date, taskId?: string, processDefinitionId?: string, processDefinitionKey?: string, operationType?: string, assignerId?: string, tenantIdIn?: string, withoutTenantId?: boolean, observe?: 'body', reportProgress?: boolean): Observable<CountResultDto>;
    public getHistoricIdentityLinksCount(type?: string, userId?: string, groupId?: string, dateBefore?: Date, dateAfter?: Date, taskId?: string, processDefinitionId?: string, processDefinitionKey?: string, operationType?: string, assignerId?: string, tenantIdIn?: string, withoutTenantId?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CountResultDto>>;
    public getHistoricIdentityLinksCount(type?: string, userId?: string, groupId?: string, dateBefore?: Date, dateAfter?: Date, taskId?: string, processDefinitionId?: string, processDefinitionKey?: string, operationType?: string, assignerId?: string, tenantIdIn?: string, withoutTenantId?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CountResultDto>>;
    public getHistoricIdentityLinksCount(type?: string, userId?: string, groupId?: string, dateBefore?: Date, dateAfter?: Date, taskId?: string, processDefinitionId?: string, processDefinitionKey?: string, operationType?: string, assignerId?: string, tenantIdIn?: string, withoutTenantId?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {













        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (type !== undefined && type !== null) {
            queryParameters = queryParameters.set('type', <any>type);
        }
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }
        if (groupId !== undefined && groupId !== null) {
            queryParameters = queryParameters.set('groupId', <any>groupId);
        }
        if (dateBefore !== undefined && dateBefore !== null) {
            queryParameters = queryParameters.set('dateBefore', <any>dateBefore.toISOString());
        }
        if (dateAfter !== undefined && dateAfter !== null) {
            queryParameters = queryParameters.set('dateAfter', <any>dateAfter.toISOString());
        }
        if (taskId !== undefined && taskId !== null) {
            queryParameters = queryParameters.set('taskId', <any>taskId);
        }
        if (processDefinitionId !== undefined && processDefinitionId !== null) {
            queryParameters = queryParameters.set('processDefinitionId', <any>processDefinitionId);
        }
        if (processDefinitionKey !== undefined && processDefinitionKey !== null) {
            queryParameters = queryParameters.set('processDefinitionKey', <any>processDefinitionKey);
        }
        if (operationType !== undefined && operationType !== null) {
            queryParameters = queryParameters.set('operationType', <any>operationType);
        }
        if (assignerId !== undefined && assignerId !== null) {
            queryParameters = queryParameters.set('assignerId', <any>assignerId);
        }
        if (tenantIdIn !== undefined && tenantIdIn !== null) {
            queryParameters = queryParameters.set('tenantIdIn', <any>tenantIdIn);
        }
        if (withoutTenantId !== undefined && withoutTenantId !== null) {
            queryParameters = queryParameters.set('withoutTenantId', <any>withoutTenantId);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CountResultDto>('get',`${this.basePath}/history/identity-link-log/count`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
