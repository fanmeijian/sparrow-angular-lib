/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.19.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CountResultDto } from '../model/countResultDto';
import { ExceptionDto } from '../model/exceptionDto';
import { HistoricVariableInstanceDto } from '../model/historicVariableInstanceDto';
import { HistoricVariableInstanceQueryDto } from '../model/historicVariableInstanceQueryDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class HistoricVariableInstanceService {

    protected basePath = 'http://{host}:{port}/{contextPath}';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Delete Variable Instance
     * Deletes a historic variable instance by id.
     * @param id The id of the variable instance.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteHistoricVariableInstance(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteHistoricVariableInstance(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteHistoricVariableInstance(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteHistoricVariableInstance(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteHistoricVariableInstance.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/history/variable-instance/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Variable Instance
     * Retrieves a historic variable by id.
     * @param id The id of the variable instance.
     * @param deserializeValues Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHistoricVariableInstance(id: string, deserializeValues?: boolean, observe?: 'body', reportProgress?: boolean): Observable<HistoricVariableInstanceDto>;
    public getHistoricVariableInstance(id: string, deserializeValues?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HistoricVariableInstanceDto>>;
    public getHistoricVariableInstance(id: string, deserializeValues?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HistoricVariableInstanceDto>>;
    public getHistoricVariableInstance(id: string, deserializeValues?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getHistoricVariableInstance.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (deserializeValues !== undefined && deserializeValues !== null) {
            queryParameters = queryParameters.set('deserializeValues', <any>deserializeValues);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<HistoricVariableInstanceDto>('get',`${this.basePath}/history/variable-instance/${encodeURIComponent(String(id))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Variable Instance (Binary)
     * Retrieves the content of a historic variable by id. Applicable for variables that are serialized as binary data.
     * @param id The id of the variable instance.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHistoricVariableInstanceBinary(id: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public getHistoricVariableInstanceBinary(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public getHistoricVariableInstanceBinary(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public getHistoricVariableInstanceBinary(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getHistoricVariableInstanceBinary.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream',
            '*/*',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request('get',`${this.basePath}/history/variable-instance/${encodeURIComponent(String(id))}/data`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Variable Instances
     * Queries for historic variable instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Variable Instance Count](https://docs.camunda.org/manual/7.19/reference/rest/history/variable-instance/get-variable-instance-query-count/) method.
     * @param variableName Filter by variable name.
     * @param variableNameLike Restrict to variables with a name like the parameter.
     * @param variableValue Filter by variable value. Is treated as a &#x60;String&#x60; object on server side.
     * @param variableNamesIgnoreCase Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal.
     * @param variableValuesIgnoreCase Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal.
     * @param variableTypeIn Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.19/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x27;serializable&#x27;.
     * @param includeDeleted Include variables that has already been deleted during the execution.
     * @param processInstanceId Filter by the process instance the variable belongs to.
     * @param processInstanceIdIn Only include historic variable instances which belong to one of the passed and comma-separated process instance ids.
     * @param processDefinitionId Filter by the process definition the variable belongs to.
     * @param processDefinitionKey Filter by a key of the process definition the variable belongs to.
     * @param executionIdIn Only include historic variable instances which belong to one of the passed and and comma-separated execution ids.
     * @param caseInstanceId Filter by the case instance the variable belongs to.
     * @param caseExecutionIdIn Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids.
     * @param caseActivityIdIn Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids.
     * @param taskIdIn Only include historic variable instances which belong to one of the passed and and comma-separated task ids.
     * @param activityInstanceIdIn Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids.
     * @param tenantIdIn Only include historic variable instances which belong to one of the passed and comma- separated tenant ids.
     * @param withoutTenantId Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param variableNameIn Only include historic variable instances which belong to one of the passed and comma-separated variable names.
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param firstResult Pagination of results. Specifies the index of the first result to return.
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param deserializeValues Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHistoricVariableInstances(variableName?: string, variableNameLike?: string, variableValue?: any, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, variableTypeIn?: string, includeDeleted?: boolean, processInstanceId?: string, processInstanceIdIn?: string, processDefinitionId?: string, processDefinitionKey?: string, executionIdIn?: string, caseInstanceId?: string, caseExecutionIdIn?: string, caseActivityIdIn?: string, taskIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, variableNameIn?: string, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, deserializeValues?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<HistoricVariableInstanceDto>>;
    public getHistoricVariableInstances(variableName?: string, variableNameLike?: string, variableValue?: any, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, variableTypeIn?: string, includeDeleted?: boolean, processInstanceId?: string, processInstanceIdIn?: string, processDefinitionId?: string, processDefinitionKey?: string, executionIdIn?: string, caseInstanceId?: string, caseExecutionIdIn?: string, caseActivityIdIn?: string, taskIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, variableNameIn?: string, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, deserializeValues?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<HistoricVariableInstanceDto>>>;
    public getHistoricVariableInstances(variableName?: string, variableNameLike?: string, variableValue?: any, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, variableTypeIn?: string, includeDeleted?: boolean, processInstanceId?: string, processInstanceIdIn?: string, processDefinitionId?: string, processDefinitionKey?: string, executionIdIn?: string, caseInstanceId?: string, caseExecutionIdIn?: string, caseActivityIdIn?: string, taskIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, variableNameIn?: string, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, deserializeValues?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<HistoricVariableInstanceDto>>>;
    public getHistoricVariableInstances(variableName?: string, variableNameLike?: string, variableValue?: any, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, variableTypeIn?: string, includeDeleted?: boolean, processInstanceId?: string, processInstanceIdIn?: string, processDefinitionId?: string, processDefinitionKey?: string, executionIdIn?: string, caseInstanceId?: string, caseExecutionIdIn?: string, caseActivityIdIn?: string, taskIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, variableNameIn?: string, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, deserializeValues?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


























        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (variableName !== undefined && variableName !== null) {
            queryParameters = queryParameters.set('variableName', <any>variableName);
        }
        if (variableNameLike !== undefined && variableNameLike !== null) {
            queryParameters = queryParameters.set('variableNameLike', <any>variableNameLike);
        }
        if (variableValue !== undefined && variableValue !== null) {
            queryParameters = queryParameters.set('variableValue', <any>variableValue);
        }
        if (variableNamesIgnoreCase !== undefined && variableNamesIgnoreCase !== null) {
            queryParameters = queryParameters.set('variableNamesIgnoreCase', <any>variableNamesIgnoreCase);
        }
        if (variableValuesIgnoreCase !== undefined && variableValuesIgnoreCase !== null) {
            queryParameters = queryParameters.set('variableValuesIgnoreCase', <any>variableValuesIgnoreCase);
        }
        if (variableTypeIn !== undefined && variableTypeIn !== null) {
            queryParameters = queryParameters.set('variableTypeIn', <any>variableTypeIn);
        }
        if (includeDeleted !== undefined && includeDeleted !== null) {
            queryParameters = queryParameters.set('includeDeleted', <any>includeDeleted);
        }
        if (processInstanceId !== undefined && processInstanceId !== null) {
            queryParameters = queryParameters.set('processInstanceId', <any>processInstanceId);
        }
        if (processInstanceIdIn !== undefined && processInstanceIdIn !== null) {
            queryParameters = queryParameters.set('processInstanceIdIn', <any>processInstanceIdIn);
        }
        if (processDefinitionId !== undefined && processDefinitionId !== null) {
            queryParameters = queryParameters.set('processDefinitionId', <any>processDefinitionId);
        }
        if (processDefinitionKey !== undefined && processDefinitionKey !== null) {
            queryParameters = queryParameters.set('processDefinitionKey', <any>processDefinitionKey);
        }
        if (executionIdIn !== undefined && executionIdIn !== null) {
            queryParameters = queryParameters.set('executionIdIn', <any>executionIdIn);
        }
        if (caseInstanceId !== undefined && caseInstanceId !== null) {
            queryParameters = queryParameters.set('caseInstanceId', <any>caseInstanceId);
        }
        if (caseExecutionIdIn !== undefined && caseExecutionIdIn !== null) {
            queryParameters = queryParameters.set('caseExecutionIdIn', <any>caseExecutionIdIn);
        }
        if (caseActivityIdIn !== undefined && caseActivityIdIn !== null) {
            queryParameters = queryParameters.set('caseActivityIdIn', <any>caseActivityIdIn);
        }
        if (taskIdIn !== undefined && taskIdIn !== null) {
            queryParameters = queryParameters.set('taskIdIn', <any>taskIdIn);
        }
        if (activityInstanceIdIn !== undefined && activityInstanceIdIn !== null) {
            queryParameters = queryParameters.set('activityInstanceIdIn', <any>activityInstanceIdIn);
        }
        if (tenantIdIn !== undefined && tenantIdIn !== null) {
            queryParameters = queryParameters.set('tenantIdIn', <any>tenantIdIn);
        }
        if (withoutTenantId !== undefined && withoutTenantId !== null) {
            queryParameters = queryParameters.set('withoutTenantId', <any>withoutTenantId);
        }
        if (variableNameIn !== undefined && variableNameIn !== null) {
            queryParameters = queryParameters.set('variableNameIn', <any>variableNameIn);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (sortOrder !== undefined && sortOrder !== null) {
            queryParameters = queryParameters.set('sortOrder', <any>sortOrder);
        }
        if (firstResult !== undefined && firstResult !== null) {
            queryParameters = queryParameters.set('firstResult', <any>firstResult);
        }
        if (maxResults !== undefined && maxResults !== null) {
            queryParameters = queryParameters.set('maxResults', <any>maxResults);
        }
        if (deserializeValues !== undefined && deserializeValues !== null) {
            queryParameters = queryParameters.set('deserializeValues', <any>deserializeValues);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<HistoricVariableInstanceDto>>('get',`${this.basePath}/history/variable-instance`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Variable Instance Count
     * Queries for the number of historic variable instances that fulfill the given parameters. Takes the same parameters as the [Get Variable Instances](https://docs.camunda.org/manual/7.19/reference/rest/history/variable-instance/get-variable-instance-query/) method.
     * @param variableName Filter by variable name.
     * @param variableNameLike Restrict to variables with a name like the parameter.
     * @param variableValue Filter by variable value. Is treated as a &#x60;String&#x60; object on server side.
     * @param variableNamesIgnoreCase Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal.
     * @param variableValuesIgnoreCase Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal.
     * @param variableTypeIn Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.19/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x27;serializable&#x27;.
     * @param includeDeleted Include variables that has already been deleted during the execution.
     * @param processInstanceId Filter by the process instance the variable belongs to.
     * @param processInstanceIdIn Only include historic variable instances which belong to one of the passed and comma-separated process instance ids.
     * @param processDefinitionId Filter by the process definition the variable belongs to.
     * @param processDefinitionKey Filter by a key of the process definition the variable belongs to.
     * @param executionIdIn Only include historic variable instances which belong to one of the passed and and comma-separated execution ids.
     * @param caseInstanceId Filter by the case instance the variable belongs to.
     * @param caseExecutionIdIn Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids.
     * @param caseActivityIdIn Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids.
     * @param taskIdIn Only include historic variable instances which belong to one of the passed and and comma-separated task ids.
     * @param activityInstanceIdIn Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids.
     * @param tenantIdIn Only include historic variable instances which belong to one of the passed and comma- separated tenant ids.
     * @param withoutTenantId Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param variableNameIn Only include historic variable instances which belong to one of the passed and comma-separated variable names.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHistoricVariableInstancesCount(variableName?: string, variableNameLike?: string, variableValue?: any, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, variableTypeIn?: string, includeDeleted?: boolean, processInstanceId?: string, processInstanceIdIn?: string, processDefinitionId?: string, processDefinitionKey?: string, executionIdIn?: string, caseInstanceId?: string, caseExecutionIdIn?: string, caseActivityIdIn?: string, taskIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, variableNameIn?: string, observe?: 'body', reportProgress?: boolean): Observable<CountResultDto>;
    public getHistoricVariableInstancesCount(variableName?: string, variableNameLike?: string, variableValue?: any, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, variableTypeIn?: string, includeDeleted?: boolean, processInstanceId?: string, processInstanceIdIn?: string, processDefinitionId?: string, processDefinitionKey?: string, executionIdIn?: string, caseInstanceId?: string, caseExecutionIdIn?: string, caseActivityIdIn?: string, taskIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, variableNameIn?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CountResultDto>>;
    public getHistoricVariableInstancesCount(variableName?: string, variableNameLike?: string, variableValue?: any, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, variableTypeIn?: string, includeDeleted?: boolean, processInstanceId?: string, processInstanceIdIn?: string, processDefinitionId?: string, processDefinitionKey?: string, executionIdIn?: string, caseInstanceId?: string, caseExecutionIdIn?: string, caseActivityIdIn?: string, taskIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, variableNameIn?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CountResultDto>>;
    public getHistoricVariableInstancesCount(variableName?: string, variableNameLike?: string, variableValue?: any, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, variableTypeIn?: string, includeDeleted?: boolean, processInstanceId?: string, processInstanceIdIn?: string, processDefinitionId?: string, processDefinitionKey?: string, executionIdIn?: string, caseInstanceId?: string, caseExecutionIdIn?: string, caseActivityIdIn?: string, taskIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, variableNameIn?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





















        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (variableName !== undefined && variableName !== null) {
            queryParameters = queryParameters.set('variableName', <any>variableName);
        }
        if (variableNameLike !== undefined && variableNameLike !== null) {
            queryParameters = queryParameters.set('variableNameLike', <any>variableNameLike);
        }
        if (variableValue !== undefined && variableValue !== null) {
            queryParameters = queryParameters.set('variableValue', <any>variableValue);
        }
        if (variableNamesIgnoreCase !== undefined && variableNamesIgnoreCase !== null) {
            queryParameters = queryParameters.set('variableNamesIgnoreCase', <any>variableNamesIgnoreCase);
        }
        if (variableValuesIgnoreCase !== undefined && variableValuesIgnoreCase !== null) {
            queryParameters = queryParameters.set('variableValuesIgnoreCase', <any>variableValuesIgnoreCase);
        }
        if (variableTypeIn !== undefined && variableTypeIn !== null) {
            queryParameters = queryParameters.set('variableTypeIn', <any>variableTypeIn);
        }
        if (includeDeleted !== undefined && includeDeleted !== null) {
            queryParameters = queryParameters.set('includeDeleted', <any>includeDeleted);
        }
        if (processInstanceId !== undefined && processInstanceId !== null) {
            queryParameters = queryParameters.set('processInstanceId', <any>processInstanceId);
        }
        if (processInstanceIdIn !== undefined && processInstanceIdIn !== null) {
            queryParameters = queryParameters.set('processInstanceIdIn', <any>processInstanceIdIn);
        }
        if (processDefinitionId !== undefined && processDefinitionId !== null) {
            queryParameters = queryParameters.set('processDefinitionId', <any>processDefinitionId);
        }
        if (processDefinitionKey !== undefined && processDefinitionKey !== null) {
            queryParameters = queryParameters.set('processDefinitionKey', <any>processDefinitionKey);
        }
        if (executionIdIn !== undefined && executionIdIn !== null) {
            queryParameters = queryParameters.set('executionIdIn', <any>executionIdIn);
        }
        if (caseInstanceId !== undefined && caseInstanceId !== null) {
            queryParameters = queryParameters.set('caseInstanceId', <any>caseInstanceId);
        }
        if (caseExecutionIdIn !== undefined && caseExecutionIdIn !== null) {
            queryParameters = queryParameters.set('caseExecutionIdIn', <any>caseExecutionIdIn);
        }
        if (caseActivityIdIn !== undefined && caseActivityIdIn !== null) {
            queryParameters = queryParameters.set('caseActivityIdIn', <any>caseActivityIdIn);
        }
        if (taskIdIn !== undefined && taskIdIn !== null) {
            queryParameters = queryParameters.set('taskIdIn', <any>taskIdIn);
        }
        if (activityInstanceIdIn !== undefined && activityInstanceIdIn !== null) {
            queryParameters = queryParameters.set('activityInstanceIdIn', <any>activityInstanceIdIn);
        }
        if (tenantIdIn !== undefined && tenantIdIn !== null) {
            queryParameters = queryParameters.set('tenantIdIn', <any>tenantIdIn);
        }
        if (withoutTenantId !== undefined && withoutTenantId !== null) {
            queryParameters = queryParameters.set('withoutTenantId', <any>withoutTenantId);
        }
        if (variableNameIn !== undefined && variableNameIn !== null) {
            queryParameters = queryParameters.set('variableNameIn', <any>variableNameIn);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CountResultDto>('get',`${this.basePath}/history/variable-instance/count`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Variable Instances (POST)
     * Queries for historic variable instances that fulfill the given parameters. This method is slightly more powerful than the [Get Variable Instances](https://docs.camunda.org/manual/7.19/reference/rest/history/variable-instance/get-variable-instance-query/) method because it allows filtering by variable values of the different types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
     * @param body 
     * @param firstResult Pagination of results. Specifies the index of the first result to return.
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param deserializeValues Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public queryHistoricVariableInstances(body?: HistoricVariableInstanceQueryDto, firstResult?: number, maxResults?: number, deserializeValues?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<HistoricVariableInstanceDto>>;
    public queryHistoricVariableInstances(body?: HistoricVariableInstanceQueryDto, firstResult?: number, maxResults?: number, deserializeValues?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<HistoricVariableInstanceDto>>>;
    public queryHistoricVariableInstances(body?: HistoricVariableInstanceQueryDto, firstResult?: number, maxResults?: number, deserializeValues?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<HistoricVariableInstanceDto>>>;
    public queryHistoricVariableInstances(body?: HistoricVariableInstanceQueryDto, firstResult?: number, maxResults?: number, deserializeValues?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (firstResult !== undefined && firstResult !== null) {
            queryParameters = queryParameters.set('firstResult', <any>firstResult);
        }
        if (maxResults !== undefined && maxResults !== null) {
            queryParameters = queryParameters.set('maxResults', <any>maxResults);
        }
        if (deserializeValues !== undefined && deserializeValues !== null) {
            queryParameters = queryParameters.set('deserializeValues', <any>deserializeValues);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<HistoricVariableInstanceDto>>('post',`${this.basePath}/history/variable-instance`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Variable Instance Count (POST)
     * Queries for historic variable instances that fulfill the given parameters. This method takes the same message body as the [Get Variable Instances (POST)](https://docs.camunda.org/manual/7.19/reference/rest/history/variable-instance/post-variable-instance-query/) method and therefore it is more powerful regarding variable values than the [Get Variable Instance Count](https://docs.camunda.org/manual/7.19/reference/rest/history/variable-instance/get-variable-instance-query-count/) method.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public queryHistoricVariableInstancesCount(body?: HistoricVariableInstanceQueryDto, observe?: 'body', reportProgress?: boolean): Observable<CountResultDto>;
    public queryHistoricVariableInstancesCount(body?: HistoricVariableInstanceQueryDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CountResultDto>>;
    public queryHistoricVariableInstancesCount(body?: HistoricVariableInstanceQueryDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CountResultDto>>;
    public queryHistoricVariableInstancesCount(body?: HistoricVariableInstanceQueryDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CountResultDto>('post',`${this.basePath}/history/variable-instance/count`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
