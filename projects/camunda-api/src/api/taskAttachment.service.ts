/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.19.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AttachmentDto } from '../model/attachmentDto';
import { AuthorizationExceptionDto } from '../model/authorizationExceptionDto';
import { ExceptionDto } from '../model/exceptionDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TaskAttachmentService {

    protected basePath = 'http://{host}:{port}/{contextPath}';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create
     * Creates an attachment for a task.
     * @param id The id of the task to add the attachment to.
     * @param attachmentName 
     * @param attachmentDescription 
     * @param attachmentType 
     * @param url 
     * @param content 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addAttachmentForm(id: string, attachmentName?: string, attachmentDescription?: string, attachmentType?: string, url?: string, content?: Blob, observe?: 'body', reportProgress?: boolean): Observable<AttachmentDto>;
    public addAttachmentForm(id: string, attachmentName?: string, attachmentDescription?: string, attachmentType?: string, url?: string, content?: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AttachmentDto>>;
    public addAttachmentForm(id: string, attachmentName?: string, attachmentDescription?: string, attachmentType?: string, url?: string, content?: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AttachmentDto>>;
    public addAttachmentForm(id: string, attachmentName?: string, attachmentDescription?: string, attachmentType?: string, url?: string, content?: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling addAttachment.');
        }






        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (attachmentName !== undefined) {
            formParams = formParams.append('attachment-name', <any>attachmentName) as any || formParams;
        }
        if (attachmentDescription !== undefined) {
            formParams = formParams.append('attachment-description', <any>attachmentDescription) as any || formParams;
        }
        if (attachmentType !== undefined) {
            formParams = formParams.append('attachment-type', <any>attachmentType) as any || formParams;
        }
        if (url !== undefined) {
            formParams = formParams.append('url', <any>url) as any || formParams;
        }
        if (content !== undefined) {
            formParams = formParams.append('content', <any>content) as any || formParams;
        }

        return this.httpClient.request<AttachmentDto>('post',`${this.basePath}/task/${encodeURIComponent(String(id))}/attachment/create`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete
     * Removes an attachment from a task by id.
     * @param id The id of the task.
     * @param attachmentId The id of the attachment to be removed.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAttachment(id: string, attachmentId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteAttachment(id: string, attachmentId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteAttachment(id: string, attachmentId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteAttachment(id: string, attachmentId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteAttachment.');
        }

        if (attachmentId === null || attachmentId === undefined) {
            throw new Error('Required parameter attachmentId was null or undefined when calling deleteAttachment.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/task/${encodeURIComponent(String(id))}/attachment/${encodeURIComponent(String(attachmentId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get
     * Retrieves a task attachment by task id and attachment id.
     * @param id The id of the task.
     * @param attachmentId The id of the attachment to be retrieved.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAttachment(id: string, attachmentId: string, observe?: 'body', reportProgress?: boolean): Observable<AttachmentDto>;
    public getAttachment(id: string, attachmentId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AttachmentDto>>;
    public getAttachment(id: string, attachmentId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AttachmentDto>>;
    public getAttachment(id: string, attachmentId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getAttachment.');
        }

        if (attachmentId === null || attachmentId === undefined) {
            throw new Error('Required parameter attachmentId was null or undefined when calling getAttachment.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<AttachmentDto>('get',`${this.basePath}/task/${encodeURIComponent(String(id))}/attachment/${encodeURIComponent(String(attachmentId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get (Binary)
     * Retrieves the binary content of a task attachment by task id and attachment id.
     * @param id The id of the task.
     * @param attachmentId The id of the attachment to be retrieved.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAttachmentData(id: string, attachmentId: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public getAttachmentData(id: string, attachmentId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public getAttachmentData(id: string, attachmentId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public getAttachmentData(id: string, attachmentId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getAttachmentData.');
        }

        if (attachmentId === null || attachmentId === undefined) {
            throw new Error('Required parameter attachmentId was null or undefined when calling getAttachmentData.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream',
            'text/plain',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request('get',`${this.basePath}/task/${encodeURIComponent(String(id))}/attachment/${encodeURIComponent(String(attachmentId))}/data`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get List
     * Gets the attachments for a task.
     * @param id The id of the task to retrieve the attachments for.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAttachments(id: string, observe?: 'body', reportProgress?: boolean): Observable<Array<AttachmentDto>>;
    public getAttachments(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<AttachmentDto>>>;
    public getAttachments(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<AttachmentDto>>>;
    public getAttachments(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getAttachments.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<AttachmentDto>>('get',`${this.basePath}/task/${encodeURIComponent(String(id))}/attachment`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
