/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.19.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AnnotationDto } from '../model/annotationDto';
import { CountResultDto } from '../model/countResultDto';
import { ExceptionDto } from '../model/exceptionDto';
import { IncidentDto } from '../model/incidentDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class IncidentService {

    protected basePath = 'http://{host}:{port}/{contextPath}';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Clear Incident Annotation
     * Clears the annotation of an incident with given id.
     * @param id The id of the incident to clear the annotation at.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public clearIncidentAnnotation(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public clearIncidentAnnotation(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public clearIncidentAnnotation(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public clearIncidentAnnotation(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling clearIncidentAnnotation.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/incident/${encodeURIComponent(String(id))}/annotation`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Incident
     * Retrieves an incident by ID.
     * @param id The id of the incident to be retrieved.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getIncident(id: string, observe?: 'body', reportProgress?: boolean): Observable<IncidentDto>;
    public getIncident(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IncidentDto>>;
    public getIncident(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IncidentDto>>;
    public getIncident(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getIncident.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<IncidentDto>('get',`${this.basePath}/incident/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get List
     * Queries for incidents that fulfill given parameters. The size of the result set can be retrieved by using the [Get Incident Count](https://docs.camunda.org/manual/7.19/reference/rest/incident/get-query-count/) method.
     * @param incidentId Restricts to incidents that have the given id.
     * @param incidentType Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     * @param incidentMessage Restricts to incidents that have the given incident message.
     * @param incidentMessageLike Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#x27;%&#x27; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;).
     * @param processDefinitionId Restricts to incidents that belong to a process definition with the given id.
     * @param processDefinitionKeyIn Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list.
     * @param processInstanceId Restricts to incidents that belong to a process instance with the given id.
     * @param executionId Restricts to incidents that belong to an execution with the given id.
     * @param incidentTimestampBefore Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param incidentTimestampAfter Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param activityId Restricts to incidents that belong to an activity with the given id.
     * @param failedActivityId Restricts to incidents that were created due to the failure of an activity with the given id.
     * @param causeIncidentId Restricts to incidents that have the given incident id as cause incident.
     * @param rootCauseIncidentId Restricts to incidents that have the given incident id as root cause incident.
     * @param configuration Restricts to incidents that have the given parameter set as configuration.
     * @param tenantIdIn Restricts to incidents that have one of the given comma-separated tenant ids.
     * @param jobDefinitionIdIn Restricts to incidents that have one of the given comma-separated job definition ids.
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param firstResult Pagination of results. Specifies the index of the first result to return.
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getIncidents(incidentId?: string, incidentType?: string, incidentMessage?: string, incidentMessageLike?: string, processDefinitionId?: string, processDefinitionKeyIn?: string, processInstanceId?: string, executionId?: string, incidentTimestampBefore?: Date, incidentTimestampAfter?: Date, activityId?: string, failedActivityId?: string, causeIncidentId?: string, rootCauseIncidentId?: string, configuration?: string, tenantIdIn?: string, jobDefinitionIdIn?: string, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<IncidentDto>>;
    public getIncidents(incidentId?: string, incidentType?: string, incidentMessage?: string, incidentMessageLike?: string, processDefinitionId?: string, processDefinitionKeyIn?: string, processInstanceId?: string, executionId?: string, incidentTimestampBefore?: Date, incidentTimestampAfter?: Date, activityId?: string, failedActivityId?: string, causeIncidentId?: string, rootCauseIncidentId?: string, configuration?: string, tenantIdIn?: string, jobDefinitionIdIn?: string, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<IncidentDto>>>;
    public getIncidents(incidentId?: string, incidentType?: string, incidentMessage?: string, incidentMessageLike?: string, processDefinitionId?: string, processDefinitionKeyIn?: string, processInstanceId?: string, executionId?: string, incidentTimestampBefore?: Date, incidentTimestampAfter?: Date, activityId?: string, failedActivityId?: string, causeIncidentId?: string, rootCauseIncidentId?: string, configuration?: string, tenantIdIn?: string, jobDefinitionIdIn?: string, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<IncidentDto>>>;
    public getIncidents(incidentId?: string, incidentType?: string, incidentMessage?: string, incidentMessageLike?: string, processDefinitionId?: string, processDefinitionKeyIn?: string, processInstanceId?: string, executionId?: string, incidentTimestampBefore?: Date, incidentTimestampAfter?: Date, activityId?: string, failedActivityId?: string, causeIncidentId?: string, rootCauseIncidentId?: string, configuration?: string, tenantIdIn?: string, jobDefinitionIdIn?: string, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






















        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (incidentId !== undefined && incidentId !== null) {
            queryParameters = queryParameters.set('incidentId', <any>incidentId);
        }
        if (incidentType !== undefined && incidentType !== null) {
            queryParameters = queryParameters.set('incidentType', <any>incidentType);
        }
        if (incidentMessage !== undefined && incidentMessage !== null) {
            queryParameters = queryParameters.set('incidentMessage', <any>incidentMessage);
        }
        if (incidentMessageLike !== undefined && incidentMessageLike !== null) {
            queryParameters = queryParameters.set('incidentMessageLike', <any>incidentMessageLike);
        }
        if (processDefinitionId !== undefined && processDefinitionId !== null) {
            queryParameters = queryParameters.set('processDefinitionId', <any>processDefinitionId);
        }
        if (processDefinitionKeyIn !== undefined && processDefinitionKeyIn !== null) {
            queryParameters = queryParameters.set('processDefinitionKeyIn', <any>processDefinitionKeyIn);
        }
        if (processInstanceId !== undefined && processInstanceId !== null) {
            queryParameters = queryParameters.set('processInstanceId', <any>processInstanceId);
        }
        if (executionId !== undefined && executionId !== null) {
            queryParameters = queryParameters.set('executionId', <any>executionId);
        }
        if (incidentTimestampBefore !== undefined && incidentTimestampBefore !== null) {
            queryParameters = queryParameters.set('incidentTimestampBefore', <any>incidentTimestampBefore.toISOString());
        }
        if (incidentTimestampAfter !== undefined && incidentTimestampAfter !== null) {
            queryParameters = queryParameters.set('incidentTimestampAfter', <any>incidentTimestampAfter.toISOString());
        }
        if (activityId !== undefined && activityId !== null) {
            queryParameters = queryParameters.set('activityId', <any>activityId);
        }
        if (failedActivityId !== undefined && failedActivityId !== null) {
            queryParameters = queryParameters.set('failedActivityId', <any>failedActivityId);
        }
        if (causeIncidentId !== undefined && causeIncidentId !== null) {
            queryParameters = queryParameters.set('causeIncidentId', <any>causeIncidentId);
        }
        if (rootCauseIncidentId !== undefined && rootCauseIncidentId !== null) {
            queryParameters = queryParameters.set('rootCauseIncidentId', <any>rootCauseIncidentId);
        }
        if (configuration !== undefined && configuration !== null) {
            queryParameters = queryParameters.set('configuration', <any>configuration);
        }
        if (tenantIdIn !== undefined && tenantIdIn !== null) {
            queryParameters = queryParameters.set('tenantIdIn', <any>tenantIdIn);
        }
        if (jobDefinitionIdIn !== undefined && jobDefinitionIdIn !== null) {
            queryParameters = queryParameters.set('jobDefinitionIdIn', <any>jobDefinitionIdIn);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (sortOrder !== undefined && sortOrder !== null) {
            queryParameters = queryParameters.set('sortOrder', <any>sortOrder);
        }
        if (firstResult !== undefined && firstResult !== null) {
            queryParameters = queryParameters.set('firstResult', <any>firstResult);
        }
        if (maxResults !== undefined && maxResults !== null) {
            queryParameters = queryParameters.set('maxResults', <any>maxResults);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<IncidentDto>>('get',`${this.basePath}/incident`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get List Count
     * Queries for the number of incidents that fulfill given parameters. Takes the same parameters as the [Get Incidents](https://docs.camunda.org/manual/7.19/reference/rest/incident/get-query/) method.
     * @param incidentId Restricts to incidents that have the given id.
     * @param incidentType Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     * @param incidentMessage Restricts to incidents that have the given incident message.
     * @param incidentMessageLike Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#x27;%&#x27; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;).
     * @param processDefinitionId Restricts to incidents that belong to a process definition with the given id.
     * @param processDefinitionKeyIn Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list.
     * @param processInstanceId Restricts to incidents that belong to a process instance with the given id.
     * @param executionId Restricts to incidents that belong to an execution with the given id.
     * @param incidentTimestampBefore Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param incidentTimestampAfter Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param activityId Restricts to incidents that belong to an activity with the given id.
     * @param failedActivityId Restricts to incidents that were created due to the failure of an activity with the given id.
     * @param causeIncidentId Restricts to incidents that have the given incident id as cause incident.
     * @param rootCauseIncidentId Restricts to incidents that have the given incident id as root cause incident.
     * @param configuration Restricts to incidents that have the given parameter set as configuration.
     * @param tenantIdIn Restricts to incidents that have one of the given comma-separated tenant ids.
     * @param jobDefinitionIdIn Restricts to incidents that have one of the given comma-separated job definition ids.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getIncidentsCount(incidentId?: string, incidentType?: string, incidentMessage?: string, incidentMessageLike?: string, processDefinitionId?: string, processDefinitionKeyIn?: string, processInstanceId?: string, executionId?: string, incidentTimestampBefore?: Date, incidentTimestampAfter?: Date, activityId?: string, failedActivityId?: string, causeIncidentId?: string, rootCauseIncidentId?: string, configuration?: string, tenantIdIn?: string, jobDefinitionIdIn?: string, observe?: 'body', reportProgress?: boolean): Observable<CountResultDto>;
    public getIncidentsCount(incidentId?: string, incidentType?: string, incidentMessage?: string, incidentMessageLike?: string, processDefinitionId?: string, processDefinitionKeyIn?: string, processInstanceId?: string, executionId?: string, incidentTimestampBefore?: Date, incidentTimestampAfter?: Date, activityId?: string, failedActivityId?: string, causeIncidentId?: string, rootCauseIncidentId?: string, configuration?: string, tenantIdIn?: string, jobDefinitionIdIn?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CountResultDto>>;
    public getIncidentsCount(incidentId?: string, incidentType?: string, incidentMessage?: string, incidentMessageLike?: string, processDefinitionId?: string, processDefinitionKeyIn?: string, processInstanceId?: string, executionId?: string, incidentTimestampBefore?: Date, incidentTimestampAfter?: Date, activityId?: string, failedActivityId?: string, causeIncidentId?: string, rootCauseIncidentId?: string, configuration?: string, tenantIdIn?: string, jobDefinitionIdIn?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CountResultDto>>;
    public getIncidentsCount(incidentId?: string, incidentType?: string, incidentMessage?: string, incidentMessageLike?: string, processDefinitionId?: string, processDefinitionKeyIn?: string, processInstanceId?: string, executionId?: string, incidentTimestampBefore?: Date, incidentTimestampAfter?: Date, activityId?: string, failedActivityId?: string, causeIncidentId?: string, rootCauseIncidentId?: string, configuration?: string, tenantIdIn?: string, jobDefinitionIdIn?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


















        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (incidentId !== undefined && incidentId !== null) {
            queryParameters = queryParameters.set('incidentId', <any>incidentId);
        }
        if (incidentType !== undefined && incidentType !== null) {
            queryParameters = queryParameters.set('incidentType', <any>incidentType);
        }
        if (incidentMessage !== undefined && incidentMessage !== null) {
            queryParameters = queryParameters.set('incidentMessage', <any>incidentMessage);
        }
        if (incidentMessageLike !== undefined && incidentMessageLike !== null) {
            queryParameters = queryParameters.set('incidentMessageLike', <any>incidentMessageLike);
        }
        if (processDefinitionId !== undefined && processDefinitionId !== null) {
            queryParameters = queryParameters.set('processDefinitionId', <any>processDefinitionId);
        }
        if (processDefinitionKeyIn !== undefined && processDefinitionKeyIn !== null) {
            queryParameters = queryParameters.set('processDefinitionKeyIn', <any>processDefinitionKeyIn);
        }
        if (processInstanceId !== undefined && processInstanceId !== null) {
            queryParameters = queryParameters.set('processInstanceId', <any>processInstanceId);
        }
        if (executionId !== undefined && executionId !== null) {
            queryParameters = queryParameters.set('executionId', <any>executionId);
        }
        if (incidentTimestampBefore !== undefined && incidentTimestampBefore !== null) {
            queryParameters = queryParameters.set('incidentTimestampBefore', <any>incidentTimestampBefore.toISOString());
        }
        if (incidentTimestampAfter !== undefined && incidentTimestampAfter !== null) {
            queryParameters = queryParameters.set('incidentTimestampAfter', <any>incidentTimestampAfter.toISOString());
        }
        if (activityId !== undefined && activityId !== null) {
            queryParameters = queryParameters.set('activityId', <any>activityId);
        }
        if (failedActivityId !== undefined && failedActivityId !== null) {
            queryParameters = queryParameters.set('failedActivityId', <any>failedActivityId);
        }
        if (causeIncidentId !== undefined && causeIncidentId !== null) {
            queryParameters = queryParameters.set('causeIncidentId', <any>causeIncidentId);
        }
        if (rootCauseIncidentId !== undefined && rootCauseIncidentId !== null) {
            queryParameters = queryParameters.set('rootCauseIncidentId', <any>rootCauseIncidentId);
        }
        if (configuration !== undefined && configuration !== null) {
            queryParameters = queryParameters.set('configuration', <any>configuration);
        }
        if (tenantIdIn !== undefined && tenantIdIn !== null) {
            queryParameters = queryParameters.set('tenantIdIn', <any>tenantIdIn);
        }
        if (jobDefinitionIdIn !== undefined && jobDefinitionIdIn !== null) {
            queryParameters = queryParameters.set('jobDefinitionIdIn', <any>jobDefinitionIdIn);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CountResultDto>('get',`${this.basePath}/incident/count`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Resolve Incident
     * Resolves an incident with given id.
     * @param id The id of the incident to be resolved.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public resolveIncident(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public resolveIncident(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public resolveIncident(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public resolveIncident(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling resolveIncident.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/incident/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Set Incident Annotation
     * Sets the annotation of an incident with given id.
     * @param id The id of the incident to clear the annotation at.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setIncidentAnnotation(id: string, body?: AnnotationDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setIncidentAnnotation(id: string, body?: AnnotationDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setIncidentAnnotation(id: string, body?: AnnotationDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setIncidentAnnotation(id: string, body?: AnnotationDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling setIncidentAnnotation.');
        }


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/incident/${encodeURIComponent(String(id))}/annotation`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
