/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.19.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CountResultDto } from '../model/countResultDto';
import { ExceptionDto } from '../model/exceptionDto';
import { ResourceOptionsDto } from '../model/resourceOptionsDto';
import { UserCredentialsDto } from '../model/userCredentialsDto';
import { UserDto } from '../model/userDto';
import { UserProfileDto } from '../model/userProfileDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class UserService {

    protected basePath = 'http://{host}:{port}/{contextPath}';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Options
     * The &#x60;/user&#x60; resource supports two custom &#x60;OPTIONS&#x60; requests, one for the resource as such and one for individual user instances. The &#x60;OPTIONS&#x60; request allows checking for the set of available operations that the currently authenticated user can perform on the /user resource. If the user can perform an operation or not may depend on various things, including the user&#x27;s authorizations to interact with this resource and the internal configuration of the process engine. &#x60;OPTIONS /user&#x60; returns available interactions on the resource.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public availableOperations(observe?: 'body', reportProgress?: boolean): Observable<ResourceOptionsDto>;
    public availableOperations(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceOptionsDto>>;
    public availableOperations(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceOptionsDto>>;
    public availableOperations(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ResourceOptionsDto>('options',`${this.basePath}/user`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Options
     * The &#x60;/user&#x60; resource supports two custom &#x60;OPTIONS&#x60; requests, one for the resource as such and one for individual user instances. The &#x60;OPTIONS&#x60; request allows checking for the set of available operations that the currently authenticated user can perform on the /user resource. If the user can perform an operation or not may depend on various things, including the user&#x27;s authorizations to interact with this resource and the internal configuration of the process engine. &#x60;OPTIONS /user/{id}&#x60; returns available interactions on a resource instance.
     * @param id The id of the user to be deleted.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public availableUserOperations(id: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceOptionsDto>;
    public availableUserOperations(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceOptionsDto>>;
    public availableUserOperations(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceOptionsDto>>;
    public availableUserOperations(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling availableUserOperations.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ResourceOptionsDto>('options',`${this.basePath}/user/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create
     * Create a new user.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createUser(body?: UserDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createUser(body?: UserDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createUser(body?: UserDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createUser(body?: UserDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/user/create`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete
     * Deletes a user by id.
     * @param id The id of the user to be deleted.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteUser(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteUser(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteUser(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteUser(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteUser.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/user/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get List Count
     * Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the [Get Users](https://docs.camunda.org/manual/7.19/reference/rest/user/get-query/) method.
     * @param id Filter by user id
     * @param idIn Filter by a comma-separated list of user ids.
     * @param firstName Filter by the first name of the user. Exact match.
     * @param firstNameLike Filter by the first name that the parameter is a substring of.
     * @param lastName Filter by the last name of the user. Exact match.
     * @param lastNameLike Filter by the last name that the parameter is a substring of.
     * @param email Filter by the email of the user. Exact match.
     * @param emailLike Filter by the email that the parameter is a substring of.
     * @param memberOfGroup Filter for users which are members of the given group.
     * @param memberOfTenant Filter for users which are members of the given tenant.
     * @param potentialStarter Only select Users that are potential starter for the given process definition.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUserCount(id?: string, idIn?: string, firstName?: string, firstNameLike?: string, lastName?: string, lastNameLike?: string, email?: string, emailLike?: string, memberOfGroup?: string, memberOfTenant?: string, potentialStarter?: string, observe?: 'body', reportProgress?: boolean): Observable<CountResultDto>;
    public getUserCount(id?: string, idIn?: string, firstName?: string, firstNameLike?: string, lastName?: string, lastNameLike?: string, email?: string, emailLike?: string, memberOfGroup?: string, memberOfTenant?: string, potentialStarter?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CountResultDto>>;
    public getUserCount(id?: string, idIn?: string, firstName?: string, firstNameLike?: string, lastName?: string, lastNameLike?: string, email?: string, emailLike?: string, memberOfGroup?: string, memberOfTenant?: string, potentialStarter?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CountResultDto>>;
    public getUserCount(id?: string, idIn?: string, firstName?: string, firstNameLike?: string, lastName?: string, lastNameLike?: string, email?: string, emailLike?: string, memberOfGroup?: string, memberOfTenant?: string, potentialStarter?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {












        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }
        if (idIn !== undefined && idIn !== null) {
            queryParameters = queryParameters.set('idIn', <any>idIn);
        }
        if (firstName !== undefined && firstName !== null) {
            queryParameters = queryParameters.set('firstName', <any>firstName);
        }
        if (firstNameLike !== undefined && firstNameLike !== null) {
            queryParameters = queryParameters.set('firstNameLike', <any>firstNameLike);
        }
        if (lastName !== undefined && lastName !== null) {
            queryParameters = queryParameters.set('lastName', <any>lastName);
        }
        if (lastNameLike !== undefined && lastNameLike !== null) {
            queryParameters = queryParameters.set('lastNameLike', <any>lastNameLike);
        }
        if (email !== undefined && email !== null) {
            queryParameters = queryParameters.set('email', <any>email);
        }
        if (emailLike !== undefined && emailLike !== null) {
            queryParameters = queryParameters.set('emailLike', <any>emailLike);
        }
        if (memberOfGroup !== undefined && memberOfGroup !== null) {
            queryParameters = queryParameters.set('memberOfGroup', <any>memberOfGroup);
        }
        if (memberOfTenant !== undefined && memberOfTenant !== null) {
            queryParameters = queryParameters.set('memberOfTenant', <any>memberOfTenant);
        }
        if (potentialStarter !== undefined && potentialStarter !== null) {
            queryParameters = queryParameters.set('potentialStarter', <any>potentialStarter);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CountResultDto>('get',`${this.basePath}/user/count`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Profile
     * Retrieves a user&#x27;s profile.
     * @param id The id of the user to retrieve.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUserProfile(id: string, observe?: 'body', reportProgress?: boolean): Observable<UserProfileDto>;
    public getUserProfile(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserProfileDto>>;
    public getUserProfile(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserProfileDto>>;
    public getUserProfile(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getUserProfile.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<UserProfileDto>('get',`${this.basePath}/user/${encodeURIComponent(String(id))}/profile`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get List
     * Query for a list of users using a list of parameters. The size of the result set can be retrieved by using the Get User Count method. [Get User Count](https://docs.camunda.org/manual/7.19/reference/rest/user/get-query-count/) method.
     * @param id Filter by user id
     * @param idIn Filter by a comma-separated list of user ids.
     * @param firstName Filter by the first name of the user. Exact match.
     * @param firstNameLike Filter by the first name that the parameter is a substring of.
     * @param lastName Filter by the last name of the user. Exact match.
     * @param lastNameLike Filter by the last name that the parameter is a substring of.
     * @param email Filter by the email of the user. Exact match.
     * @param emailLike Filter by the email that the parameter is a substring of.
     * @param memberOfGroup Filter for users which are members of the given group.
     * @param memberOfTenant Filter for users which are members of the given tenant.
     * @param potentialStarter Only select Users that are potential starter for the given process definition.
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param firstResult Pagination of results. Specifies the index of the first result to return.
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUsers(id?: string, idIn?: string, firstName?: string, firstNameLike?: string, lastName?: string, lastNameLike?: string, email?: string, emailLike?: string, memberOfGroup?: string, memberOfTenant?: string, potentialStarter?: string, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<UserProfileDto>>;
    public getUsers(id?: string, idIn?: string, firstName?: string, firstNameLike?: string, lastName?: string, lastNameLike?: string, email?: string, emailLike?: string, memberOfGroup?: string, memberOfTenant?: string, potentialStarter?: string, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<UserProfileDto>>>;
    public getUsers(id?: string, idIn?: string, firstName?: string, firstNameLike?: string, lastName?: string, lastNameLike?: string, email?: string, emailLike?: string, memberOfGroup?: string, memberOfTenant?: string, potentialStarter?: string, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<UserProfileDto>>>;
    public getUsers(id?: string, idIn?: string, firstName?: string, firstNameLike?: string, lastName?: string, lastNameLike?: string, email?: string, emailLike?: string, memberOfGroup?: string, memberOfTenant?: string, potentialStarter?: string, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
















        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }
        if (idIn !== undefined && idIn !== null) {
            queryParameters = queryParameters.set('idIn', <any>idIn);
        }
        if (firstName !== undefined && firstName !== null) {
            queryParameters = queryParameters.set('firstName', <any>firstName);
        }
        if (firstNameLike !== undefined && firstNameLike !== null) {
            queryParameters = queryParameters.set('firstNameLike', <any>firstNameLike);
        }
        if (lastName !== undefined && lastName !== null) {
            queryParameters = queryParameters.set('lastName', <any>lastName);
        }
        if (lastNameLike !== undefined && lastNameLike !== null) {
            queryParameters = queryParameters.set('lastNameLike', <any>lastNameLike);
        }
        if (email !== undefined && email !== null) {
            queryParameters = queryParameters.set('email', <any>email);
        }
        if (emailLike !== undefined && emailLike !== null) {
            queryParameters = queryParameters.set('emailLike', <any>emailLike);
        }
        if (memberOfGroup !== undefined && memberOfGroup !== null) {
            queryParameters = queryParameters.set('memberOfGroup', <any>memberOfGroup);
        }
        if (memberOfTenant !== undefined && memberOfTenant !== null) {
            queryParameters = queryParameters.set('memberOfTenant', <any>memberOfTenant);
        }
        if (potentialStarter !== undefined && potentialStarter !== null) {
            queryParameters = queryParameters.set('potentialStarter', <any>potentialStarter);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (sortOrder !== undefined && sortOrder !== null) {
            queryParameters = queryParameters.set('sortOrder', <any>sortOrder);
        }
        if (firstResult !== undefined && firstResult !== null) {
            queryParameters = queryParameters.set('firstResult', <any>firstResult);
        }
        if (maxResults !== undefined && maxResults !== null) {
            queryParameters = queryParameters.set('maxResults', <any>maxResults);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<UserProfileDto>>('get',`${this.basePath}/user`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Unlock User
     * Unlocks a user by id.
     * @param id The id of the user to be unlocked.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public unlockUser(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public unlockUser(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public unlockUser(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public unlockUser(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling unlockUser.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/user/${encodeURIComponent(String(id))}/unlock`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Credentials
     * Updates a user&#x27;s credentials (password)
     * @param id The id of the user to be updated.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCredentials(id: string, body?: UserCredentialsDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateCredentials(id: string, body?: UserCredentialsDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateCredentials(id: string, body?: UserCredentialsDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateCredentials(id: string, body?: UserCredentialsDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateCredentials.');
        }


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/user/${encodeURIComponent(String(id))}/credentials`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update User Profile
     * Updates the profile information of an already existing user.
     * @param id The id of the user.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateProfile(id: string, body?: UserProfileDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateProfile(id: string, body?: UserProfileDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateProfile(id: string, body?: UserProfileDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateProfile(id: string, body?: UserProfileDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateProfile.');
        }


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/user/${encodeURIComponent(String(id))}/profile`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
