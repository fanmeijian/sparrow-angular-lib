/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.19.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CountResultDto } from '../model/countResultDto';
import { DecisionRequirementsDefinitionDto } from '../model/decisionRequirementsDefinitionDto';
import { DecisionRequirementsDefinitionXmlDto } from '../model/decisionRequirementsDefinitionXmlDto';
import { ExceptionDto } from '../model/exceptionDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DecisionRequirementsDefinitionService {

    protected basePath = 'http://{host}:{port}/{contextPath}';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get Decision Requirements Definition by ID
     * Retrieves a decision requirements definition according to the &#x60;DecisionRequirementsDefinition&#x60; interface in the engine.
     * @param id The id of the decision requirements definition to be retrieved.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDecisionRequirementsDefinitionById(id: string, observe?: 'body', reportProgress?: boolean): Observable<DecisionRequirementsDefinitionDto>;
    public getDecisionRequirementsDefinitionById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DecisionRequirementsDefinitionDto>>;
    public getDecisionRequirementsDefinitionById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DecisionRequirementsDefinitionDto>>;
    public getDecisionRequirementsDefinitionById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getDecisionRequirementsDefinitionById.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<DecisionRequirementsDefinitionDto>('get',`${this.basePath}/decision-requirements-definition/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Decision Requirements Definition by Key
     * Retrieves a decision requirements definition according to the &#x60;DecisionRequirementsDefinition&#x60; interface in the engine.  Returns the latest version of the decision requirements definition  which belongs to no tenant.
     * @param key The key of the decision requirements definition (the latest version thereof) to be retrieved.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDecisionRequirementsDefinitionByKey(key: string, observe?: 'body', reportProgress?: boolean): Observable<DecisionRequirementsDefinitionDto>;
    public getDecisionRequirementsDefinitionByKey(key: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DecisionRequirementsDefinitionDto>>;
    public getDecisionRequirementsDefinitionByKey(key: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DecisionRequirementsDefinitionDto>>;
    public getDecisionRequirementsDefinitionByKey(key: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling getDecisionRequirementsDefinitionByKey.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<DecisionRequirementsDefinitionDto>('get',`${this.basePath}/decision-requirements-definition/key/${encodeURIComponent(String(key))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Decision Requirements Definition by Key and Tenant ID
     * Retrieves a decision requirements definition according to the &#x60;DecisionRequirementsDefinition&#x60; interface in the engine. Returns the latest version of the decision requirements definition  for a tenant.
     * @param key The key of the decision requirements definition (the latest version thereof) to be retrieved.
     * @param tenantId The id of the tenant to which the decision requirements definition belongs to.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDecisionRequirementsDefinitionByKeyAndTenantId(key: string, tenantId: string, observe?: 'body', reportProgress?: boolean): Observable<DecisionRequirementsDefinitionDto>;
    public getDecisionRequirementsDefinitionByKeyAndTenantId(key: string, tenantId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DecisionRequirementsDefinitionDto>>;
    public getDecisionRequirementsDefinitionByKeyAndTenantId(key: string, tenantId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DecisionRequirementsDefinitionDto>>;
    public getDecisionRequirementsDefinitionByKeyAndTenantId(key: string, tenantId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling getDecisionRequirementsDefinitionByKeyAndTenantId.');
        }

        if (tenantId === null || tenantId === undefined) {
            throw new Error('Required parameter tenantId was null or undefined when calling getDecisionRequirementsDefinitionByKeyAndTenantId.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<DecisionRequirementsDefinitionDto>('get',`${this.basePath}/decision-requirements-definition/key/${encodeURIComponent(String(key))}/tenant-id/${encodeURIComponent(String(tenantId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Decision Requirements Diagram by ID
     * Retrieves the diagram of a decision requirements definition.
     * @param id The id of the decision requirements definition.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDecisionRequirementsDefinitionDiagramById(id: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public getDecisionRequirementsDefinitionDiagramById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public getDecisionRequirementsDefinitionDiagramById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public getDecisionRequirementsDefinitionDiagramById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getDecisionRequirementsDefinitionDiagramById.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'image/_*',
            'application/octet-stream',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request('get',`${this.basePath}/decision-requirements-definition/${encodeURIComponent(String(id))}/diagram`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Decision Requirements Diagram by Key
     * Retrieves the diagram of a decision requirements definition. Returns the diagram for the latest version of the decision requirements  definition which belongs to no tenant.
     * @param key The key of the decision requirements definition (the latest version thereof) to be retrieved.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDecisionRequirementsDefinitionDiagramByKey(key: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public getDecisionRequirementsDefinitionDiagramByKey(key: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public getDecisionRequirementsDefinitionDiagramByKey(key: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public getDecisionRequirementsDefinitionDiagramByKey(key: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling getDecisionRequirementsDefinitionDiagramByKey.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'image/_*',
            'application/octet-stream',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request('get',`${this.basePath}/decision-requirements-definition/key/${encodeURIComponent(String(key))}/diagram`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Decision Requirements Diagram by Key and Tenant ID
     * Retrieves the diagram of a decision requirements definition. Returns the diagram of the latest version of the decision requirements  definition for a tenant.
     * @param key The key of the decision requirements definition (the latest version thereof) to be retrieved.
     * @param tenantId The id of the tenant to which the decision requirements definition belongs to.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDecisionRequirementsDefinitionDiagramByKeyAndTenantId(key: string, tenantId: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public getDecisionRequirementsDefinitionDiagramByKeyAndTenantId(key: string, tenantId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public getDecisionRequirementsDefinitionDiagramByKeyAndTenantId(key: string, tenantId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public getDecisionRequirementsDefinitionDiagramByKeyAndTenantId(key: string, tenantId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling getDecisionRequirementsDefinitionDiagramByKeyAndTenantId.');
        }

        if (tenantId === null || tenantId === undefined) {
            throw new Error('Required parameter tenantId was null or undefined when calling getDecisionRequirementsDefinitionDiagramByKeyAndTenantId.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'image/_*',
            'application/octet-stream',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request('get',`${this.basePath}/decision-requirements-definition/key/${encodeURIComponent(String(key))}/tenant-id/${encodeURIComponent(String(tenantId))}/diagram`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get DMN XML by ID
     * Retrieves the DMN XML of a decision requirements definition.
     * @param id The id of the decision requirements definition.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDecisionRequirementsDefinitionDmnXmlById(id: string, observe?: 'body', reportProgress?: boolean): Observable<DecisionRequirementsDefinitionXmlDto>;
    public getDecisionRequirementsDefinitionDmnXmlById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DecisionRequirementsDefinitionXmlDto>>;
    public getDecisionRequirementsDefinitionDmnXmlById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DecisionRequirementsDefinitionXmlDto>>;
    public getDecisionRequirementsDefinitionDmnXmlById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getDecisionRequirementsDefinitionDmnXmlById.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<DecisionRequirementsDefinitionXmlDto>('get',`${this.basePath}/decision-requirements-definition/${encodeURIComponent(String(id))}/xml`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get DMN XML by Key
     * Retrieves the DMN XML of a decision requirements definition. Returns the XML for the latest version of the decision requirements  definition which belongs to no tenant.
     * @param key The key of the decision requirements definition (the latest version thereof) to be retrieved.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDecisionRequirementsDefinitionDmnXmlByKey(key: string, observe?: 'body', reportProgress?: boolean): Observable<DecisionRequirementsDefinitionXmlDto>;
    public getDecisionRequirementsDefinitionDmnXmlByKey(key: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DecisionRequirementsDefinitionXmlDto>>;
    public getDecisionRequirementsDefinitionDmnXmlByKey(key: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DecisionRequirementsDefinitionXmlDto>>;
    public getDecisionRequirementsDefinitionDmnXmlByKey(key: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling getDecisionRequirementsDefinitionDmnXmlByKey.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<DecisionRequirementsDefinitionXmlDto>('get',`${this.basePath}/decision-requirements-definition/key/${encodeURIComponent(String(key))}/xml`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get DMN XML by Key and Tenant ID
     * Retrieves the DMN XML of a decision requirements definition. Returns the XML of the latest version of the decision requirements  definition for a tenant.
     * @param key The key of the decision requirements definition (the latest version thereof) to be retrieved.
     * @param tenantId The id of the tenant to which the decision requirements definition belongs to.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId(key: string, tenantId: string, observe?: 'body', reportProgress?: boolean): Observable<DecisionRequirementsDefinitionXmlDto>;
    public getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId(key: string, tenantId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DecisionRequirementsDefinitionXmlDto>>;
    public getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId(key: string, tenantId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DecisionRequirementsDefinitionXmlDto>>;
    public getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId(key: string, tenantId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId.');
        }

        if (tenantId === null || tenantId === undefined) {
            throw new Error('Required parameter tenantId was null or undefined when calling getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<DecisionRequirementsDefinitionXmlDto>('get',`${this.basePath}/decision-requirements-definition/key/${encodeURIComponent(String(key))}/tenant-id/${encodeURIComponent(String(tenantId))}/xml`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Decision Requirements Definitions
     * Queries for decision requirements definitions that fulfill given parameters. Parameters may be the properties of decision requirements definitions, such as the name, key or version.  The size of the result set can be retrieved by using the [Get Decision Requirements Definition Count](https://docs.camunda.org/manual/7.19/reference/rest/decision-requirements-definition/get-query-count/) method.
     * @param decisionRequirementsDefinitionId Filter by decision requirements definition id.
     * @param decisionRequirementsDefinitionIdIn Filter by decision requirements definition ids.
     * @param name Filter by decision requirements definition name.
     * @param nameLike Filter by decision requirements definition names that the parameter is a substring of.
     * @param deploymentId Filter by the id of the deployment a decision requirement definition belongs to.
     * @param key Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match.
     * @param keyLike Filter by decision requirements definition keys that the parameter is a substring of.
     * @param category Filter by decision requirements definition category. Exact match.
     * @param categoryLike Filter by decision requirements definition categories that the parameter is a substring of.
     * @param version Filter by decision requirements definition version.
     * @param latestVersion Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param resourceName Filter by the name of the decision requirements definition resource. Exact match.
     * @param resourceNameLike Filter by names of those decision requirements definition resources that the parameter is a substring of.
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids.
     * @param withoutTenantId Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param includeDecisionRequirementsDefinitionsWithoutTenantId Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param firstResult Pagination of results. Specifies the index of the first result to return.
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDecisionRequirementsDefinitions(decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionIdIn?: string, name?: string, nameLike?: string, deploymentId?: string, key?: string, keyLike?: string, category?: string, categoryLike?: string, version?: number, latestVersion?: boolean, resourceName?: string, resourceNameLike?: string, tenantIdIn?: string, withoutTenantId?: boolean, includeDecisionRequirementsDefinitionsWithoutTenantId?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<DecisionRequirementsDefinitionDto>>;
    public getDecisionRequirementsDefinitions(decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionIdIn?: string, name?: string, nameLike?: string, deploymentId?: string, key?: string, keyLike?: string, category?: string, categoryLike?: string, version?: number, latestVersion?: boolean, resourceName?: string, resourceNameLike?: string, tenantIdIn?: string, withoutTenantId?: boolean, includeDecisionRequirementsDefinitionsWithoutTenantId?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DecisionRequirementsDefinitionDto>>>;
    public getDecisionRequirementsDefinitions(decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionIdIn?: string, name?: string, nameLike?: string, deploymentId?: string, key?: string, keyLike?: string, category?: string, categoryLike?: string, version?: number, latestVersion?: boolean, resourceName?: string, resourceNameLike?: string, tenantIdIn?: string, withoutTenantId?: boolean, includeDecisionRequirementsDefinitionsWithoutTenantId?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DecisionRequirementsDefinitionDto>>>;
    public getDecisionRequirementsDefinitions(decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionIdIn?: string, name?: string, nameLike?: string, deploymentId?: string, key?: string, keyLike?: string, category?: string, categoryLike?: string, version?: number, latestVersion?: boolean, resourceName?: string, resourceNameLike?: string, tenantIdIn?: string, withoutTenantId?: boolean, includeDecisionRequirementsDefinitionsWithoutTenantId?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





















        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (decisionRequirementsDefinitionId !== undefined && decisionRequirementsDefinitionId !== null) {
            queryParameters = queryParameters.set('decisionRequirementsDefinitionId', <any>decisionRequirementsDefinitionId);
        }
        if (decisionRequirementsDefinitionIdIn !== undefined && decisionRequirementsDefinitionIdIn !== null) {
            queryParameters = queryParameters.set('decisionRequirementsDefinitionIdIn', <any>decisionRequirementsDefinitionIdIn);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (nameLike !== undefined && nameLike !== null) {
            queryParameters = queryParameters.set('nameLike', <any>nameLike);
        }
        if (deploymentId !== undefined && deploymentId !== null) {
            queryParameters = queryParameters.set('deploymentId', <any>deploymentId);
        }
        if (key !== undefined && key !== null) {
            queryParameters = queryParameters.set('key', <any>key);
        }
        if (keyLike !== undefined && keyLike !== null) {
            queryParameters = queryParameters.set('keyLike', <any>keyLike);
        }
        if (category !== undefined && category !== null) {
            queryParameters = queryParameters.set('category', <any>category);
        }
        if (categoryLike !== undefined && categoryLike !== null) {
            queryParameters = queryParameters.set('categoryLike', <any>categoryLike);
        }
        if (version !== undefined && version !== null) {
            queryParameters = queryParameters.set('version', <any>version);
        }
        if (latestVersion !== undefined && latestVersion !== null) {
            queryParameters = queryParameters.set('latestVersion', <any>latestVersion);
        }
        if (resourceName !== undefined && resourceName !== null) {
            queryParameters = queryParameters.set('resourceName', <any>resourceName);
        }
        if (resourceNameLike !== undefined && resourceNameLike !== null) {
            queryParameters = queryParameters.set('resourceNameLike', <any>resourceNameLike);
        }
        if (tenantIdIn !== undefined && tenantIdIn !== null) {
            queryParameters = queryParameters.set('tenantIdIn', <any>tenantIdIn);
        }
        if (withoutTenantId !== undefined && withoutTenantId !== null) {
            queryParameters = queryParameters.set('withoutTenantId', <any>withoutTenantId);
        }
        if (includeDecisionRequirementsDefinitionsWithoutTenantId !== undefined && includeDecisionRequirementsDefinitionsWithoutTenantId !== null) {
            queryParameters = queryParameters.set('includeDecisionRequirementsDefinitionsWithoutTenantId', <any>includeDecisionRequirementsDefinitionsWithoutTenantId);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (sortOrder !== undefined && sortOrder !== null) {
            queryParameters = queryParameters.set('sortOrder', <any>sortOrder);
        }
        if (firstResult !== undefined && firstResult !== null) {
            queryParameters = queryParameters.set('firstResult', <any>firstResult);
        }
        if (maxResults !== undefined && maxResults !== null) {
            queryParameters = queryParameters.set('maxResults', <any>maxResults);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<DecisionRequirementsDefinitionDto>>('get',`${this.basePath}/decision-requirements-definition`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Decision Requirements Definition Count
     * Requests the number of decision requirements definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Decision Requirements Definitions](https://docs.camunda.org/manual/7.19/reference/rest/decision-requirements-definition/get-query/) method.
     * @param decisionRequirementsDefinitionId Filter by decision requirements definition id.
     * @param decisionRequirementsDefinitionIdIn Filter by decision requirements definition ids.
     * @param name Filter by decision requirements definition name.
     * @param nameLike Filter by decision requirements definition names that the parameter is a substring of.
     * @param deploymentId Filter by the id of the deployment a decision requirement definition belongs to.
     * @param key Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match.
     * @param keyLike Filter by decision requirements definition keys that the parameter is a substring of.
     * @param category Filter by decision requirements definition category. Exact match.
     * @param categoryLike Filter by decision requirements definition categories that the parameter is a substring of.
     * @param version Filter by decision requirements definition version.
     * @param latestVersion Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param resourceName Filter by the name of the decision requirements definition resource. Exact match.
     * @param resourceNameLike Filter by names of those decision requirements definition resources that the parameter is a substring of.
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids.
     * @param withoutTenantId Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param includeDecisionRequirementsDefinitionsWithoutTenantId Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDecisionRequirementsDefinitionsCount(decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionIdIn?: string, name?: string, nameLike?: string, deploymentId?: string, key?: string, keyLike?: string, category?: string, categoryLike?: string, version?: number, latestVersion?: boolean, resourceName?: string, resourceNameLike?: string, tenantIdIn?: string, withoutTenantId?: boolean, includeDecisionRequirementsDefinitionsWithoutTenantId?: boolean, observe?: 'body', reportProgress?: boolean): Observable<CountResultDto>;
    public getDecisionRequirementsDefinitionsCount(decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionIdIn?: string, name?: string, nameLike?: string, deploymentId?: string, key?: string, keyLike?: string, category?: string, categoryLike?: string, version?: number, latestVersion?: boolean, resourceName?: string, resourceNameLike?: string, tenantIdIn?: string, withoutTenantId?: boolean, includeDecisionRequirementsDefinitionsWithoutTenantId?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CountResultDto>>;
    public getDecisionRequirementsDefinitionsCount(decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionIdIn?: string, name?: string, nameLike?: string, deploymentId?: string, key?: string, keyLike?: string, category?: string, categoryLike?: string, version?: number, latestVersion?: boolean, resourceName?: string, resourceNameLike?: string, tenantIdIn?: string, withoutTenantId?: boolean, includeDecisionRequirementsDefinitionsWithoutTenantId?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CountResultDto>>;
    public getDecisionRequirementsDefinitionsCount(decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionIdIn?: string, name?: string, nameLike?: string, deploymentId?: string, key?: string, keyLike?: string, category?: string, categoryLike?: string, version?: number, latestVersion?: boolean, resourceName?: string, resourceNameLike?: string, tenantIdIn?: string, withoutTenantId?: boolean, includeDecisionRequirementsDefinitionsWithoutTenantId?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

















        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (decisionRequirementsDefinitionId !== undefined && decisionRequirementsDefinitionId !== null) {
            queryParameters = queryParameters.set('decisionRequirementsDefinitionId', <any>decisionRequirementsDefinitionId);
        }
        if (decisionRequirementsDefinitionIdIn !== undefined && decisionRequirementsDefinitionIdIn !== null) {
            queryParameters = queryParameters.set('decisionRequirementsDefinitionIdIn', <any>decisionRequirementsDefinitionIdIn);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (nameLike !== undefined && nameLike !== null) {
            queryParameters = queryParameters.set('nameLike', <any>nameLike);
        }
        if (deploymentId !== undefined && deploymentId !== null) {
            queryParameters = queryParameters.set('deploymentId', <any>deploymentId);
        }
        if (key !== undefined && key !== null) {
            queryParameters = queryParameters.set('key', <any>key);
        }
        if (keyLike !== undefined && keyLike !== null) {
            queryParameters = queryParameters.set('keyLike', <any>keyLike);
        }
        if (category !== undefined && category !== null) {
            queryParameters = queryParameters.set('category', <any>category);
        }
        if (categoryLike !== undefined && categoryLike !== null) {
            queryParameters = queryParameters.set('categoryLike', <any>categoryLike);
        }
        if (version !== undefined && version !== null) {
            queryParameters = queryParameters.set('version', <any>version);
        }
        if (latestVersion !== undefined && latestVersion !== null) {
            queryParameters = queryParameters.set('latestVersion', <any>latestVersion);
        }
        if (resourceName !== undefined && resourceName !== null) {
            queryParameters = queryParameters.set('resourceName', <any>resourceName);
        }
        if (resourceNameLike !== undefined && resourceNameLike !== null) {
            queryParameters = queryParameters.set('resourceNameLike', <any>resourceNameLike);
        }
        if (tenantIdIn !== undefined && tenantIdIn !== null) {
            queryParameters = queryParameters.set('tenantIdIn', <any>tenantIdIn);
        }
        if (withoutTenantId !== undefined && withoutTenantId !== null) {
            queryParameters = queryParameters.set('withoutTenantId', <any>withoutTenantId);
        }
        if (includeDecisionRequirementsDefinitionsWithoutTenantId !== undefined && includeDecisionRequirementsDefinitionsWithoutTenantId !== null) {
            queryParameters = queryParameters.set('includeDecisionRequirementsDefinitionsWithoutTenantId', <any>includeDecisionRequirementsDefinitionsWithoutTenantId);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CountResultDto>('get',`${this.basePath}/decision-requirements-definition/count`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
