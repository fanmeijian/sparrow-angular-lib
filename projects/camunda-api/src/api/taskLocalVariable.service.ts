/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.19.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ExceptionDto } from '../model/exceptionDto';
import { PatchVariablesDto } from '../model/patchVariablesDto';
import { VariableValueDto } from '../model/variableValueDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TaskLocalVariableService {

    protected basePath = 'http://{host}:{port}/{contextPath}';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Delete Local Task Variable
     * Removes a local variable from a task by id.
     * @param id The id of the task to delete the variable from.
     * @param varName The name of the variable to be removed.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteTaskLocalVariable(id: string, varName: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteTaskLocalVariable(id: string, varName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteTaskLocalVariable(id: string, varName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteTaskLocalVariable(id: string, varName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteTaskLocalVariable.');
        }

        if (varName === null || varName === undefined) {
            throw new Error('Required parameter varName was null or undefined when calling deleteTaskLocalVariable.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/task/${encodeURIComponent(String(id))}/localVariables/${encodeURIComponent(String(varName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Local Task Variable
     * Retrieves a variable from the context of a given task by id.
     * @param id The id of the task to retrieve the variable from.
     * @param varName The name of the variable to get
     * @param deserializeValue Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTaskLocalVariable(id: string, varName: string, deserializeValue?: boolean, observe?: 'body', reportProgress?: boolean): Observable<VariableValueDto>;
    public getTaskLocalVariable(id: string, varName: string, deserializeValue?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VariableValueDto>>;
    public getTaskLocalVariable(id: string, varName: string, deserializeValue?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VariableValueDto>>;
    public getTaskLocalVariable(id: string, varName: string, deserializeValue?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getTaskLocalVariable.');
        }

        if (varName === null || varName === undefined) {
            throw new Error('Required parameter varName was null or undefined when calling getTaskLocalVariable.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (deserializeValue !== undefined && deserializeValue !== null) {
            queryParameters = queryParameters.set('deserializeValue', <any>deserializeValue);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<VariableValueDto>('get',`${this.basePath}/task/${encodeURIComponent(String(id))}/localVariables/${encodeURIComponent(String(varName))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Local Task Variable (Binary)
     * Retrieves a binary variable from the context of a given task by id. Applicable for byte array and file variables.
     * @param id The id of the task to retrieve the variable for.
     * @param varName The name of the variable to retrieve.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTaskLocalVariableBinary(id: string, varName: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public getTaskLocalVariableBinary(id: string, varName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public getTaskLocalVariableBinary(id: string, varName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public getTaskLocalVariableBinary(id: string, varName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getTaskLocalVariableBinary.');
        }

        if (varName === null || varName === undefined) {
            throw new Error('Required parameter varName was null or undefined when calling getTaskLocalVariableBinary.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream',
            'text/plain',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request('get',`${this.basePath}/task/${encodeURIComponent(String(id))}/localVariables/${encodeURIComponent(String(varName))}/data`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Local Task Variables
     * Retrieves all variables of a given task by id.
     * @param id The id of the task to retrieve the variables from.
     * @param deserializeValues Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTaskLocalVariables(id: string, deserializeValues?: boolean, observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: VariableValueDto; }>;
    public getTaskLocalVariables(id: string, deserializeValues?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: VariableValueDto; }>>;
    public getTaskLocalVariables(id: string, deserializeValues?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: VariableValueDto; }>>;
    public getTaskLocalVariables(id: string, deserializeValues?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getTaskLocalVariables.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (deserializeValues !== undefined && deserializeValues !== null) {
            queryParameters = queryParameters.set('deserializeValues', <any>deserializeValues);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<{ [key: string]: VariableValueDto; }>('get',`${this.basePath}/task/${encodeURIComponent(String(id))}/localVariables`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update/Delete Local Task Variables
     * Updates or deletes the variables in the context of a task. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.
     * @param id The id of the task to set variables for.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modifyTaskLocalVariables(id: string, body?: PatchVariablesDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public modifyTaskLocalVariables(id: string, body?: PatchVariablesDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public modifyTaskLocalVariables(id: string, body?: PatchVariablesDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public modifyTaskLocalVariables(id: string, body?: PatchVariablesDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling modifyTaskLocalVariables.');
        }


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/task/${encodeURIComponent(String(id))}/localVariables`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Local Task Variable
     * Sets a variable in the context of a given task.
     * @param id The id of the task to set the variable for.
     * @param varName The name of the variable to set.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putTaskLocalVariable(id: string, varName: string, body?: VariableValueDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public putTaskLocalVariable(id: string, varName: string, body?: VariableValueDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public putTaskLocalVariable(id: string, varName: string, body?: VariableValueDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public putTaskLocalVariable(id: string, varName: string, body?: VariableValueDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putTaskLocalVariable.');
        }

        if (varName === null || varName === undefined) {
            throw new Error('Required parameter varName was null or undefined when calling putTaskLocalVariable.');
        }


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/task/${encodeURIComponent(String(id))}/localVariables/${encodeURIComponent(String(varName))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Local Task Variable (Binary)
     * Sets the serialized value for a binary variable or the binary value for a file variable.
     * @param id The id of the task to retrieve the variable for.
     * @param varName The name of the variable to retrieve.
     * @param data 
     * @param valueType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setBinaryTaskLocalVariableForm(id: string, varName: string, data?: Blob, valueType?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setBinaryTaskLocalVariableForm(id: string, varName: string, data?: Blob, valueType?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setBinaryTaskLocalVariableForm(id: string, varName: string, data?: Blob, valueType?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setBinaryTaskLocalVariableForm(id: string, varName: string, data?: Blob, valueType?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling setBinaryTaskLocalVariable.');
        }

        if (varName === null || varName === undefined) {
            throw new Error('Required parameter varName was null or undefined when calling setBinaryTaskLocalVariable.');
        }



        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (data !== undefined) {
            formParams = formParams.append('data', <any>data) as any || formParams;
        }
        if (valueType !== undefined) {
            formParams = formParams.append('valueType', <any>valueType) as any || formParams;
        }

        return this.httpClient.request<any>('post',`${this.basePath}/task/${encodeURIComponent(String(id))}/localVariables/${encodeURIComponent(String(varName))}/data`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
