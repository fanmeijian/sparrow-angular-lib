/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.19.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CountResultDto } from '../model/countResultDto';
import { ExceptionDto } from '../model/exceptionDto';
import { HistoricJobLogDto } from '../model/historicJobLogDto';
import { HistoricJobLogQueryDto } from '../model/historicJobLogQueryDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class HistoricJobLogService {

    protected basePath = 'http://{host}:{port}/{contextPath}';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get Job Log
     * Retrieves a historic job log by id.
     * @param id The id of the log entry.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHistoricJobLog(id: string, observe?: 'body', reportProgress?: boolean): Observable<HistoricJobLogDto>;
    public getHistoricJobLog(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HistoricJobLogDto>>;
    public getHistoricJobLog(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HistoricJobLogDto>>;
    public getHistoricJobLog(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getHistoricJobLog.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<HistoricJobLogDto>('get',`${this.basePath}/history/job-log/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Job Logs
     * Queries for historic job logs that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Job Log Count](https://docs.camunda.org/manual/7.19/reference/rest/history/job-log/get-job-log-query-count/) method.
     * @param logId Filter by historic job log id.
     * @param jobId Filter by job id.
     * @param jobExceptionMessage Filter by job exception message.
     * @param jobDefinitionId Filter by job definition id.
     * @param jobDefinitionType Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types.
     * @param jobDefinitionConfiguration Filter by job definition configuration.
     * @param activityIdIn Only include historic job logs which belong to one of the passed activity ids.
     * @param failedActivityIdIn Only include historic job logs which belong to failures of one of the passed activity ids.
     * @param executionIdIn Only include historic job logs which belong to one of the passed execution ids.
     * @param processInstanceId Filter by process instance id.
     * @param processDefinitionId Filter by process definition id.
     * @param processDefinitionKey Filter by process definition key.
     * @param deploymentId Filter by deployment id.
     * @param tenantIdIn Only include historic job log entries which belong to one of the passed and comma- separated tenant ids.
     * @param withoutTenantId Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param hostname Filter by hostname.
     * @param jobPriorityLowerThanOrEquals Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
     * @param jobPriorityHigherThanOrEquals Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
     * @param creationLog Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param failureLog Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param successLog Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param deletionLog Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param firstResult Pagination of results. Specifies the index of the first result to return.
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHistoricJobLogs(logId?: string, jobId?: string, jobExceptionMessage?: string, jobDefinitionId?: string, jobDefinitionType?: string, jobDefinitionConfiguration?: string, activityIdIn?: string, failedActivityIdIn?: string, executionIdIn?: string, processInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, deploymentId?: string, tenantIdIn?: string, withoutTenantId?: boolean, hostname?: string, jobPriorityLowerThanOrEquals?: number, jobPriorityHigherThanOrEquals?: number, creationLog?: boolean, failureLog?: boolean, successLog?: boolean, deletionLog?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<HistoricJobLogDto>>;
    public getHistoricJobLogs(logId?: string, jobId?: string, jobExceptionMessage?: string, jobDefinitionId?: string, jobDefinitionType?: string, jobDefinitionConfiguration?: string, activityIdIn?: string, failedActivityIdIn?: string, executionIdIn?: string, processInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, deploymentId?: string, tenantIdIn?: string, withoutTenantId?: boolean, hostname?: string, jobPriorityLowerThanOrEquals?: number, jobPriorityHigherThanOrEquals?: number, creationLog?: boolean, failureLog?: boolean, successLog?: boolean, deletionLog?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<HistoricJobLogDto>>>;
    public getHistoricJobLogs(logId?: string, jobId?: string, jobExceptionMessage?: string, jobDefinitionId?: string, jobDefinitionType?: string, jobDefinitionConfiguration?: string, activityIdIn?: string, failedActivityIdIn?: string, executionIdIn?: string, processInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, deploymentId?: string, tenantIdIn?: string, withoutTenantId?: boolean, hostname?: string, jobPriorityLowerThanOrEquals?: number, jobPriorityHigherThanOrEquals?: number, creationLog?: boolean, failureLog?: boolean, successLog?: boolean, deletionLog?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<HistoricJobLogDto>>>;
    public getHistoricJobLogs(logId?: string, jobId?: string, jobExceptionMessage?: string, jobDefinitionId?: string, jobDefinitionType?: string, jobDefinitionConfiguration?: string, activityIdIn?: string, failedActivityIdIn?: string, executionIdIn?: string, processInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, deploymentId?: string, tenantIdIn?: string, withoutTenantId?: boolean, hostname?: string, jobPriorityLowerThanOrEquals?: number, jobPriorityHigherThanOrEquals?: number, creationLog?: boolean, failureLog?: boolean, successLog?: boolean, deletionLog?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



























        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (logId !== undefined && logId !== null) {
            queryParameters = queryParameters.set('logId', <any>logId);
        }
        if (jobId !== undefined && jobId !== null) {
            queryParameters = queryParameters.set('jobId', <any>jobId);
        }
        if (jobExceptionMessage !== undefined && jobExceptionMessage !== null) {
            queryParameters = queryParameters.set('jobExceptionMessage', <any>jobExceptionMessage);
        }
        if (jobDefinitionId !== undefined && jobDefinitionId !== null) {
            queryParameters = queryParameters.set('jobDefinitionId', <any>jobDefinitionId);
        }
        if (jobDefinitionType !== undefined && jobDefinitionType !== null) {
            queryParameters = queryParameters.set('jobDefinitionType', <any>jobDefinitionType);
        }
        if (jobDefinitionConfiguration !== undefined && jobDefinitionConfiguration !== null) {
            queryParameters = queryParameters.set('jobDefinitionConfiguration', <any>jobDefinitionConfiguration);
        }
        if (activityIdIn !== undefined && activityIdIn !== null) {
            queryParameters = queryParameters.set('activityIdIn', <any>activityIdIn);
        }
        if (failedActivityIdIn !== undefined && failedActivityIdIn !== null) {
            queryParameters = queryParameters.set('failedActivityIdIn', <any>failedActivityIdIn);
        }
        if (executionIdIn !== undefined && executionIdIn !== null) {
            queryParameters = queryParameters.set('executionIdIn', <any>executionIdIn);
        }
        if (processInstanceId !== undefined && processInstanceId !== null) {
            queryParameters = queryParameters.set('processInstanceId', <any>processInstanceId);
        }
        if (processDefinitionId !== undefined && processDefinitionId !== null) {
            queryParameters = queryParameters.set('processDefinitionId', <any>processDefinitionId);
        }
        if (processDefinitionKey !== undefined && processDefinitionKey !== null) {
            queryParameters = queryParameters.set('processDefinitionKey', <any>processDefinitionKey);
        }
        if (deploymentId !== undefined && deploymentId !== null) {
            queryParameters = queryParameters.set('deploymentId', <any>deploymentId);
        }
        if (tenantIdIn !== undefined && tenantIdIn !== null) {
            queryParameters = queryParameters.set('tenantIdIn', <any>tenantIdIn);
        }
        if (withoutTenantId !== undefined && withoutTenantId !== null) {
            queryParameters = queryParameters.set('withoutTenantId', <any>withoutTenantId);
        }
        if (hostname !== undefined && hostname !== null) {
            queryParameters = queryParameters.set('hostname', <any>hostname);
        }
        if (jobPriorityLowerThanOrEquals !== undefined && jobPriorityLowerThanOrEquals !== null) {
            queryParameters = queryParameters.set('jobPriorityLowerThanOrEquals', <any>jobPriorityLowerThanOrEquals);
        }
        if (jobPriorityHigherThanOrEquals !== undefined && jobPriorityHigherThanOrEquals !== null) {
            queryParameters = queryParameters.set('jobPriorityHigherThanOrEquals', <any>jobPriorityHigherThanOrEquals);
        }
        if (creationLog !== undefined && creationLog !== null) {
            queryParameters = queryParameters.set('creationLog', <any>creationLog);
        }
        if (failureLog !== undefined && failureLog !== null) {
            queryParameters = queryParameters.set('failureLog', <any>failureLog);
        }
        if (successLog !== undefined && successLog !== null) {
            queryParameters = queryParameters.set('successLog', <any>successLog);
        }
        if (deletionLog !== undefined && deletionLog !== null) {
            queryParameters = queryParameters.set('deletionLog', <any>deletionLog);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (sortOrder !== undefined && sortOrder !== null) {
            queryParameters = queryParameters.set('sortOrder', <any>sortOrder);
        }
        if (firstResult !== undefined && firstResult !== null) {
            queryParameters = queryParameters.set('firstResult', <any>firstResult);
        }
        if (maxResults !== undefined && maxResults !== null) {
            queryParameters = queryParameters.set('maxResults', <any>maxResults);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<HistoricJobLogDto>>('get',`${this.basePath}/history/job-log`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Job Log Count
     * Queries for the number of historic job logs that fulfill the given parameters. Takes the same parameters as the [Get Job Logs](https://docs.camunda.org/manual/7.19/reference/rest/history/job-log/get-job-log-query/) method.
     * @param logId Filter by historic job log id.
     * @param jobId Filter by job id.
     * @param jobExceptionMessage Filter by job exception message.
     * @param jobDefinitionId Filter by job definition id.
     * @param jobDefinitionType Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types.
     * @param jobDefinitionConfiguration Filter by job definition configuration.
     * @param activityIdIn Only include historic job logs which belong to one of the passed activity ids.
     * @param failedActivityIdIn Only include historic job logs which belong to failures of one of the passed activity ids.
     * @param executionIdIn Only include historic job logs which belong to one of the passed execution ids.
     * @param processInstanceId Filter by process instance id.
     * @param processDefinitionId Filter by process definition id.
     * @param processDefinitionKey Filter by process definition key.
     * @param deploymentId Filter by deployment id.
     * @param tenantIdIn Only include historic job log entries which belong to one of the passed and comma- separated tenant ids.
     * @param withoutTenantId Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param hostname Filter by hostname.
     * @param jobPriorityLowerThanOrEquals Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
     * @param jobPriorityHigherThanOrEquals Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
     * @param creationLog Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param failureLog Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param successLog Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param deletionLog Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHistoricJobLogsCount(logId?: string, jobId?: string, jobExceptionMessage?: string, jobDefinitionId?: string, jobDefinitionType?: string, jobDefinitionConfiguration?: string, activityIdIn?: string, failedActivityIdIn?: string, executionIdIn?: string, processInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, deploymentId?: string, tenantIdIn?: string, withoutTenantId?: boolean, hostname?: string, jobPriorityLowerThanOrEquals?: number, jobPriorityHigherThanOrEquals?: number, creationLog?: boolean, failureLog?: boolean, successLog?: boolean, deletionLog?: boolean, observe?: 'body', reportProgress?: boolean): Observable<CountResultDto>;
    public getHistoricJobLogsCount(logId?: string, jobId?: string, jobExceptionMessage?: string, jobDefinitionId?: string, jobDefinitionType?: string, jobDefinitionConfiguration?: string, activityIdIn?: string, failedActivityIdIn?: string, executionIdIn?: string, processInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, deploymentId?: string, tenantIdIn?: string, withoutTenantId?: boolean, hostname?: string, jobPriorityLowerThanOrEquals?: number, jobPriorityHigherThanOrEquals?: number, creationLog?: boolean, failureLog?: boolean, successLog?: boolean, deletionLog?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CountResultDto>>;
    public getHistoricJobLogsCount(logId?: string, jobId?: string, jobExceptionMessage?: string, jobDefinitionId?: string, jobDefinitionType?: string, jobDefinitionConfiguration?: string, activityIdIn?: string, failedActivityIdIn?: string, executionIdIn?: string, processInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, deploymentId?: string, tenantIdIn?: string, withoutTenantId?: boolean, hostname?: string, jobPriorityLowerThanOrEquals?: number, jobPriorityHigherThanOrEquals?: number, creationLog?: boolean, failureLog?: boolean, successLog?: boolean, deletionLog?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CountResultDto>>;
    public getHistoricJobLogsCount(logId?: string, jobId?: string, jobExceptionMessage?: string, jobDefinitionId?: string, jobDefinitionType?: string, jobDefinitionConfiguration?: string, activityIdIn?: string, failedActivityIdIn?: string, executionIdIn?: string, processInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, deploymentId?: string, tenantIdIn?: string, withoutTenantId?: boolean, hostname?: string, jobPriorityLowerThanOrEquals?: number, jobPriorityHigherThanOrEquals?: number, creationLog?: boolean, failureLog?: boolean, successLog?: boolean, deletionLog?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {























        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (logId !== undefined && logId !== null) {
            queryParameters = queryParameters.set('logId', <any>logId);
        }
        if (jobId !== undefined && jobId !== null) {
            queryParameters = queryParameters.set('jobId', <any>jobId);
        }
        if (jobExceptionMessage !== undefined && jobExceptionMessage !== null) {
            queryParameters = queryParameters.set('jobExceptionMessage', <any>jobExceptionMessage);
        }
        if (jobDefinitionId !== undefined && jobDefinitionId !== null) {
            queryParameters = queryParameters.set('jobDefinitionId', <any>jobDefinitionId);
        }
        if (jobDefinitionType !== undefined && jobDefinitionType !== null) {
            queryParameters = queryParameters.set('jobDefinitionType', <any>jobDefinitionType);
        }
        if (jobDefinitionConfiguration !== undefined && jobDefinitionConfiguration !== null) {
            queryParameters = queryParameters.set('jobDefinitionConfiguration', <any>jobDefinitionConfiguration);
        }
        if (activityIdIn !== undefined && activityIdIn !== null) {
            queryParameters = queryParameters.set('activityIdIn', <any>activityIdIn);
        }
        if (failedActivityIdIn !== undefined && failedActivityIdIn !== null) {
            queryParameters = queryParameters.set('failedActivityIdIn', <any>failedActivityIdIn);
        }
        if (executionIdIn !== undefined && executionIdIn !== null) {
            queryParameters = queryParameters.set('executionIdIn', <any>executionIdIn);
        }
        if (processInstanceId !== undefined && processInstanceId !== null) {
            queryParameters = queryParameters.set('processInstanceId', <any>processInstanceId);
        }
        if (processDefinitionId !== undefined && processDefinitionId !== null) {
            queryParameters = queryParameters.set('processDefinitionId', <any>processDefinitionId);
        }
        if (processDefinitionKey !== undefined && processDefinitionKey !== null) {
            queryParameters = queryParameters.set('processDefinitionKey', <any>processDefinitionKey);
        }
        if (deploymentId !== undefined && deploymentId !== null) {
            queryParameters = queryParameters.set('deploymentId', <any>deploymentId);
        }
        if (tenantIdIn !== undefined && tenantIdIn !== null) {
            queryParameters = queryParameters.set('tenantIdIn', <any>tenantIdIn);
        }
        if (withoutTenantId !== undefined && withoutTenantId !== null) {
            queryParameters = queryParameters.set('withoutTenantId', <any>withoutTenantId);
        }
        if (hostname !== undefined && hostname !== null) {
            queryParameters = queryParameters.set('hostname', <any>hostname);
        }
        if (jobPriorityLowerThanOrEquals !== undefined && jobPriorityLowerThanOrEquals !== null) {
            queryParameters = queryParameters.set('jobPriorityLowerThanOrEquals', <any>jobPriorityLowerThanOrEquals);
        }
        if (jobPriorityHigherThanOrEquals !== undefined && jobPriorityHigherThanOrEquals !== null) {
            queryParameters = queryParameters.set('jobPriorityHigherThanOrEquals', <any>jobPriorityHigherThanOrEquals);
        }
        if (creationLog !== undefined && creationLog !== null) {
            queryParameters = queryParameters.set('creationLog', <any>creationLog);
        }
        if (failureLog !== undefined && failureLog !== null) {
            queryParameters = queryParameters.set('failureLog', <any>failureLog);
        }
        if (successLog !== undefined && successLog !== null) {
            queryParameters = queryParameters.set('successLog', <any>successLog);
        }
        if (deletionLog !== undefined && deletionLog !== null) {
            queryParameters = queryParameters.set('deletionLog', <any>deletionLog);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CountResultDto>('get',`${this.basePath}/history/job-log/count`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Job Log Exception Stacktrace
     * Retrieves the corresponding exception stacktrace to the passed historic job log by id.
     * @param id The id of the historic job log to get the exception stacktrace for.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStacktraceHistoricJobLog(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getStacktraceHistoricJobLog(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getStacktraceHistoricJobLog(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getStacktraceHistoricJobLog(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getStacktraceHistoricJobLog.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/history/job-log/${encodeURIComponent(String(id))}/stacktrace`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Job Logs (POST)
     * Queries for historic job logs that fulfill the given parameters. This method is slightly more powerful than the [Get Job Logs](https://docs.camunda.org/manual/7.19/reference/rest/history/job-log/get-job-log-query/) method because it allows filtering by historic job logs values of the different types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
     * @param body 
     * @param firstResult Pagination of results. Specifies the index of the first result to return.
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public queryHistoricJobLogs(body?: HistoricJobLogQueryDto, firstResult?: number, maxResults?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<HistoricJobLogDto>>;
    public queryHistoricJobLogs(body?: HistoricJobLogQueryDto, firstResult?: number, maxResults?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<HistoricJobLogDto>>>;
    public queryHistoricJobLogs(body?: HistoricJobLogQueryDto, firstResult?: number, maxResults?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<HistoricJobLogDto>>>;
    public queryHistoricJobLogs(body?: HistoricJobLogQueryDto, firstResult?: number, maxResults?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (firstResult !== undefined && firstResult !== null) {
            queryParameters = queryParameters.set('firstResult', <any>firstResult);
        }
        if (maxResults !== undefined && maxResults !== null) {
            queryParameters = queryParameters.set('maxResults', <any>maxResults);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<HistoricJobLogDto>>('post',`${this.basePath}/history/job-log`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Job Log Count (POST)
     * Queries for the number of historic job logs that fulfill the given parameters. This method takes the same message body as the [Get Job Logs (POST)](https://docs.camunda.org/manual/7.19/reference/rest/history/job-log/post-job-log-query/) method and therefore it is slightly more powerful than the [Get Job Log Count](https://docs.camunda.org/manual/7.19/reference/rest/history/job-log/get-job-log-query-count/) method.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public queryHistoricJobLogsCount(body?: HistoricJobLogQueryDto, observe?: 'body', reportProgress?: boolean): Observable<CountResultDto>;
    public queryHistoricJobLogsCount(body?: HistoricJobLogQueryDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CountResultDto>>;
    public queryHistoricJobLogsCount(body?: HistoricJobLogQueryDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CountResultDto>>;
    public queryHistoricJobLogsCount(body?: HistoricJobLogQueryDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CountResultDto>('post',`${this.basePath}/history/job-log/count`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
