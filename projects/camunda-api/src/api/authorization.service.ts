/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.19.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AuthorizationCheckResultDto } from '../model/authorizationCheckResultDto';
import { AuthorizationCreateDto } from '../model/authorizationCreateDto';
import { AuthorizationDto } from '../model/authorizationDto';
import { AuthorizationUpdateDto } from '../model/authorizationUpdateDto';
import { CountResultDto } from '../model/countResultDto';
import { ExceptionDto } from '../model/exceptionDto';
import { ResourceOptionsDto } from '../model/resourceOptionsDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AuthorizationService {

    protected basePath = 'http://{host}:{port}/{contextPath}';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Authorization Resource Options
     * The OPTIONS request allows you to check for the set of available operations that the currently authenticated user can perform on the &#x60;/authorization&#x60; resource. Whether the user can perform an operation or not may depend on various factors, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public availableOperationsAuthorization(observe?: 'body', reportProgress?: boolean): Observable<ResourceOptionsDto>;
    public availableOperationsAuthorization(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceOptionsDto>>;
    public availableOperationsAuthorization(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceOptionsDto>>;
    public availableOperationsAuthorization(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ResourceOptionsDto>('options',`${this.basePath}/authorization`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Authorization Resource Options
     * The OPTIONS request allows you to check for the set of available operations that the currently authenticated user can perform on a given instance of the &#x60;/authorization&#x60; resource. Whether the user can perform an operation or not may depend on various factors, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     * @param id The id of the authorization to be retrieved.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public availableOperationsAuthorizationInstance(id: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceOptionsDto>;
    public availableOperationsAuthorizationInstance(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceOptionsDto>>;
    public availableOperationsAuthorizationInstance(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceOptionsDto>>;
    public availableOperationsAuthorizationInstance(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling availableOperationsAuthorizationInstance.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ResourceOptionsDto>('options',`${this.basePath}/authorization/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a New Authorization
     * Creates a new authorization.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createAuthorization(body?: AuthorizationCreateDto, observe?: 'body', reportProgress?: boolean): Observable<AuthorizationDto>;
    public createAuthorization(body?: AuthorizationCreateDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AuthorizationDto>>;
    public createAuthorization(body?: AuthorizationCreateDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AuthorizationDto>>;
    public createAuthorization(body?: AuthorizationCreateDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<AuthorizationDto>('post',`${this.basePath}/authorization/create`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Authorization
     * Deletes an authorization by id.
     * @param id The id of the authorization to be deleted.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAuthorization(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteAuthorization(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteAuthorization(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteAuthorization(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteAuthorization.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/authorization/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Authorization
     * Retrieves an authorization by id.
     * @param id The id of the authorization to be retrieved.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAuthorization(id: string, observe?: 'body', reportProgress?: boolean): Observable<AuthorizationDto>;
    public getAuthorization(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AuthorizationDto>>;
    public getAuthorization(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AuthorizationDto>>;
    public getAuthorization(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getAuthorization.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<AuthorizationDto>('get',`${this.basePath}/authorization/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Authorization Count
     * Queries for authorizations using a list of parameters and retrieves the count.
     * @param id Filter by the id of the authorization.
     * @param type Filter by authorization type. (0&#x3D;global, 1&#x3D;grant, 2&#x3D;revoke). See the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/authorization-service/#authorization-type) for more information about authorization types.
     * @param userIdIn Filter by a comma-separated list of userIds.
     * @param groupIdIn Filter by a comma-separated list of groupIds.
     * @param resourceType Filter by an integer representation of the resource type. See the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/authorization-service/#resources) for a list of integer representations of resource types.
     * @param resourceId Filter by resource id.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAuthorizationCount(id?: string, type?: number, userIdIn?: string, groupIdIn?: string, resourceType?: number, resourceId?: string, observe?: 'body', reportProgress?: boolean): Observable<CountResultDto>;
    public getAuthorizationCount(id?: string, type?: number, userIdIn?: string, groupIdIn?: string, resourceType?: number, resourceId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CountResultDto>>;
    public getAuthorizationCount(id?: string, type?: number, userIdIn?: string, groupIdIn?: string, resourceType?: number, resourceId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CountResultDto>>;
    public getAuthorizationCount(id?: string, type?: number, userIdIn?: string, groupIdIn?: string, resourceType?: number, resourceId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }
        if (type !== undefined && type !== null) {
            queryParameters = queryParameters.set('type', <any>type);
        }
        if (userIdIn !== undefined && userIdIn !== null) {
            queryParameters = queryParameters.set('userIdIn', <any>userIdIn);
        }
        if (groupIdIn !== undefined && groupIdIn !== null) {
            queryParameters = queryParameters.set('groupIdIn', <any>groupIdIn);
        }
        if (resourceType !== undefined && resourceType !== null) {
            queryParameters = queryParameters.set('resourceType', <any>resourceType);
        }
        if (resourceId !== undefined && resourceId !== null) {
            queryParameters = queryParameters.set('resourceId', <any>resourceId);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CountResultDto>('get',`${this.basePath}/authorization/count`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Perform an Authorization Check
     * Performs an authorization check for the currently authenticated user.
     * @param permissionName String value representing the permission name to check for.
     * @param resourceName String value for the name of the resource to check permissions for.
     * @param resourceType An integer representing the resource type to check permissions for. See the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/authorization-service/#resources) for a list of integer representations of resource types.
     * @param resourceId The id of the resource to check permissions for. If left blank, a check for global permissions on the resource is performed.
     * @param userId The id of the user to check permissions for. The currently authenticated user must have a READ permission for the Authorization resource. If &#x60;userId&#x60; is blank, a check for the currently authenticated user is performed.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public isUserAuthorized(permissionName: string, resourceName: string, resourceType: number, resourceId?: string, userId?: string, observe?: 'body', reportProgress?: boolean): Observable<AuthorizationCheckResultDto>;
    public isUserAuthorized(permissionName: string, resourceName: string, resourceType: number, resourceId?: string, userId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AuthorizationCheckResultDto>>;
    public isUserAuthorized(permissionName: string, resourceName: string, resourceType: number, resourceId?: string, userId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AuthorizationCheckResultDto>>;
    public isUserAuthorized(permissionName: string, resourceName: string, resourceType: number, resourceId?: string, userId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (permissionName === null || permissionName === undefined) {
            throw new Error('Required parameter permissionName was null or undefined when calling isUserAuthorized.');
        }

        if (resourceName === null || resourceName === undefined) {
            throw new Error('Required parameter resourceName was null or undefined when calling isUserAuthorized.');
        }

        if (resourceType === null || resourceType === undefined) {
            throw new Error('Required parameter resourceType was null or undefined when calling isUserAuthorized.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (permissionName !== undefined && permissionName !== null) {
            queryParameters = queryParameters.set('permissionName', <any>permissionName);
        }
        if (resourceName !== undefined && resourceName !== null) {
            queryParameters = queryParameters.set('resourceName', <any>resourceName);
        }
        if (resourceType !== undefined && resourceType !== null) {
            queryParameters = queryParameters.set('resourceType', <any>resourceType);
        }
        if (resourceId !== undefined && resourceId !== null) {
            queryParameters = queryParameters.set('resourceId', <any>resourceId);
        }
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<AuthorizationCheckResultDto>('get',`${this.basePath}/authorization/check`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Authorizations
     * Queries for a list of authorizations using a list of parameters. The size of the result set can be retrieved by using the [Get Authorization Count](https://docs.camunda.org/manual/7.19/reference/rest/authorization/get-query-count/) method.
     * @param id Filter by the id of the authorization.
     * @param type Filter by authorization type. (0&#x3D;global, 1&#x3D;grant, 2&#x3D;revoke). See the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/authorization-service/#authorization-type) for more information about authorization types.
     * @param userIdIn Filter by a comma-separated list of userIds.
     * @param groupIdIn Filter by a comma-separated list of groupIds.
     * @param resourceType Filter by an integer representation of the resource type. See the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/authorization-service/#resources) for a list of integer representations of resource types.
     * @param resourceId Filter by resource id.
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param firstResult Pagination of results. Specifies the index of the first result to return.
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public queryAuthorizations(id?: string, type?: number, userIdIn?: string, groupIdIn?: string, resourceType?: number, resourceId?: string, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<AuthorizationDto>>;
    public queryAuthorizations(id?: string, type?: number, userIdIn?: string, groupIdIn?: string, resourceType?: number, resourceId?: string, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<AuthorizationDto>>>;
    public queryAuthorizations(id?: string, type?: number, userIdIn?: string, groupIdIn?: string, resourceType?: number, resourceId?: string, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<AuthorizationDto>>>;
    public queryAuthorizations(id?: string, type?: number, userIdIn?: string, groupIdIn?: string, resourceType?: number, resourceId?: string, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {











        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }
        if (type !== undefined && type !== null) {
            queryParameters = queryParameters.set('type', <any>type);
        }
        if (userIdIn !== undefined && userIdIn !== null) {
            queryParameters = queryParameters.set('userIdIn', <any>userIdIn);
        }
        if (groupIdIn !== undefined && groupIdIn !== null) {
            queryParameters = queryParameters.set('groupIdIn', <any>groupIdIn);
        }
        if (resourceType !== undefined && resourceType !== null) {
            queryParameters = queryParameters.set('resourceType', <any>resourceType);
        }
        if (resourceId !== undefined && resourceId !== null) {
            queryParameters = queryParameters.set('resourceId', <any>resourceId);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (sortOrder !== undefined && sortOrder !== null) {
            queryParameters = queryParameters.set('sortOrder', <any>sortOrder);
        }
        if (firstResult !== undefined && firstResult !== null) {
            queryParameters = queryParameters.set('firstResult', <any>firstResult);
        }
        if (maxResults !== undefined && maxResults !== null) {
            queryParameters = queryParameters.set('maxResults', <any>maxResults);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<AuthorizationDto>>('get',`${this.basePath}/authorization`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update an Authorization
     * Updates an authorization by id.
     * @param id The id of the authorization to be updated.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAuthorization(id: string, body?: AuthorizationUpdateDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateAuthorization(id: string, body?: AuthorizationUpdateDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateAuthorization(id: string, body?: AuthorizationUpdateDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateAuthorization(id: string, body?: AuthorizationUpdateDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateAuthorization.');
        }


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/authorization/${encodeURIComponent(String(id))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
