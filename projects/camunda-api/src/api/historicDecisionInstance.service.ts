/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.19.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { BatchDto } from '../model/batchDto';
import { CountResultDto } from '../model/countResultDto';
import { DeleteHistoricDecisionInstancesDto } from '../model/deleteHistoricDecisionInstancesDto';
import { ExceptionDto } from '../model/exceptionDto';
import { HistoricDecisionInstanceDto } from '../model/historicDecisionInstanceDto';
import { SetRemovalTimeToHistoricDecisionInstancesDto } from '../model/setRemovalTimeToHistoricDecisionInstancesDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class HistoricDecisionInstanceService {

    protected basePath = 'http://{host}:{port}/{contextPath}';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Delete Async (POST)
     * Delete multiple historic decision instances asynchronously (batch). At least &#x60;historicDecisionInstanceIds&#x60; or &#x60;historicDecisionInstanceQuery&#x60;  has to be provided. If both are provided then all instances matching query  criterion and instances from the list will be deleted.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAsync(body?: DeleteHistoricDecisionInstancesDto, observe?: 'body', reportProgress?: boolean): Observable<BatchDto>;
    public deleteAsync(body?: DeleteHistoricDecisionInstancesDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BatchDto>>;
    public deleteAsync(body?: DeleteHistoricDecisionInstancesDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BatchDto>>;
    public deleteAsync(body?: DeleteHistoricDecisionInstancesDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<BatchDto>('post',`${this.basePath}/history/decision-instance/delete`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Historic Decision Instance
     * Retrieves a historic decision instance by id, according to the  &#x60;HistoricDecisionInstance&#x60; interface in the engine.
     * @param id The id of the historic decision instance to be retrieved.
     * @param includeInputs Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param includeOutputs Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param disableBinaryFetching Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param disableCustomObjectDeserialization Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHistoricDecisionInstance(id: string, includeInputs?: boolean, includeOutputs?: boolean, disableBinaryFetching?: boolean, disableCustomObjectDeserialization?: boolean, observe?: 'body', reportProgress?: boolean): Observable<HistoricDecisionInstanceDto>;
    public getHistoricDecisionInstance(id: string, includeInputs?: boolean, includeOutputs?: boolean, disableBinaryFetching?: boolean, disableCustomObjectDeserialization?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HistoricDecisionInstanceDto>>;
    public getHistoricDecisionInstance(id: string, includeInputs?: boolean, includeOutputs?: boolean, disableBinaryFetching?: boolean, disableCustomObjectDeserialization?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HistoricDecisionInstanceDto>>;
    public getHistoricDecisionInstance(id: string, includeInputs?: boolean, includeOutputs?: boolean, disableBinaryFetching?: boolean, disableCustomObjectDeserialization?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getHistoricDecisionInstance.');
        }





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (includeInputs !== undefined && includeInputs !== null) {
            queryParameters = queryParameters.set('includeInputs', <any>includeInputs);
        }
        if (includeOutputs !== undefined && includeOutputs !== null) {
            queryParameters = queryParameters.set('includeOutputs', <any>includeOutputs);
        }
        if (disableBinaryFetching !== undefined && disableBinaryFetching !== null) {
            queryParameters = queryParameters.set('disableBinaryFetching', <any>disableBinaryFetching);
        }
        if (disableCustomObjectDeserialization !== undefined && disableCustomObjectDeserialization !== null) {
            queryParameters = queryParameters.set('disableCustomObjectDeserialization', <any>disableCustomObjectDeserialization);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<HistoricDecisionInstanceDto>('get',`${this.basePath}/history/decision-instance/${encodeURIComponent(String(id))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Historic Decision Instances
     * Queries for historic decision instances that fulfill the given parameters.  The size of the result set can be retrieved by using the  [Get Historic Decision Instance Count](https://docs.camunda.org/manual/7.19/reference/rest/history/decision-instance/get-decision-instance-query-count/)  method.
     * @param decisionInstanceId Filter by decision instance id.
     * @param decisionInstanceIdIn Filter by decision instance ids. Must be a comma-separated list of decision instance ids.
     * @param decisionDefinitionId Filter by the decision definition the instances belongs to.
     * @param decisionDefinitionIdIn Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids.
     * @param decisionDefinitionKey Filter by the key of the decision definition the instances belongs to.
     * @param decisionDefinitionKeyIn Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys.
     * @param decisionDefinitionName Filter by the name of the decision definition the instances belongs to.
     * @param decisionDefinitionNameLike Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of.
     * @param processDefinitionId Filter by the process definition the instances belongs to.
     * @param processDefinitionKey Filter by the key of the process definition the instances belongs to.
     * @param processInstanceId Filter by the process instance the instances belongs to.
     * @param caseDefinitionId Filter by the case definition the instances belongs to.
     * @param caseDefinitionKey Filter by the key of the case definition the instances belongs to.
     * @param caseInstanceId Filter by the case instance the instances belongs to.
     * @param activityIdIn Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids.
     * @param activityInstanceIdIn Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids.
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids.
     * @param withoutTenantId Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param evaluatedBefore Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param evaluatedAfter Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param userId Restrict to instances that were evaluated by the given user.
     * @param rootDecisionInstanceId Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id.
     * @param rootDecisionInstancesOnly Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param decisionRequirementsDefinitionId Filter by the decision requirements definition the instances belongs to.
     * @param decisionRequirementsDefinitionKey Filter by the key of the decision requirements definition the instances belongs to.
     * @param includeInputs Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param includeOutputs Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param disableBinaryFetching Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param disableCustomObjectDeserialization Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param firstResult Pagination of results. Specifies the index of the first result to return.
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHistoricDecisionInstances(decisionInstanceId?: string, decisionInstanceIdIn?: string, decisionDefinitionId?: string, decisionDefinitionIdIn?: string, decisionDefinitionKey?: string, decisionDefinitionKeyIn?: string, decisionDefinitionName?: string, decisionDefinitionNameLike?: string, processDefinitionId?: string, processDefinitionKey?: string, processInstanceId?: string, caseDefinitionId?: string, caseDefinitionKey?: string, caseInstanceId?: string, activityIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, evaluatedBefore?: Date, evaluatedAfter?: Date, userId?: string, rootDecisionInstanceId?: string, rootDecisionInstancesOnly?: boolean, decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionKey?: string, includeInputs?: boolean, includeOutputs?: boolean, disableBinaryFetching?: boolean, disableCustomObjectDeserialization?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<HistoricDecisionInstanceDto>>;
    public getHistoricDecisionInstances(decisionInstanceId?: string, decisionInstanceIdIn?: string, decisionDefinitionId?: string, decisionDefinitionIdIn?: string, decisionDefinitionKey?: string, decisionDefinitionKeyIn?: string, decisionDefinitionName?: string, decisionDefinitionNameLike?: string, processDefinitionId?: string, processDefinitionKey?: string, processInstanceId?: string, caseDefinitionId?: string, caseDefinitionKey?: string, caseInstanceId?: string, activityIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, evaluatedBefore?: Date, evaluatedAfter?: Date, userId?: string, rootDecisionInstanceId?: string, rootDecisionInstancesOnly?: boolean, decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionKey?: string, includeInputs?: boolean, includeOutputs?: boolean, disableBinaryFetching?: boolean, disableCustomObjectDeserialization?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<HistoricDecisionInstanceDto>>>;
    public getHistoricDecisionInstances(decisionInstanceId?: string, decisionInstanceIdIn?: string, decisionDefinitionId?: string, decisionDefinitionIdIn?: string, decisionDefinitionKey?: string, decisionDefinitionKeyIn?: string, decisionDefinitionName?: string, decisionDefinitionNameLike?: string, processDefinitionId?: string, processDefinitionKey?: string, processInstanceId?: string, caseDefinitionId?: string, caseDefinitionKey?: string, caseInstanceId?: string, activityIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, evaluatedBefore?: Date, evaluatedAfter?: Date, userId?: string, rootDecisionInstanceId?: string, rootDecisionInstancesOnly?: boolean, decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionKey?: string, includeInputs?: boolean, includeOutputs?: boolean, disableBinaryFetching?: boolean, disableCustomObjectDeserialization?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<HistoricDecisionInstanceDto>>>;
    public getHistoricDecisionInstances(decisionInstanceId?: string, decisionInstanceIdIn?: string, decisionDefinitionId?: string, decisionDefinitionIdIn?: string, decisionDefinitionKey?: string, decisionDefinitionKeyIn?: string, decisionDefinitionName?: string, decisionDefinitionNameLike?: string, processDefinitionId?: string, processDefinitionKey?: string, processInstanceId?: string, caseDefinitionId?: string, caseDefinitionKey?: string, caseInstanceId?: string, activityIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, evaluatedBefore?: Date, evaluatedAfter?: Date, userId?: string, rootDecisionInstanceId?: string, rootDecisionInstancesOnly?: boolean, decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionKey?: string, includeInputs?: boolean, includeOutputs?: boolean, disableBinaryFetching?: boolean, disableCustomObjectDeserialization?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (decisionInstanceId !== undefined && decisionInstanceId !== null) {
            queryParameters = queryParameters.set('decisionInstanceId', <any>decisionInstanceId);
        }
        if (decisionInstanceIdIn !== undefined && decisionInstanceIdIn !== null) {
            queryParameters = queryParameters.set('decisionInstanceIdIn', <any>decisionInstanceIdIn);
        }
        if (decisionDefinitionId !== undefined && decisionDefinitionId !== null) {
            queryParameters = queryParameters.set('decisionDefinitionId', <any>decisionDefinitionId);
        }
        if (decisionDefinitionIdIn !== undefined && decisionDefinitionIdIn !== null) {
            queryParameters = queryParameters.set('decisionDefinitionIdIn', <any>decisionDefinitionIdIn);
        }
        if (decisionDefinitionKey !== undefined && decisionDefinitionKey !== null) {
            queryParameters = queryParameters.set('decisionDefinitionKey', <any>decisionDefinitionKey);
        }
        if (decisionDefinitionKeyIn !== undefined && decisionDefinitionKeyIn !== null) {
            queryParameters = queryParameters.set('decisionDefinitionKeyIn', <any>decisionDefinitionKeyIn);
        }
        if (decisionDefinitionName !== undefined && decisionDefinitionName !== null) {
            queryParameters = queryParameters.set('decisionDefinitionName', <any>decisionDefinitionName);
        }
        if (decisionDefinitionNameLike !== undefined && decisionDefinitionNameLike !== null) {
            queryParameters = queryParameters.set('decisionDefinitionNameLike', <any>decisionDefinitionNameLike);
        }
        if (processDefinitionId !== undefined && processDefinitionId !== null) {
            queryParameters = queryParameters.set('processDefinitionId', <any>processDefinitionId);
        }
        if (processDefinitionKey !== undefined && processDefinitionKey !== null) {
            queryParameters = queryParameters.set('processDefinitionKey', <any>processDefinitionKey);
        }
        if (processInstanceId !== undefined && processInstanceId !== null) {
            queryParameters = queryParameters.set('processInstanceId', <any>processInstanceId);
        }
        if (caseDefinitionId !== undefined && caseDefinitionId !== null) {
            queryParameters = queryParameters.set('caseDefinitionId', <any>caseDefinitionId);
        }
        if (caseDefinitionKey !== undefined && caseDefinitionKey !== null) {
            queryParameters = queryParameters.set('caseDefinitionKey', <any>caseDefinitionKey);
        }
        if (caseInstanceId !== undefined && caseInstanceId !== null) {
            queryParameters = queryParameters.set('caseInstanceId', <any>caseInstanceId);
        }
        if (activityIdIn !== undefined && activityIdIn !== null) {
            queryParameters = queryParameters.set('activityIdIn', <any>activityIdIn);
        }
        if (activityInstanceIdIn !== undefined && activityInstanceIdIn !== null) {
            queryParameters = queryParameters.set('activityInstanceIdIn', <any>activityInstanceIdIn);
        }
        if (tenantIdIn !== undefined && tenantIdIn !== null) {
            queryParameters = queryParameters.set('tenantIdIn', <any>tenantIdIn);
        }
        if (withoutTenantId !== undefined && withoutTenantId !== null) {
            queryParameters = queryParameters.set('withoutTenantId', <any>withoutTenantId);
        }
        if (evaluatedBefore !== undefined && evaluatedBefore !== null) {
            queryParameters = queryParameters.set('evaluatedBefore', <any>evaluatedBefore.toISOString());
        }
        if (evaluatedAfter !== undefined && evaluatedAfter !== null) {
            queryParameters = queryParameters.set('evaluatedAfter', <any>evaluatedAfter.toISOString());
        }
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }
        if (rootDecisionInstanceId !== undefined && rootDecisionInstanceId !== null) {
            queryParameters = queryParameters.set('rootDecisionInstanceId', <any>rootDecisionInstanceId);
        }
        if (rootDecisionInstancesOnly !== undefined && rootDecisionInstancesOnly !== null) {
            queryParameters = queryParameters.set('rootDecisionInstancesOnly', <any>rootDecisionInstancesOnly);
        }
        if (decisionRequirementsDefinitionId !== undefined && decisionRequirementsDefinitionId !== null) {
            queryParameters = queryParameters.set('decisionRequirementsDefinitionId', <any>decisionRequirementsDefinitionId);
        }
        if (decisionRequirementsDefinitionKey !== undefined && decisionRequirementsDefinitionKey !== null) {
            queryParameters = queryParameters.set('decisionRequirementsDefinitionKey', <any>decisionRequirementsDefinitionKey);
        }
        if (includeInputs !== undefined && includeInputs !== null) {
            queryParameters = queryParameters.set('includeInputs', <any>includeInputs);
        }
        if (includeOutputs !== undefined && includeOutputs !== null) {
            queryParameters = queryParameters.set('includeOutputs', <any>includeOutputs);
        }
        if (disableBinaryFetching !== undefined && disableBinaryFetching !== null) {
            queryParameters = queryParameters.set('disableBinaryFetching', <any>disableBinaryFetching);
        }
        if (disableCustomObjectDeserialization !== undefined && disableCustomObjectDeserialization !== null) {
            queryParameters = queryParameters.set('disableCustomObjectDeserialization', <any>disableCustomObjectDeserialization);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (sortOrder !== undefined && sortOrder !== null) {
            queryParameters = queryParameters.set('sortOrder', <any>sortOrder);
        }
        if (firstResult !== undefined && firstResult !== null) {
            queryParameters = queryParameters.set('firstResult', <any>firstResult);
        }
        if (maxResults !== undefined && maxResults !== null) {
            queryParameters = queryParameters.set('maxResults', <any>maxResults);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<HistoricDecisionInstanceDto>>('get',`${this.basePath}/history/decision-instance`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Historic Decision Instance Count
     * Queries for the number of historic decision instances that fulfill the given parameters.  Takes the same parameters as the  [Get Historic Decision Instances](https://docs.camunda.org/manual/7.19/reference/rest/history/decision-instance/get-decision-instance-query/)  method.
     * @param decisionInstanceId Filter by decision instance id.
     * @param decisionInstanceIdIn Filter by decision instance ids. Must be a comma-separated list of decision instance ids.
     * @param decisionDefinitionId Filter by the decision definition the instances belongs to.
     * @param decisionDefinitionIdIn Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids.
     * @param decisionDefinitionKey Filter by the key of the decision definition the instances belongs to.
     * @param decisionDefinitionKeyIn Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys.
     * @param decisionDefinitionName Filter by the name of the decision definition the instances belongs to.
     * @param decisionDefinitionNameLike Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of.
     * @param processDefinitionId Filter by the process definition the instances belongs to.
     * @param processDefinitionKey Filter by the key of the process definition the instances belongs to.
     * @param processInstanceId Filter by the process instance the instances belongs to.
     * @param caseDefinitionId Filter by the case definition the instances belongs to.
     * @param caseDefinitionKey Filter by the key of the case definition the instances belongs to.
     * @param caseInstanceId Filter by the case instance the instances belongs to.
     * @param activityIdIn Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids.
     * @param activityInstanceIdIn Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids.
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids.
     * @param withoutTenantId Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param evaluatedBefore Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param evaluatedAfter Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param userId Restrict to instances that were evaluated by the given user.
     * @param rootDecisionInstanceId Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id.
     * @param rootDecisionInstancesOnly Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param decisionRequirementsDefinitionId Filter by the decision requirements definition the instances belongs to.
     * @param decisionRequirementsDefinitionKey Filter by the key of the decision requirements definition the instances belongs to.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHistoricDecisionInstancesCount(decisionInstanceId?: string, decisionInstanceIdIn?: string, decisionDefinitionId?: string, decisionDefinitionIdIn?: string, decisionDefinitionKey?: string, decisionDefinitionKeyIn?: string, decisionDefinitionName?: string, decisionDefinitionNameLike?: string, processDefinitionId?: string, processDefinitionKey?: string, processInstanceId?: string, caseDefinitionId?: string, caseDefinitionKey?: string, caseInstanceId?: string, activityIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, evaluatedBefore?: Date, evaluatedAfter?: Date, userId?: string, rootDecisionInstanceId?: string, rootDecisionInstancesOnly?: boolean, decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionKey?: string, observe?: 'body', reportProgress?: boolean): Observable<CountResultDto>;
    public getHistoricDecisionInstancesCount(decisionInstanceId?: string, decisionInstanceIdIn?: string, decisionDefinitionId?: string, decisionDefinitionIdIn?: string, decisionDefinitionKey?: string, decisionDefinitionKeyIn?: string, decisionDefinitionName?: string, decisionDefinitionNameLike?: string, processDefinitionId?: string, processDefinitionKey?: string, processInstanceId?: string, caseDefinitionId?: string, caseDefinitionKey?: string, caseInstanceId?: string, activityIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, evaluatedBefore?: Date, evaluatedAfter?: Date, userId?: string, rootDecisionInstanceId?: string, rootDecisionInstancesOnly?: boolean, decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionKey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CountResultDto>>;
    public getHistoricDecisionInstancesCount(decisionInstanceId?: string, decisionInstanceIdIn?: string, decisionDefinitionId?: string, decisionDefinitionIdIn?: string, decisionDefinitionKey?: string, decisionDefinitionKeyIn?: string, decisionDefinitionName?: string, decisionDefinitionNameLike?: string, processDefinitionId?: string, processDefinitionKey?: string, processInstanceId?: string, caseDefinitionId?: string, caseDefinitionKey?: string, caseInstanceId?: string, activityIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, evaluatedBefore?: Date, evaluatedAfter?: Date, userId?: string, rootDecisionInstanceId?: string, rootDecisionInstancesOnly?: boolean, decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionKey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CountResultDto>>;
    public getHistoricDecisionInstancesCount(decisionInstanceId?: string, decisionInstanceIdIn?: string, decisionDefinitionId?: string, decisionDefinitionIdIn?: string, decisionDefinitionKey?: string, decisionDefinitionKeyIn?: string, decisionDefinitionName?: string, decisionDefinitionNameLike?: string, processDefinitionId?: string, processDefinitionKey?: string, processInstanceId?: string, caseDefinitionId?: string, caseDefinitionKey?: string, caseInstanceId?: string, activityIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, evaluatedBefore?: Date, evaluatedAfter?: Date, userId?: string, rootDecisionInstanceId?: string, rootDecisionInstancesOnly?: boolean, decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionKey?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


























        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (decisionInstanceId !== undefined && decisionInstanceId !== null) {
            queryParameters = queryParameters.set('decisionInstanceId', <any>decisionInstanceId);
        }
        if (decisionInstanceIdIn !== undefined && decisionInstanceIdIn !== null) {
            queryParameters = queryParameters.set('decisionInstanceIdIn', <any>decisionInstanceIdIn);
        }
        if (decisionDefinitionId !== undefined && decisionDefinitionId !== null) {
            queryParameters = queryParameters.set('decisionDefinitionId', <any>decisionDefinitionId);
        }
        if (decisionDefinitionIdIn !== undefined && decisionDefinitionIdIn !== null) {
            queryParameters = queryParameters.set('decisionDefinitionIdIn', <any>decisionDefinitionIdIn);
        }
        if (decisionDefinitionKey !== undefined && decisionDefinitionKey !== null) {
            queryParameters = queryParameters.set('decisionDefinitionKey', <any>decisionDefinitionKey);
        }
        if (decisionDefinitionKeyIn !== undefined && decisionDefinitionKeyIn !== null) {
            queryParameters = queryParameters.set('decisionDefinitionKeyIn', <any>decisionDefinitionKeyIn);
        }
        if (decisionDefinitionName !== undefined && decisionDefinitionName !== null) {
            queryParameters = queryParameters.set('decisionDefinitionName', <any>decisionDefinitionName);
        }
        if (decisionDefinitionNameLike !== undefined && decisionDefinitionNameLike !== null) {
            queryParameters = queryParameters.set('decisionDefinitionNameLike', <any>decisionDefinitionNameLike);
        }
        if (processDefinitionId !== undefined && processDefinitionId !== null) {
            queryParameters = queryParameters.set('processDefinitionId', <any>processDefinitionId);
        }
        if (processDefinitionKey !== undefined && processDefinitionKey !== null) {
            queryParameters = queryParameters.set('processDefinitionKey', <any>processDefinitionKey);
        }
        if (processInstanceId !== undefined && processInstanceId !== null) {
            queryParameters = queryParameters.set('processInstanceId', <any>processInstanceId);
        }
        if (caseDefinitionId !== undefined && caseDefinitionId !== null) {
            queryParameters = queryParameters.set('caseDefinitionId', <any>caseDefinitionId);
        }
        if (caseDefinitionKey !== undefined && caseDefinitionKey !== null) {
            queryParameters = queryParameters.set('caseDefinitionKey', <any>caseDefinitionKey);
        }
        if (caseInstanceId !== undefined && caseInstanceId !== null) {
            queryParameters = queryParameters.set('caseInstanceId', <any>caseInstanceId);
        }
        if (activityIdIn !== undefined && activityIdIn !== null) {
            queryParameters = queryParameters.set('activityIdIn', <any>activityIdIn);
        }
        if (activityInstanceIdIn !== undefined && activityInstanceIdIn !== null) {
            queryParameters = queryParameters.set('activityInstanceIdIn', <any>activityInstanceIdIn);
        }
        if (tenantIdIn !== undefined && tenantIdIn !== null) {
            queryParameters = queryParameters.set('tenantIdIn', <any>tenantIdIn);
        }
        if (withoutTenantId !== undefined && withoutTenantId !== null) {
            queryParameters = queryParameters.set('withoutTenantId', <any>withoutTenantId);
        }
        if (evaluatedBefore !== undefined && evaluatedBefore !== null) {
            queryParameters = queryParameters.set('evaluatedBefore', <any>evaluatedBefore.toISOString());
        }
        if (evaluatedAfter !== undefined && evaluatedAfter !== null) {
            queryParameters = queryParameters.set('evaluatedAfter', <any>evaluatedAfter.toISOString());
        }
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }
        if (rootDecisionInstanceId !== undefined && rootDecisionInstanceId !== null) {
            queryParameters = queryParameters.set('rootDecisionInstanceId', <any>rootDecisionInstanceId);
        }
        if (rootDecisionInstancesOnly !== undefined && rootDecisionInstancesOnly !== null) {
            queryParameters = queryParameters.set('rootDecisionInstancesOnly', <any>rootDecisionInstancesOnly);
        }
        if (decisionRequirementsDefinitionId !== undefined && decisionRequirementsDefinitionId !== null) {
            queryParameters = queryParameters.set('decisionRequirementsDefinitionId', <any>decisionRequirementsDefinitionId);
        }
        if (decisionRequirementsDefinitionKey !== undefined && decisionRequirementsDefinitionKey !== null) {
            queryParameters = queryParameters.set('decisionRequirementsDefinitionKey', <any>decisionRequirementsDefinitionKey);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CountResultDto>('get',`${this.basePath}/history/decision-instance/count`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Set Removal Time Async (POST)
     * Sets the removal time to multiple historic decision instances asynchronously (batch).  At least &#x60;historicDecisionInstanceIds&#x60; or &#x60;historicDecisionInstanceQuery&#x60; has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setRemovalTimeAsyncHistoricDecisionInstance(body?: SetRemovalTimeToHistoricDecisionInstancesDto, observe?: 'body', reportProgress?: boolean): Observable<BatchDto>;
    public setRemovalTimeAsyncHistoricDecisionInstance(body?: SetRemovalTimeToHistoricDecisionInstancesDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BatchDto>>;
    public setRemovalTimeAsyncHistoricDecisionInstance(body?: SetRemovalTimeToHistoricDecisionInstancesDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BatchDto>>;
    public setRemovalTimeAsyncHistoricDecisionInstance(body?: SetRemovalTimeToHistoricDecisionInstancesDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<BatchDto>('post',`${this.basePath}/history/decision-instance/set-removal-time`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
