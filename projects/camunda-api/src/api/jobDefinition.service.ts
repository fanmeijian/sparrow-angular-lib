/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.19.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CountResultDto } from '../model/countResultDto';
import { ExceptionDto } from '../model/exceptionDto';
import { JobDefinitionDto } from '../model/jobDefinitionDto';
import { JobDefinitionPriorityDto } from '../model/jobDefinitionPriorityDto';
import { JobDefinitionQueryDto } from '../model/jobDefinitionQueryDto';
import { JobDefinitionSuspensionStateDto } from '../model/jobDefinitionSuspensionStateDto';
import { JobDefinitionsSuspensionStateDto } from '../model/jobDefinitionsSuspensionStateDto';
import { RetriesDto } from '../model/retriesDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class JobDefinitionService {

    protected basePath = 'http://{host}:{port}/{contextPath}';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get Job Definition
     * Retrieves a job definition by id, according to the &#x60;JobDefinition&#x60; interface in the engine.
     * @param id The id of the job definition to be retrieved.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getJobDefinition(id: string, observe?: 'body', reportProgress?: boolean): Observable<JobDefinitionDto>;
    public getJobDefinition(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<JobDefinitionDto>>;
    public getJobDefinition(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<JobDefinitionDto>>;
    public getJobDefinition(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getJobDefinition.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<JobDefinitionDto>('get',`${this.basePath}/job-definition/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Job Definitions
     * Queries for job definitions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Job Definition Count](https://docs.camunda.org/manual/7.19/reference/rest/job-definition/get-query-count/) method.
     * @param jobDefinitionId Filter by job definition id.
     * @param activityIdIn Only include job definitions which belong to one of the passed and comma-separated activity ids.
     * @param processDefinitionId Only include job definitions which exist for the given process definition id.
     * @param processDefinitionKey Only include job definitions which exist for the given process definition key.
     * @param jobType Only include job definitions which exist for the given job type. See the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types.
     * @param jobConfiguration Only include job definitions which exist for the given job configuration. For example: for timer jobs it is the timer configuration.
     * @param active Only include active job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param suspended Only include suspended job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param withOverridingJobPriority Only include job definitions that have an overriding job priority defined. The only effective value is &#x60;true&#x60;. If set to &#x60;false&#x60;, this filter is not applied.
     * @param tenantIdIn Only include job definitions which belong to one of the passed and comma-separated tenant ids.
     * @param withoutTenantId Only include job definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param includeJobDefinitionsWithoutTenantId Include job definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param firstResult Pagination of results. Specifies the index of the first result to return.
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getJobDefinitions(jobDefinitionId?: string, activityIdIn?: string, processDefinitionId?: string, processDefinitionKey?: string, jobType?: string, jobConfiguration?: string, active?: boolean, suspended?: boolean, withOverridingJobPriority?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeJobDefinitionsWithoutTenantId?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<JobDefinitionDto>>;
    public getJobDefinitions(jobDefinitionId?: string, activityIdIn?: string, processDefinitionId?: string, processDefinitionKey?: string, jobType?: string, jobConfiguration?: string, active?: boolean, suspended?: boolean, withOverridingJobPriority?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeJobDefinitionsWithoutTenantId?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<JobDefinitionDto>>>;
    public getJobDefinitions(jobDefinitionId?: string, activityIdIn?: string, processDefinitionId?: string, processDefinitionKey?: string, jobType?: string, jobConfiguration?: string, active?: boolean, suspended?: boolean, withOverridingJobPriority?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeJobDefinitionsWithoutTenantId?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<JobDefinitionDto>>>;
    public getJobDefinitions(jobDefinitionId?: string, activityIdIn?: string, processDefinitionId?: string, processDefinitionKey?: string, jobType?: string, jobConfiguration?: string, active?: boolean, suspended?: boolean, withOverridingJobPriority?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeJobDefinitionsWithoutTenantId?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

















        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (jobDefinitionId !== undefined && jobDefinitionId !== null) {
            queryParameters = queryParameters.set('jobDefinitionId', <any>jobDefinitionId);
        }
        if (activityIdIn !== undefined && activityIdIn !== null) {
            queryParameters = queryParameters.set('activityIdIn', <any>activityIdIn);
        }
        if (processDefinitionId !== undefined && processDefinitionId !== null) {
            queryParameters = queryParameters.set('processDefinitionId', <any>processDefinitionId);
        }
        if (processDefinitionKey !== undefined && processDefinitionKey !== null) {
            queryParameters = queryParameters.set('processDefinitionKey', <any>processDefinitionKey);
        }
        if (jobType !== undefined && jobType !== null) {
            queryParameters = queryParameters.set('jobType', <any>jobType);
        }
        if (jobConfiguration !== undefined && jobConfiguration !== null) {
            queryParameters = queryParameters.set('jobConfiguration', <any>jobConfiguration);
        }
        if (active !== undefined && active !== null) {
            queryParameters = queryParameters.set('active', <any>active);
        }
        if (suspended !== undefined && suspended !== null) {
            queryParameters = queryParameters.set('suspended', <any>suspended);
        }
        if (withOverridingJobPriority !== undefined && withOverridingJobPriority !== null) {
            queryParameters = queryParameters.set('withOverridingJobPriority', <any>withOverridingJobPriority);
        }
        if (tenantIdIn !== undefined && tenantIdIn !== null) {
            queryParameters = queryParameters.set('tenantIdIn', <any>tenantIdIn);
        }
        if (withoutTenantId !== undefined && withoutTenantId !== null) {
            queryParameters = queryParameters.set('withoutTenantId', <any>withoutTenantId);
        }
        if (includeJobDefinitionsWithoutTenantId !== undefined && includeJobDefinitionsWithoutTenantId !== null) {
            queryParameters = queryParameters.set('includeJobDefinitionsWithoutTenantId', <any>includeJobDefinitionsWithoutTenantId);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (sortOrder !== undefined && sortOrder !== null) {
            queryParameters = queryParameters.set('sortOrder', <any>sortOrder);
        }
        if (firstResult !== undefined && firstResult !== null) {
            queryParameters = queryParameters.set('firstResult', <any>firstResult);
        }
        if (maxResults !== undefined && maxResults !== null) {
            queryParameters = queryParameters.set('maxResults', <any>maxResults);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<JobDefinitionDto>>('get',`${this.basePath}/job-definition`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Job Definition Count
     * Queries for the number of job definitions that fulfill given parameters. Takes the same parameters as the [Get Job Definitions](https://docs.camunda.org/manual/7.19/reference/rest/job-definition/get-query/) method.
     * @param jobDefinitionId Filter by job definition id.
     * @param activityIdIn Only include job definitions which belong to one of the passed and comma-separated activity ids.
     * @param processDefinitionId Only include job definitions which exist for the given process definition id.
     * @param processDefinitionKey Only include job definitions which exist for the given process definition key.
     * @param jobType Only include job definitions which exist for the given job type. See the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types.
     * @param jobConfiguration Only include job definitions which exist for the given job configuration. For example: for timer jobs it is the timer configuration.
     * @param active Only include active job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param suspended Only include suspended job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param withOverridingJobPriority Only include job definitions that have an overriding job priority defined. The only effective value is &#x60;true&#x60;. If set to &#x60;false&#x60;, this filter is not applied.
     * @param tenantIdIn Only include job definitions which belong to one of the passed and comma-separated tenant ids.
     * @param withoutTenantId Only include job definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param includeJobDefinitionsWithoutTenantId Include job definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getJobDefinitionsCount(jobDefinitionId?: string, activityIdIn?: string, processDefinitionId?: string, processDefinitionKey?: string, jobType?: string, jobConfiguration?: string, active?: boolean, suspended?: boolean, withOverridingJobPriority?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeJobDefinitionsWithoutTenantId?: boolean, observe?: 'body', reportProgress?: boolean): Observable<CountResultDto>;
    public getJobDefinitionsCount(jobDefinitionId?: string, activityIdIn?: string, processDefinitionId?: string, processDefinitionKey?: string, jobType?: string, jobConfiguration?: string, active?: boolean, suspended?: boolean, withOverridingJobPriority?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeJobDefinitionsWithoutTenantId?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CountResultDto>>;
    public getJobDefinitionsCount(jobDefinitionId?: string, activityIdIn?: string, processDefinitionId?: string, processDefinitionKey?: string, jobType?: string, jobConfiguration?: string, active?: boolean, suspended?: boolean, withOverridingJobPriority?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeJobDefinitionsWithoutTenantId?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CountResultDto>>;
    public getJobDefinitionsCount(jobDefinitionId?: string, activityIdIn?: string, processDefinitionId?: string, processDefinitionKey?: string, jobType?: string, jobConfiguration?: string, active?: boolean, suspended?: boolean, withOverridingJobPriority?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeJobDefinitionsWithoutTenantId?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {













        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (jobDefinitionId !== undefined && jobDefinitionId !== null) {
            queryParameters = queryParameters.set('jobDefinitionId', <any>jobDefinitionId);
        }
        if (activityIdIn !== undefined && activityIdIn !== null) {
            queryParameters = queryParameters.set('activityIdIn', <any>activityIdIn);
        }
        if (processDefinitionId !== undefined && processDefinitionId !== null) {
            queryParameters = queryParameters.set('processDefinitionId', <any>processDefinitionId);
        }
        if (processDefinitionKey !== undefined && processDefinitionKey !== null) {
            queryParameters = queryParameters.set('processDefinitionKey', <any>processDefinitionKey);
        }
        if (jobType !== undefined && jobType !== null) {
            queryParameters = queryParameters.set('jobType', <any>jobType);
        }
        if (jobConfiguration !== undefined && jobConfiguration !== null) {
            queryParameters = queryParameters.set('jobConfiguration', <any>jobConfiguration);
        }
        if (active !== undefined && active !== null) {
            queryParameters = queryParameters.set('active', <any>active);
        }
        if (suspended !== undefined && suspended !== null) {
            queryParameters = queryParameters.set('suspended', <any>suspended);
        }
        if (withOverridingJobPriority !== undefined && withOverridingJobPriority !== null) {
            queryParameters = queryParameters.set('withOverridingJobPriority', <any>withOverridingJobPriority);
        }
        if (tenantIdIn !== undefined && tenantIdIn !== null) {
            queryParameters = queryParameters.set('tenantIdIn', <any>tenantIdIn);
        }
        if (withoutTenantId !== undefined && withoutTenantId !== null) {
            queryParameters = queryParameters.set('withoutTenantId', <any>withoutTenantId);
        }
        if (includeJobDefinitionsWithoutTenantId !== undefined && includeJobDefinitionsWithoutTenantId !== null) {
            queryParameters = queryParameters.set('includeJobDefinitionsWithoutTenantId', <any>includeJobDefinitionsWithoutTenantId);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CountResultDto>('get',`${this.basePath}/job-definition/count`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Job Definitions (POST)
     * Queries for job definitions that fulfill given parameters. This method is slightly more powerful than the [Get Job Definitions](https://docs.camunda.org/manual/7.19/reference/rest/job-definition/get-query/) method because it allows filtering by multiple job definitions of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
     * @param body 
     * @param firstResult Pagination of results. Specifies the index of the first result to return.
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public queryJobDefinitions(body?: JobDefinitionQueryDto, firstResult?: number, maxResults?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<JobDefinitionDto>>;
    public queryJobDefinitions(body?: JobDefinitionQueryDto, firstResult?: number, maxResults?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<JobDefinitionDto>>>;
    public queryJobDefinitions(body?: JobDefinitionQueryDto, firstResult?: number, maxResults?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<JobDefinitionDto>>>;
    public queryJobDefinitions(body?: JobDefinitionQueryDto, firstResult?: number, maxResults?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (firstResult !== undefined && firstResult !== null) {
            queryParameters = queryParameters.set('firstResult', <any>firstResult);
        }
        if (maxResults !== undefined && maxResults !== null) {
            queryParameters = queryParameters.set('maxResults', <any>maxResults);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<JobDefinitionDto>>('post',`${this.basePath}/job-definition`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Job Definition Count (POST)
     * Queries for the number of job definitions that fulfill given parameters. This method takes the same message body as the [Get Job Definitions (POST)](https://docs.camunda.org/manual/7.19/reference/rest/job-definition/post-query/) method and therefore it is slightly more powerful than the [Get Job Definition Count](https://docs.camunda.org/manual/7.19/reference/rest/job-definition/get-query-count/) method.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public queryJobDefinitionsCount(body?: JobDefinitionQueryDto, observe?: 'body', reportProgress?: boolean): Observable<CountResultDto>;
    public queryJobDefinitionsCount(body?: JobDefinitionQueryDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CountResultDto>>;
    public queryJobDefinitionsCount(body?: JobDefinitionQueryDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CountResultDto>>;
    public queryJobDefinitionsCount(body?: JobDefinitionQueryDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CountResultDto>('post',`${this.basePath}/job-definition/count`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Set Job Definition Priority by Id
     * Sets an overriding execution priority for jobs with the given definition id. Optionally, the priorities of all the definitions&#x27; existing jobs are updated accordingly. The priority can be reset by setting it to &#x60;null&#x60;, meaning that a new job&#x27;s priority will not be determined based on its definition&#x27;s priority any longer. See the [user guide on job prioritization](https://docs.camunda.org/manual/7.19/user-guide/process-engine/the-job-executor/#set-job-definition-priorities-via-managementservice-api) for details.
     * @param id The id of the job definition to be updated.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setJobPriorityJobDefinition(id: string, body?: JobDefinitionPriorityDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setJobPriorityJobDefinition(id: string, body?: JobDefinitionPriorityDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setJobPriorityJobDefinition(id: string, body?: JobDefinitionPriorityDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setJobPriorityJobDefinition(id: string, body?: JobDefinitionPriorityDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling setJobPriorityJobDefinition.');
        }


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/job-definition/${encodeURIComponent(String(id))}/jobPriority`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Set Job Retries By Job Definition Id
     * Sets the number of retries of all **failed** jobs associated with the given job definition id.
     * @param id The id of the job definition to be updated.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setJobRetriesJobDefinition(id: string, body?: RetriesDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setJobRetriesJobDefinition(id: string, body?: RetriesDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setJobRetriesJobDefinition(id: string, body?: RetriesDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setJobRetriesJobDefinition(id: string, body?: RetriesDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling setJobRetriesJobDefinition.');
        }


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/job-definition/${encodeURIComponent(String(id))}/retries`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Activate/Suspend Job Definition By Id
     * Activates or suspends a given job definition by id.
     * @param id The id of the job definition to activate or suspend.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateSuspensionStateJobDefinition(id: string, body?: JobDefinitionSuspensionStateDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateSuspensionStateJobDefinition(id: string, body?: JobDefinitionSuspensionStateDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateSuspensionStateJobDefinition(id: string, body?: JobDefinitionSuspensionStateDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateSuspensionStateJobDefinition(id: string, body?: JobDefinitionSuspensionStateDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateSuspensionStateJobDefinition.');
        }


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/job-definition/${encodeURIComponent(String(id))}/suspended`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Activate/Suspend Job Definitions
     * Activates or suspends job definitions with the given process definition id or process definition key.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateSuspensionStateJobDefinitions(body?: JobDefinitionsSuspensionStateDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateSuspensionStateJobDefinitions(body?: JobDefinitionsSuspensionStateDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateSuspensionStateJobDefinitions(body?: JobDefinitionsSuspensionStateDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateSuspensionStateJobDefinitions(body?: JobDefinitionsSuspensionStateDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/job-definition/suspended`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
