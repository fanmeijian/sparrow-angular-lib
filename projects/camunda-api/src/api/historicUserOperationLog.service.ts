/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.19.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AnnotationDto } from '../model/annotationDto';
import { CountResultDto } from '../model/countResultDto';
import { ExceptionDto } from '../model/exceptionDto';
import { UserOperationLogEntryDto } from '../model/userOperationLogEntryDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class HistoricUserOperationLogService {

    protected basePath = 'http://{host}:{port}/{contextPath}';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Clear Annotation of an User Operation Log (Historic)
     * Clear the annotation which was previously set for auditing reasons.
     * @param operationId The operation id of the operation log to be updated.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public clearAnnotationUserOperationLog(operationId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public clearAnnotationUserOperationLog(operationId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public clearAnnotationUserOperationLog(operationId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public clearAnnotationUserOperationLog(operationId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (operationId === null || operationId === undefined) {
            throw new Error('Required parameter operationId was null or undefined when calling clearAnnotationUserOperationLog.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('put',`${this.basePath}/history/user-operation/${encodeURIComponent(String(operationId))}/clear-annotation`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get User Operation Log Count
     * Queries for the number of user operation log entries that fulfill the given parameters. Takes the same parameters as the [Get User Operation Log (Historic)](https://docs.camunda.org/manual/7.19/reference/rest/history/user-operation-log/get-user-operation-log-query/) method.
     * @param deploymentId Filter by deployment id.
     * @param processDefinitionId Filter by process definition id.
     * @param processDefinitionKey Filter by process definition key.
     * @param processInstanceId Filter by process instance id.
     * @param executionId Filter by execution id.
     * @param caseDefinitionId Filter by case definition id.
     * @param caseInstanceId Filter by case instance id.
     * @param caseExecutionId Filter by case execution id.
     * @param taskId Only include operations on this task.
     * @param externalTaskId Only include operations on this external task.
     * @param batchId Only include operations on this batch.
     * @param jobId Filter by job id.
     * @param jobDefinitionId Filter by job definition id.
     * @param userId Only include operations of this user.
     * @param operationId Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation.
     * @param operationType Filter by the type of the operation like &#x60;Claim&#x60; or &#x60;Delegate&#x60;. See the [Javadoc](https://docs.camunda.org/manual/7.19/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types.
     * @param entityType Filter by the type of the entity that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;.
     * @param entityTypeIn Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;.
     * @param category Filter by the category that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;.
     * @param categoryIn Filter by a comma-separated list of categories that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;.
     * @param property Only include operations that changed this property, e.g., &#x60;owner&#x60; or &#x60;assignee&#x60;.
     * @param afterTimestamp Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.
     * @param beforeTimestamp Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public queryUserOperationCount(deploymentId?: string, processDefinitionId?: string, processDefinitionKey?: string, processInstanceId?: string, executionId?: string, caseDefinitionId?: string, caseInstanceId?: string, caseExecutionId?: string, taskId?: string, externalTaskId?: string, batchId?: string, jobId?: string, jobDefinitionId?: string, userId?: string, operationId?: string, operationType?: string, entityType?: string, entityTypeIn?: string, category?: string, categoryIn?: string, property?: string, afterTimestamp?: Date, beforeTimestamp?: Date, observe?: 'body', reportProgress?: boolean): Observable<CountResultDto>;
    public queryUserOperationCount(deploymentId?: string, processDefinitionId?: string, processDefinitionKey?: string, processInstanceId?: string, executionId?: string, caseDefinitionId?: string, caseInstanceId?: string, caseExecutionId?: string, taskId?: string, externalTaskId?: string, batchId?: string, jobId?: string, jobDefinitionId?: string, userId?: string, operationId?: string, operationType?: string, entityType?: string, entityTypeIn?: string, category?: string, categoryIn?: string, property?: string, afterTimestamp?: Date, beforeTimestamp?: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CountResultDto>>;
    public queryUserOperationCount(deploymentId?: string, processDefinitionId?: string, processDefinitionKey?: string, processInstanceId?: string, executionId?: string, caseDefinitionId?: string, caseInstanceId?: string, caseExecutionId?: string, taskId?: string, externalTaskId?: string, batchId?: string, jobId?: string, jobDefinitionId?: string, userId?: string, operationId?: string, operationType?: string, entityType?: string, entityTypeIn?: string, category?: string, categoryIn?: string, property?: string, afterTimestamp?: Date, beforeTimestamp?: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CountResultDto>>;
    public queryUserOperationCount(deploymentId?: string, processDefinitionId?: string, processDefinitionKey?: string, processInstanceId?: string, executionId?: string, caseDefinitionId?: string, caseInstanceId?: string, caseExecutionId?: string, taskId?: string, externalTaskId?: string, batchId?: string, jobId?: string, jobDefinitionId?: string, userId?: string, operationId?: string, operationType?: string, entityType?: string, entityTypeIn?: string, category?: string, categoryIn?: string, property?: string, afterTimestamp?: Date, beforeTimestamp?: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
























        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (deploymentId !== undefined && deploymentId !== null) {
            queryParameters = queryParameters.set('deploymentId', <any>deploymentId);
        }
        if (processDefinitionId !== undefined && processDefinitionId !== null) {
            queryParameters = queryParameters.set('processDefinitionId', <any>processDefinitionId);
        }
        if (processDefinitionKey !== undefined && processDefinitionKey !== null) {
            queryParameters = queryParameters.set('processDefinitionKey', <any>processDefinitionKey);
        }
        if (processInstanceId !== undefined && processInstanceId !== null) {
            queryParameters = queryParameters.set('processInstanceId', <any>processInstanceId);
        }
        if (executionId !== undefined && executionId !== null) {
            queryParameters = queryParameters.set('executionId', <any>executionId);
        }
        if (caseDefinitionId !== undefined && caseDefinitionId !== null) {
            queryParameters = queryParameters.set('caseDefinitionId', <any>caseDefinitionId);
        }
        if (caseInstanceId !== undefined && caseInstanceId !== null) {
            queryParameters = queryParameters.set('caseInstanceId', <any>caseInstanceId);
        }
        if (caseExecutionId !== undefined && caseExecutionId !== null) {
            queryParameters = queryParameters.set('caseExecutionId', <any>caseExecutionId);
        }
        if (taskId !== undefined && taskId !== null) {
            queryParameters = queryParameters.set('taskId', <any>taskId);
        }
        if (externalTaskId !== undefined && externalTaskId !== null) {
            queryParameters = queryParameters.set('externalTaskId', <any>externalTaskId);
        }
        if (batchId !== undefined && batchId !== null) {
            queryParameters = queryParameters.set('batchId', <any>batchId);
        }
        if (jobId !== undefined && jobId !== null) {
            queryParameters = queryParameters.set('jobId', <any>jobId);
        }
        if (jobDefinitionId !== undefined && jobDefinitionId !== null) {
            queryParameters = queryParameters.set('jobDefinitionId', <any>jobDefinitionId);
        }
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }
        if (operationId !== undefined && operationId !== null) {
            queryParameters = queryParameters.set('operationId', <any>operationId);
        }
        if (operationType !== undefined && operationType !== null) {
            queryParameters = queryParameters.set('operationType', <any>operationType);
        }
        if (entityType !== undefined && entityType !== null) {
            queryParameters = queryParameters.set('entityType', <any>entityType);
        }
        if (entityTypeIn !== undefined && entityTypeIn !== null) {
            queryParameters = queryParameters.set('entityTypeIn', <any>entityTypeIn);
        }
        if (category !== undefined && category !== null) {
            queryParameters = queryParameters.set('category', <any>category);
        }
        if (categoryIn !== undefined && categoryIn !== null) {
            queryParameters = queryParameters.set('categoryIn', <any>categoryIn);
        }
        if (property !== undefined && property !== null) {
            queryParameters = queryParameters.set('property', <any>property);
        }
        if (afterTimestamp !== undefined && afterTimestamp !== null) {
            queryParameters = queryParameters.set('afterTimestamp', <any>afterTimestamp.toISOString());
        }
        if (beforeTimestamp !== undefined && beforeTimestamp !== null) {
            queryParameters = queryParameters.set('beforeTimestamp', <any>beforeTimestamp.toISOString());
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CountResultDto>('get',`${this.basePath}/history/user-operation/count`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get User Operation Log (Historic)
     * Queries for user operation log entries that fulfill the given parameters. The size of the result set can be retrieved by using the [Get User Operation Log Count](https://docs.camunda.org/manual/7.19/reference/rest/history/user-operation-log/get-user-operation-log-query-count/) method.  Note that the properties of operation log entries are interpreted as restrictions on the entities they apply to. That means, if a single process instance is updated, the field &#x60;processInstanceId&#x60; is populated. If a single operation updates all process instances of the same process definition, the field &#x60;processInstanceId&#x60; is &#x60;null&#x60; (a &#x60;null&#x60; restriction is viewed as a wildcard, i.e., matches a process instance with any id) and the field &#x60;processDefinitionId&#x60; is populated. This way, which entities were changed by a user operation can easily be reconstructed.
     * @param deploymentId Filter by deployment id.
     * @param processDefinitionId Filter by process definition id.
     * @param processDefinitionKey Filter by process definition key.
     * @param processInstanceId Filter by process instance id.
     * @param executionId Filter by execution id.
     * @param caseDefinitionId Filter by case definition id.
     * @param caseInstanceId Filter by case instance id.
     * @param caseExecutionId Filter by case execution id.
     * @param taskId Only include operations on this task.
     * @param externalTaskId Only include operations on this external task.
     * @param batchId Only include operations on this batch.
     * @param jobId Filter by job id.
     * @param jobDefinitionId Filter by job definition id.
     * @param userId Only include operations of this user.
     * @param operationId Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation.
     * @param operationType Filter by the type of the operation like &#x60;Claim&#x60; or &#x60;Delegate&#x60;. See the [Javadoc](https://docs.camunda.org/manual/7.19/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types.
     * @param entityType Filter by the type of the entity that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;.
     * @param entityTypeIn Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;.
     * @param category Filter by the category that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;.
     * @param categoryIn Filter by a comma-separated list of categories that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;.
     * @param property Only include operations that changed this property, e.g., &#x60;owner&#x60; or &#x60;assignee&#x60;.
     * @param afterTimestamp Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.
     * @param beforeTimestamp Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param firstResult Pagination of results. Specifies the index of the first result to return.
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public queryUserOperationEntries(deploymentId?: string, processDefinitionId?: string, processDefinitionKey?: string, processInstanceId?: string, executionId?: string, caseDefinitionId?: string, caseInstanceId?: string, caseExecutionId?: string, taskId?: string, externalTaskId?: string, batchId?: string, jobId?: string, jobDefinitionId?: string, userId?: string, operationId?: string, operationType?: string, entityType?: string, entityTypeIn?: string, category?: string, categoryIn?: string, property?: string, afterTimestamp?: Date, beforeTimestamp?: Date, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<UserOperationLogEntryDto>>;
    public queryUserOperationEntries(deploymentId?: string, processDefinitionId?: string, processDefinitionKey?: string, processInstanceId?: string, executionId?: string, caseDefinitionId?: string, caseInstanceId?: string, caseExecutionId?: string, taskId?: string, externalTaskId?: string, batchId?: string, jobId?: string, jobDefinitionId?: string, userId?: string, operationId?: string, operationType?: string, entityType?: string, entityTypeIn?: string, category?: string, categoryIn?: string, property?: string, afterTimestamp?: Date, beforeTimestamp?: Date, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<UserOperationLogEntryDto>>>;
    public queryUserOperationEntries(deploymentId?: string, processDefinitionId?: string, processDefinitionKey?: string, processInstanceId?: string, executionId?: string, caseDefinitionId?: string, caseInstanceId?: string, caseExecutionId?: string, taskId?: string, externalTaskId?: string, batchId?: string, jobId?: string, jobDefinitionId?: string, userId?: string, operationId?: string, operationType?: string, entityType?: string, entityTypeIn?: string, category?: string, categoryIn?: string, property?: string, afterTimestamp?: Date, beforeTimestamp?: Date, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<UserOperationLogEntryDto>>>;
    public queryUserOperationEntries(deploymentId?: string, processDefinitionId?: string, processDefinitionKey?: string, processInstanceId?: string, executionId?: string, caseDefinitionId?: string, caseInstanceId?: string, caseExecutionId?: string, taskId?: string, externalTaskId?: string, batchId?: string, jobId?: string, jobDefinitionId?: string, userId?: string, operationId?: string, operationType?: string, entityType?: string, entityTypeIn?: string, category?: string, categoryIn?: string, property?: string, afterTimestamp?: Date, beforeTimestamp?: Date, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




























        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (deploymentId !== undefined && deploymentId !== null) {
            queryParameters = queryParameters.set('deploymentId', <any>deploymentId);
        }
        if (processDefinitionId !== undefined && processDefinitionId !== null) {
            queryParameters = queryParameters.set('processDefinitionId', <any>processDefinitionId);
        }
        if (processDefinitionKey !== undefined && processDefinitionKey !== null) {
            queryParameters = queryParameters.set('processDefinitionKey', <any>processDefinitionKey);
        }
        if (processInstanceId !== undefined && processInstanceId !== null) {
            queryParameters = queryParameters.set('processInstanceId', <any>processInstanceId);
        }
        if (executionId !== undefined && executionId !== null) {
            queryParameters = queryParameters.set('executionId', <any>executionId);
        }
        if (caseDefinitionId !== undefined && caseDefinitionId !== null) {
            queryParameters = queryParameters.set('caseDefinitionId', <any>caseDefinitionId);
        }
        if (caseInstanceId !== undefined && caseInstanceId !== null) {
            queryParameters = queryParameters.set('caseInstanceId', <any>caseInstanceId);
        }
        if (caseExecutionId !== undefined && caseExecutionId !== null) {
            queryParameters = queryParameters.set('caseExecutionId', <any>caseExecutionId);
        }
        if (taskId !== undefined && taskId !== null) {
            queryParameters = queryParameters.set('taskId', <any>taskId);
        }
        if (externalTaskId !== undefined && externalTaskId !== null) {
            queryParameters = queryParameters.set('externalTaskId', <any>externalTaskId);
        }
        if (batchId !== undefined && batchId !== null) {
            queryParameters = queryParameters.set('batchId', <any>batchId);
        }
        if (jobId !== undefined && jobId !== null) {
            queryParameters = queryParameters.set('jobId', <any>jobId);
        }
        if (jobDefinitionId !== undefined && jobDefinitionId !== null) {
            queryParameters = queryParameters.set('jobDefinitionId', <any>jobDefinitionId);
        }
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }
        if (operationId !== undefined && operationId !== null) {
            queryParameters = queryParameters.set('operationId', <any>operationId);
        }
        if (operationType !== undefined && operationType !== null) {
            queryParameters = queryParameters.set('operationType', <any>operationType);
        }
        if (entityType !== undefined && entityType !== null) {
            queryParameters = queryParameters.set('entityType', <any>entityType);
        }
        if (entityTypeIn !== undefined && entityTypeIn !== null) {
            queryParameters = queryParameters.set('entityTypeIn', <any>entityTypeIn);
        }
        if (category !== undefined && category !== null) {
            queryParameters = queryParameters.set('category', <any>category);
        }
        if (categoryIn !== undefined && categoryIn !== null) {
            queryParameters = queryParameters.set('categoryIn', <any>categoryIn);
        }
        if (property !== undefined && property !== null) {
            queryParameters = queryParameters.set('property', <any>property);
        }
        if (afterTimestamp !== undefined && afterTimestamp !== null) {
            queryParameters = queryParameters.set('afterTimestamp', <any>afterTimestamp.toISOString());
        }
        if (beforeTimestamp !== undefined && beforeTimestamp !== null) {
            queryParameters = queryParameters.set('beforeTimestamp', <any>beforeTimestamp.toISOString());
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (sortOrder !== undefined && sortOrder !== null) {
            queryParameters = queryParameters.set('sortOrder', <any>sortOrder);
        }
        if (firstResult !== undefined && firstResult !== null) {
            queryParameters = queryParameters.set('firstResult', <any>firstResult);
        }
        if (maxResults !== undefined && maxResults !== null) {
            queryParameters = queryParameters.set('maxResults', <any>maxResults);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<UserOperationLogEntryDto>>('get',`${this.basePath}/history/user-operation`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Set Annotation to an User Operation Log (Historic)
     * Set an annotation for auditing reasons.
     * @param operationId The operation id of the operation log to be updated.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setAnnotationUserOperationLog(operationId: string, body?: AnnotationDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setAnnotationUserOperationLog(operationId: string, body?: AnnotationDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setAnnotationUserOperationLog(operationId: string, body?: AnnotationDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setAnnotationUserOperationLog(operationId: string, body?: AnnotationDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (operationId === null || operationId === undefined) {
            throw new Error('Required parameter operationId was null or undefined when calling setAnnotationUserOperationLog.');
        }


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/history/user-operation/${encodeURIComponent(String(operationId))}/set-annotation`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
