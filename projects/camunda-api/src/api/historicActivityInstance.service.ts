/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.19.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CountResultDto } from '../model/countResultDto';
import { ExceptionDto } from '../model/exceptionDto';
import { HistoricActivityInstanceDto } from '../model/historicActivityInstanceDto';
import { HistoricActivityInstanceQueryDto } from '../model/historicActivityInstanceQueryDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class HistoricActivityInstanceService {

    protected basePath = 'http://{host}:{port}/{contextPath}';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get
     * Retrieves a historic activity instance by id, according to the &#x60;HistoricActivityInstance&#x60; interface in the engine.
     * @param id The id of the historic activity instance to be retrieved.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHistoricActivityInstance(id: string, observe?: 'body', reportProgress?: boolean): Observable<HistoricActivityInstanceDto>;
    public getHistoricActivityInstance(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HistoricActivityInstanceDto>>;
    public getHistoricActivityInstance(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HistoricActivityInstanceDto>>;
    public getHistoricActivityInstance(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getHistoricActivityInstance.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<HistoricActivityInstanceDto>('get',`${this.basePath}/history/activity-instance/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get List
     * Queries for historic activity instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Historic Activity Instance Count](https://docs.camunda.org/manual/7.19/reference/rest/history/activity-instance/get-activity-instance-query-count/) method.
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param firstResult Pagination of results. Specifies the index of the first result to return.
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param activityInstanceId Filter by activity instance id.
     * @param processInstanceId Filter by process instance id.
     * @param processDefinitionId Filter by process definition id.
     * @param executionId Filter by the id of the execution that executed the activity instance.
     * @param activityId Filter by the activity id (according to BPMN 2.0 XML).
     * @param activityName Filter by the activity name (according to BPMN 2.0 XML).
     * @param activityType Filter by activity type.
     * @param taskAssignee Only include activity instances that are user tasks and assigned to a given user.
     * @param finished Only include finished activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
     * @param unfinished Only include unfinished activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
     * @param canceled Only include canceled activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
     * @param completeScope Only include activity instances which completed a scope. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
     * @param startedBefore Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param startedAfter Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param finishedBefore Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param finishedAfter Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param tenantIdIn Filter by a comma-separated list of ids. An activity instance must have one of the given tenant ids.
     * @param withoutTenantId Only include historic activity instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHistoricActivityInstances(sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, activityInstanceId?: string, processInstanceId?: string, processDefinitionId?: string, executionId?: string, activityId?: string, activityName?: string, activityType?: string, taskAssignee?: string, finished?: boolean, unfinished?: boolean, canceled?: boolean, completeScope?: boolean, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, tenantIdIn?: string, withoutTenantId?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<HistoricActivityInstanceDto>>;
    public getHistoricActivityInstances(sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, activityInstanceId?: string, processInstanceId?: string, processDefinitionId?: string, executionId?: string, activityId?: string, activityName?: string, activityType?: string, taskAssignee?: string, finished?: boolean, unfinished?: boolean, canceled?: boolean, completeScope?: boolean, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, tenantIdIn?: string, withoutTenantId?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<HistoricActivityInstanceDto>>>;
    public getHistoricActivityInstances(sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, activityInstanceId?: string, processInstanceId?: string, processDefinitionId?: string, executionId?: string, activityId?: string, activityName?: string, activityType?: string, taskAssignee?: string, finished?: boolean, unfinished?: boolean, canceled?: boolean, completeScope?: boolean, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, tenantIdIn?: string, withoutTenantId?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<HistoricActivityInstanceDto>>>;
    public getHistoricActivityInstances(sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, activityInstanceId?: string, processInstanceId?: string, processDefinitionId?: string, executionId?: string, activityId?: string, activityName?: string, activityType?: string, taskAssignee?: string, finished?: boolean, unfinished?: boolean, canceled?: boolean, completeScope?: boolean, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, tenantIdIn?: string, withoutTenantId?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {























        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (sortOrder !== undefined && sortOrder !== null) {
            queryParameters = queryParameters.set('sortOrder', <any>sortOrder);
        }
        if (firstResult !== undefined && firstResult !== null) {
            queryParameters = queryParameters.set('firstResult', <any>firstResult);
        }
        if (maxResults !== undefined && maxResults !== null) {
            queryParameters = queryParameters.set('maxResults', <any>maxResults);
        }
        if (activityInstanceId !== undefined && activityInstanceId !== null) {
            queryParameters = queryParameters.set('activityInstanceId', <any>activityInstanceId);
        }
        if (processInstanceId !== undefined && processInstanceId !== null) {
            queryParameters = queryParameters.set('processInstanceId', <any>processInstanceId);
        }
        if (processDefinitionId !== undefined && processDefinitionId !== null) {
            queryParameters = queryParameters.set('processDefinitionId', <any>processDefinitionId);
        }
        if (executionId !== undefined && executionId !== null) {
            queryParameters = queryParameters.set('executionId', <any>executionId);
        }
        if (activityId !== undefined && activityId !== null) {
            queryParameters = queryParameters.set('activityId', <any>activityId);
        }
        if (activityName !== undefined && activityName !== null) {
            queryParameters = queryParameters.set('activityName', <any>activityName);
        }
        if (activityType !== undefined && activityType !== null) {
            queryParameters = queryParameters.set('activityType', <any>activityType);
        }
        if (taskAssignee !== undefined && taskAssignee !== null) {
            queryParameters = queryParameters.set('taskAssignee', <any>taskAssignee);
        }
        if (finished !== undefined && finished !== null) {
            queryParameters = queryParameters.set('finished', <any>finished);
        }
        if (unfinished !== undefined && unfinished !== null) {
            queryParameters = queryParameters.set('unfinished', <any>unfinished);
        }
        if (canceled !== undefined && canceled !== null) {
            queryParameters = queryParameters.set('canceled', <any>canceled);
        }
        if (completeScope !== undefined && completeScope !== null) {
            queryParameters = queryParameters.set('completeScope', <any>completeScope);
        }
        if (startedBefore !== undefined && startedBefore !== null) {
            queryParameters = queryParameters.set('startedBefore', <any>startedBefore.toISOString());
        }
        if (startedAfter !== undefined && startedAfter !== null) {
            queryParameters = queryParameters.set('startedAfter', <any>startedAfter.toISOString());
        }
        if (finishedBefore !== undefined && finishedBefore !== null) {
            queryParameters = queryParameters.set('finishedBefore', <any>finishedBefore.toISOString());
        }
        if (finishedAfter !== undefined && finishedAfter !== null) {
            queryParameters = queryParameters.set('finishedAfter', <any>finishedAfter.toISOString());
        }
        if (tenantIdIn !== undefined && tenantIdIn !== null) {
            queryParameters = queryParameters.set('tenantIdIn', <any>tenantIdIn);
        }
        if (withoutTenantId !== undefined && withoutTenantId !== null) {
            queryParameters = queryParameters.set('withoutTenantId', <any>withoutTenantId);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<HistoricActivityInstanceDto>>('get',`${this.basePath}/history/activity-instance`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get List Count
     * Queries for the number of historic activity instances that fulfill the given parameters. Takes the same parameters as the [Get Historic Activity Instance](https://docs.camunda.org/manual/7.19/reference/rest/history/activity-instance/get-activity-instance-query/)  method.
     * @param activityInstanceId Filter by activity instance id.
     * @param processInstanceId Filter by process instance id.
     * @param processDefinitionId Filter by process definition id.
     * @param executionId Filter by the id of the execution that executed the activity instance.
     * @param activityId Filter by the activity id (according to BPMN 2.0 XML).
     * @param activityName Filter by the activity name (according to BPMN 2.0 XML).
     * @param activityType Filter by activity type.
     * @param taskAssignee Only include activity instances that are user tasks and assigned to a given user.
     * @param finished Only include finished activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
     * @param unfinished Only include unfinished activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
     * @param canceled Only include canceled activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
     * @param completeScope Only include activity instances which completed a scope. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
     * @param startedBefore Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param startedAfter Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param finishedBefore Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param finishedAfter Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param tenantIdIn Filter by a comma-separated list of ids. An activity instance must have one of the given tenant ids.
     * @param withoutTenantId Only include historic activity instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHistoricActivityInstancesCount(activityInstanceId?: string, processInstanceId?: string, processDefinitionId?: string, executionId?: string, activityId?: string, activityName?: string, activityType?: string, taskAssignee?: string, finished?: boolean, unfinished?: boolean, canceled?: boolean, completeScope?: boolean, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, tenantIdIn?: string, withoutTenantId?: boolean, observe?: 'body', reportProgress?: boolean): Observable<CountResultDto>;
    public getHistoricActivityInstancesCount(activityInstanceId?: string, processInstanceId?: string, processDefinitionId?: string, executionId?: string, activityId?: string, activityName?: string, activityType?: string, taskAssignee?: string, finished?: boolean, unfinished?: boolean, canceled?: boolean, completeScope?: boolean, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, tenantIdIn?: string, withoutTenantId?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CountResultDto>>;
    public getHistoricActivityInstancesCount(activityInstanceId?: string, processInstanceId?: string, processDefinitionId?: string, executionId?: string, activityId?: string, activityName?: string, activityType?: string, taskAssignee?: string, finished?: boolean, unfinished?: boolean, canceled?: boolean, completeScope?: boolean, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, tenantIdIn?: string, withoutTenantId?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CountResultDto>>;
    public getHistoricActivityInstancesCount(activityInstanceId?: string, processInstanceId?: string, processDefinitionId?: string, executionId?: string, activityId?: string, activityName?: string, activityType?: string, taskAssignee?: string, finished?: boolean, unfinished?: boolean, canceled?: boolean, completeScope?: boolean, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, tenantIdIn?: string, withoutTenantId?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



















        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (activityInstanceId !== undefined && activityInstanceId !== null) {
            queryParameters = queryParameters.set('activityInstanceId', <any>activityInstanceId);
        }
        if (processInstanceId !== undefined && processInstanceId !== null) {
            queryParameters = queryParameters.set('processInstanceId', <any>processInstanceId);
        }
        if (processDefinitionId !== undefined && processDefinitionId !== null) {
            queryParameters = queryParameters.set('processDefinitionId', <any>processDefinitionId);
        }
        if (executionId !== undefined && executionId !== null) {
            queryParameters = queryParameters.set('executionId', <any>executionId);
        }
        if (activityId !== undefined && activityId !== null) {
            queryParameters = queryParameters.set('activityId', <any>activityId);
        }
        if (activityName !== undefined && activityName !== null) {
            queryParameters = queryParameters.set('activityName', <any>activityName);
        }
        if (activityType !== undefined && activityType !== null) {
            queryParameters = queryParameters.set('activityType', <any>activityType);
        }
        if (taskAssignee !== undefined && taskAssignee !== null) {
            queryParameters = queryParameters.set('taskAssignee', <any>taskAssignee);
        }
        if (finished !== undefined && finished !== null) {
            queryParameters = queryParameters.set('finished', <any>finished);
        }
        if (unfinished !== undefined && unfinished !== null) {
            queryParameters = queryParameters.set('unfinished', <any>unfinished);
        }
        if (canceled !== undefined && canceled !== null) {
            queryParameters = queryParameters.set('canceled', <any>canceled);
        }
        if (completeScope !== undefined && completeScope !== null) {
            queryParameters = queryParameters.set('completeScope', <any>completeScope);
        }
        if (startedBefore !== undefined && startedBefore !== null) {
            queryParameters = queryParameters.set('startedBefore', <any>startedBefore.toISOString());
        }
        if (startedAfter !== undefined && startedAfter !== null) {
            queryParameters = queryParameters.set('startedAfter', <any>startedAfter.toISOString());
        }
        if (finishedBefore !== undefined && finishedBefore !== null) {
            queryParameters = queryParameters.set('finishedBefore', <any>finishedBefore.toISOString());
        }
        if (finishedAfter !== undefined && finishedAfter !== null) {
            queryParameters = queryParameters.set('finishedAfter', <any>finishedAfter.toISOString());
        }
        if (tenantIdIn !== undefined && tenantIdIn !== null) {
            queryParameters = queryParameters.set('tenantIdIn', <any>tenantIdIn);
        }
        if (withoutTenantId !== undefined && withoutTenantId !== null) {
            queryParameters = queryParameters.set('withoutTenantId', <any>withoutTenantId);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CountResultDto>('get',`${this.basePath}/history/activity-instance/count`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get List (POST)
     * Queries for historic activity instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Historic Activity Instance Count](https://docs.camunda.org/manual/7.19/reference/rest/history/activity-instance/get-activity-instance-query-count/) method.
     * @param body 
     * @param firstResult Pagination of results. Specifies the index of the first result to return.
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public queryHistoricActivityInstances(body?: HistoricActivityInstanceQueryDto, firstResult?: number, maxResults?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<HistoricActivityInstanceDto>>;
    public queryHistoricActivityInstances(body?: HistoricActivityInstanceQueryDto, firstResult?: number, maxResults?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<HistoricActivityInstanceDto>>>;
    public queryHistoricActivityInstances(body?: HistoricActivityInstanceQueryDto, firstResult?: number, maxResults?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<HistoricActivityInstanceDto>>>;
    public queryHistoricActivityInstances(body?: HistoricActivityInstanceQueryDto, firstResult?: number, maxResults?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (firstResult !== undefined && firstResult !== null) {
            queryParameters = queryParameters.set('firstResult', <any>firstResult);
        }
        if (maxResults !== undefined && maxResults !== null) {
            queryParameters = queryParameters.set('maxResults', <any>maxResults);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<HistoricActivityInstanceDto>>('post',`${this.basePath}/history/activity-instance`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get List Count (POST)
     * Queries for the number of historic activity instances that fulfill the given parameters.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public queryHistoricActivityInstancesCount(body?: HistoricActivityInstanceQueryDto, observe?: 'body', reportProgress?: boolean): Observable<CountResultDto>;
    public queryHistoricActivityInstancesCount(body?: HistoricActivityInstanceQueryDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CountResultDto>>;
    public queryHistoricActivityInstancesCount(body?: HistoricActivityInstanceQueryDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CountResultDto>>;
    public queryHistoricActivityInstancesCount(body?: HistoricActivityInstanceQueryDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CountResultDto>('post',`${this.basePath}/history/activity-instance/count`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
