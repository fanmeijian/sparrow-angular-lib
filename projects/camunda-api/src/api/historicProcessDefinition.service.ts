/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.19.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CleanableHistoricProcessInstanceReportResultDto } from '../model/cleanableHistoricProcessInstanceReportResultDto';
import { CountResultDto } from '../model/countResultDto';
import { ExceptionDto } from '../model/exceptionDto';
import { HistoricActivityStatisticsDto } from '../model/historicActivityStatisticsDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class HistoricProcessDefinitionService {

    protected basePath = 'http://{host}:{port}/{contextPath}';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get Cleanable Process Instance Report
     * Retrieves a report about a process definition and finished process instances relevant to history cleanup (see [History cleanup](https://docs.camunda.org/manual/7.19/user-guide/process-engine/history/#history-cleanup))  so that you can tune the history time to live. These reports include the count of the finished historic process instances, cleanable process instances and basic process definition data - id, key, name and version. The size of the result set can be retrieved by using the [Get Cleanable Process Instance Report Count](https://docs.camunda.org/manual/7.19/reference/rest/history/process-definition/get-cleanable-process-instance-report-count/) method.
     * @param processDefinitionIdIn Filter by process definition ids. Must be a comma-separated list of process definition ids.
     * @param processDefinitionKeyIn Filter by process definition keys. Must be a comma-separated list of process definition keys.
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. A process definition must have one of the given  tenant ids.
     * @param withoutTenantId Only include process definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param compact Only include process instances which have more than zero finished instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param firstResult Pagination of results. Specifies the index of the first result to return.
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCleanableHistoricProcessInstanceReport(processDefinitionIdIn?: string, processDefinitionKeyIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, compact?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<CleanableHistoricProcessInstanceReportResultDto>>;
    public getCleanableHistoricProcessInstanceReport(processDefinitionIdIn?: string, processDefinitionKeyIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, compact?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CleanableHistoricProcessInstanceReportResultDto>>>;
    public getCleanableHistoricProcessInstanceReport(processDefinitionIdIn?: string, processDefinitionKeyIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, compact?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CleanableHistoricProcessInstanceReportResultDto>>>;
    public getCleanableHistoricProcessInstanceReport(processDefinitionIdIn?: string, processDefinitionKeyIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, compact?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {










        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (processDefinitionIdIn !== undefined && processDefinitionIdIn !== null) {
            queryParameters = queryParameters.set('processDefinitionIdIn', <any>processDefinitionIdIn);
        }
        if (processDefinitionKeyIn !== undefined && processDefinitionKeyIn !== null) {
            queryParameters = queryParameters.set('processDefinitionKeyIn', <any>processDefinitionKeyIn);
        }
        if (tenantIdIn !== undefined && tenantIdIn !== null) {
            queryParameters = queryParameters.set('tenantIdIn', <any>tenantIdIn);
        }
        if (withoutTenantId !== undefined && withoutTenantId !== null) {
            queryParameters = queryParameters.set('withoutTenantId', <any>withoutTenantId);
        }
        if (compact !== undefined && compact !== null) {
            queryParameters = queryParameters.set('compact', <any>compact);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (sortOrder !== undefined && sortOrder !== null) {
            queryParameters = queryParameters.set('sortOrder', <any>sortOrder);
        }
        if (firstResult !== undefined && firstResult !== null) {
            queryParameters = queryParameters.set('firstResult', <any>firstResult);
        }
        if (maxResults !== undefined && maxResults !== null) {
            queryParameters = queryParameters.set('maxResults', <any>maxResults);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<CleanableHistoricProcessInstanceReportResultDto>>('get',`${this.basePath}/history/process-definition/cleanable-process-instance-report`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Cleanable Process Instance Report Count
     * Queries for the number of report results about a process definition and finished process instances relevant to history cleanup (see [History cleanup](https://docs.camunda.org/manual/7.19/user-guide/process-engine/history/#history-cleanup)). Takes the same parameters as the [Get Cleanable Process Instance Report](https://docs.camunda.org/manual/7.19/reference/rest/history/process-definition/get-cleanable-process-instance-report/) method.
     * @param processDefinitionIdIn Filter by process definition ids. Must be a comma-separated list of process definition ids.
     * @param processDefinitionKeyIn Filter by process definition keys. Must be a comma-separated list of process definition keys.
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. A process definition must have one of the given  tenant ids.
     * @param withoutTenantId Only include process definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param compact Only include process instances which have more than zero finished instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCleanableHistoricProcessInstanceReportCount(processDefinitionIdIn?: string, processDefinitionKeyIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, compact?: boolean, observe?: 'body', reportProgress?: boolean): Observable<CountResultDto>;
    public getCleanableHistoricProcessInstanceReportCount(processDefinitionIdIn?: string, processDefinitionKeyIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, compact?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CountResultDto>>;
    public getCleanableHistoricProcessInstanceReportCount(processDefinitionIdIn?: string, processDefinitionKeyIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, compact?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CountResultDto>>;
    public getCleanableHistoricProcessInstanceReportCount(processDefinitionIdIn?: string, processDefinitionKeyIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, compact?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (processDefinitionIdIn !== undefined && processDefinitionIdIn !== null) {
            queryParameters = queryParameters.set('processDefinitionIdIn', <any>processDefinitionIdIn);
        }
        if (processDefinitionKeyIn !== undefined && processDefinitionKeyIn !== null) {
            queryParameters = queryParameters.set('processDefinitionKeyIn', <any>processDefinitionKeyIn);
        }
        if (tenantIdIn !== undefined && tenantIdIn !== null) {
            queryParameters = queryParameters.set('tenantIdIn', <any>tenantIdIn);
        }
        if (withoutTenantId !== undefined && withoutTenantId !== null) {
            queryParameters = queryParameters.set('withoutTenantId', <any>withoutTenantId);
        }
        if (compact !== undefined && compact !== null) {
            queryParameters = queryParameters.set('compact', <any>compact);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CountResultDto>('get',`${this.basePath}/history/process-definition/cleanable-process-instance-report/count`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Historic Activity Statistics
     * Retrieves historic statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances and, optionally, the number of canceled activity instances, finished activity instances and activity instances which completed a scope (i.e., in BPMN 2.0 manner: a scope is completed by an activity instance when the activity instance consumed a token but did not emit a new token). **Note:** This only includes historic data.
     * @param id The id of the process definition.
     * @param canceled Whether to include the number of canceled activity instances in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. Default: &#x60;false&#x60;.
     * @param finished Whether to include the number of finished activity instances in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. Default: &#x60;false&#x60;.
     * @param completeScope Whether to include the number of activity instances which completed a scope in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. Default: &#x60;false&#x60;.
     * @param incidents Whether to include the number of incidents. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. Default: &#x60;false&#x60;.
     * @param startedBefore Restrict to process instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),  the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;,  e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param startedAfter Restrict to process instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),  the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;,  e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param finishedBefore Restrict to process instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),  the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;,  e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param finishedAfter Restrict to process instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),  the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;,  e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param processInstanceIdIn Restrict to process instances with the given IDs. The IDs must be provided as a comma- separated list.
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHistoricActivityStatistics(id: string, canceled?: boolean, finished?: boolean, completeScope?: boolean, incidents?: boolean, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, processInstanceIdIn?: string, sortBy?: string, sortOrder?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<HistoricActivityStatisticsDto>>;
    public getHistoricActivityStatistics(id: string, canceled?: boolean, finished?: boolean, completeScope?: boolean, incidents?: boolean, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, processInstanceIdIn?: string, sortBy?: string, sortOrder?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<HistoricActivityStatisticsDto>>>;
    public getHistoricActivityStatistics(id: string, canceled?: boolean, finished?: boolean, completeScope?: boolean, incidents?: boolean, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, processInstanceIdIn?: string, sortBy?: string, sortOrder?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<HistoricActivityStatisticsDto>>>;
    public getHistoricActivityStatistics(id: string, canceled?: boolean, finished?: boolean, completeScope?: boolean, incidents?: boolean, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, processInstanceIdIn?: string, sortBy?: string, sortOrder?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getHistoricActivityStatistics.');
        }












        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (canceled !== undefined && canceled !== null) {
            queryParameters = queryParameters.set('canceled', <any>canceled);
        }
        if (finished !== undefined && finished !== null) {
            queryParameters = queryParameters.set('finished', <any>finished);
        }
        if (completeScope !== undefined && completeScope !== null) {
            queryParameters = queryParameters.set('completeScope', <any>completeScope);
        }
        if (incidents !== undefined && incidents !== null) {
            queryParameters = queryParameters.set('incidents', <any>incidents);
        }
        if (startedBefore !== undefined && startedBefore !== null) {
            queryParameters = queryParameters.set('startedBefore', <any>startedBefore.toISOString());
        }
        if (startedAfter !== undefined && startedAfter !== null) {
            queryParameters = queryParameters.set('startedAfter', <any>startedAfter.toISOString());
        }
        if (finishedBefore !== undefined && finishedBefore !== null) {
            queryParameters = queryParameters.set('finishedBefore', <any>finishedBefore.toISOString());
        }
        if (finishedAfter !== undefined && finishedAfter !== null) {
            queryParameters = queryParameters.set('finishedAfter', <any>finishedAfter.toISOString());
        }
        if (processInstanceIdIn !== undefined && processInstanceIdIn !== null) {
            queryParameters = queryParameters.set('processInstanceIdIn', <any>processInstanceIdIn);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (sortOrder !== undefined && sortOrder !== null) {
            queryParameters = queryParameters.set('sortOrder', <any>sortOrder);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<HistoricActivityStatisticsDto>>('get',`${this.basePath}/history/process-definition/${encodeURIComponent(String(id))}/statistics`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
