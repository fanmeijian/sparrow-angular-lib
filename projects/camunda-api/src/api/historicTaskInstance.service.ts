/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.19.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CountResultDto } from '../model/countResultDto';
import { ExceptionDto } from '../model/exceptionDto';
import { HistoricTaskInstanceDto } from '../model/historicTaskInstanceDto';
import { HistoricTaskInstanceQueryDto } from '../model/historicTaskInstanceQueryDto';
import { HistoricTaskInstanceReportResultDto } from '../model/historicTaskInstanceReportResultDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class HistoricTaskInstanceService {

    protected basePath = 'http://{host}:{port}/{contextPath}';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get Task Report (Historic)
     * Retrieves a report of completed tasks. When the report type is set to &#x60;count&#x60;, the report contains a list of completed task counts where an entry contains the task name, the definition key of the task, the process definition id, the process definition key, the process definition name and the count of how many tasks were completed for the specified key in a given period. When the report type is set to &#x60;duration&#x60;, the report contains a minimum, maximum and average duration value of all completed task instances in a given period.
     * @param reportType **Mandatory.** Specifies the kind of the report to execute. To retrieve a report about the duration of process instances the value must be set to &#x60;duration&#x60;. For a report of the completed tasks in a specific timespan the value must be set to &#x60;count&#x60;.
     * @param periodUnit When the report type is set to &#x60;duration&#x60;, this parameter is **mandatory**. Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;.
     * @param completedBefore Restrict to tasks that were completed before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param completedAfter Restrict to tasks that were completed after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param groupBy When the report type is set to &#x60;count&#x60;, this parameter is **mandatory**. Groups the tasks report by a given criterion. Valid values are &#x60;taskName&#x60; and &#x60;processDefinition&#x60;.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHistoricTaskInstanceReport(reportType?: string, periodUnit?: string, completedBefore?: Date, completedAfter?: Date, groupBy?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<HistoricTaskInstanceReportResultDto>>;
    public getHistoricTaskInstanceReport(reportType?: string, periodUnit?: string, completedBefore?: Date, completedAfter?: Date, groupBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<HistoricTaskInstanceReportResultDto>>>;
    public getHistoricTaskInstanceReport(reportType?: string, periodUnit?: string, completedBefore?: Date, completedAfter?: Date, groupBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<HistoricTaskInstanceReportResultDto>>>;
    public getHistoricTaskInstanceReport(reportType?: string, periodUnit?: string, completedBefore?: Date, completedAfter?: Date, groupBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportType !== undefined && reportType !== null) {
            queryParameters = queryParameters.set('reportType', <any>reportType);
        }
        if (periodUnit !== undefined && periodUnit !== null) {
            queryParameters = queryParameters.set('periodUnit', <any>periodUnit);
        }
        if (completedBefore !== undefined && completedBefore !== null) {
            queryParameters = queryParameters.set('completedBefore', <any>completedBefore.toISOString());
        }
        if (completedAfter !== undefined && completedAfter !== null) {
            queryParameters = queryParameters.set('completedAfter', <any>completedAfter.toISOString());
        }
        if (groupBy !== undefined && groupBy !== null) {
            queryParameters = queryParameters.set('groupBy', <any>groupBy);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<HistoricTaskInstanceReportResultDto>>('get',`${this.basePath}/history/task/report`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Tasks (Historic)
     * Queries for historic tasks that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Task Count](https://docs.camunda.org/manual/7.19/reference/rest/history/task/get-task-query-count/) method.
     * @param taskId Filter by task id.
     * @param taskParentTaskId Filter by parent task id.
     * @param processInstanceId Filter by process instance id.
     * @param processInstanceBusinessKey Filter by process instance business key.
     * @param processInstanceBusinessKeyIn Filter by process instances with one of the give business keys. The keys need to be in a comma-separated list.
     * @param processInstanceBusinessKeyLike Filter by  process instance business key that has the parameter value as a substring.
     * @param executionId Filter by the id of the execution that executed the task.
     * @param processDefinitionId Filter by process definition id.
     * @param processDefinitionKey Restrict to tasks that belong to a process definition with the given key.
     * @param processDefinitionName Restrict to tasks that belong to a process definition with the given name.
     * @param caseInstanceId Filter by case instance id.
     * @param caseExecutionId Filter by the id of the case execution that executed the task.
     * @param caseDefinitionId Filter by case definition id.
     * @param caseDefinitionKey Restrict to tasks that belong to a case definition with the given key.
     * @param caseDefinitionName Restrict to tasks that belong to a case definition with the given name.
     * @param activityInstanceIdIn Only include tasks which belong to one of the passed comma-separated activity instance ids.
     * @param taskName Restrict to tasks that have the given name.
     * @param taskNameLike Restrict to tasks that have a name with the given parameter value as substring.
     * @param taskDescription Restrict to tasks that have the given description.
     * @param taskDescriptionLike Restrict to tasks that have a description that has the parameter value as a substring.
     * @param taskDefinitionKey Restrict to tasks that have the given key.
     * @param taskDefinitionKeyIn Restrict to tasks that have one of the passed comma-separated task definition keys.
     * @param taskDeleteReason Restrict to tasks that have the given delete reason.
     * @param taskDeleteReasonLike Restrict to tasks that have a delete reason that has the parameter value as a substring.
     * @param taskAssignee Restrict to tasks that the given user is assigned to.
     * @param taskAssigneeLike Restrict to tasks that are assigned to users with the parameter value as a substring.
     * @param taskOwner Restrict to tasks that the given user owns.
     * @param taskOwnerLike Restrict to tasks that are owned by users with the parameter value as a substring.
     * @param taskPriority Restrict to tasks that have the given priority.
     * @param assigned If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned.
     * @param unassigned If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned.
     * @param finished Only include finished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param unfinished Only include unfinished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param processFinished Only include tasks of finished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param processUnfinished Only include tasks of unfinished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param taskDueDate Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param taskDueDateBefore Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param taskDueDateAfter Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param withoutTaskDueDate Only include tasks which have no due date. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param taskFollowUpDate Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param taskFollowUpDateBefore Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param taskFollowUpDateAfter Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param startedBefore Restrict to tasks that were started before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param startedAfter Restrict to tasks that were started after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param finishedBefore Restrict to tasks that were finished before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param finishedAfter Restrict to tasks that were finished after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. A task instance must have one of the given tenant ids.
     * @param withoutTenantId Only include historic task instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param taskVariables Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
     * @param processVariables Only include tasks that belong to process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;; * &#x60;notLike&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
     * @param variableNamesIgnoreCase Match the variable name provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal.
     * @param variableValuesIgnoreCase Match the variable value provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal.
     * @param taskInvolvedUser Restrict to tasks with a historic identity link to the given user.
     * @param taskInvolvedGroup Restrict to tasks with a historic identity link to the given group.
     * @param taskHadCandidateUser Restrict to tasks with a historic identity link to the given candidate user.
     * @param taskHadCandidateGroup Restrict to tasks with a historic identity link to the given candidate group.
     * @param withCandidateGroups Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param withoutCandidateGroups Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param firstResult Pagination of results. Specifies the index of the first result to return.
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHistoricTaskInstances(taskId?: string, taskParentTaskId?: string, processInstanceId?: string, processInstanceBusinessKey?: string, processInstanceBusinessKeyIn?: string, processInstanceBusinessKeyLike?: string, executionId?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionName?: string, caseInstanceId?: string, caseExecutionId?: string, caseDefinitionId?: string, caseDefinitionKey?: string, caseDefinitionName?: string, activityInstanceIdIn?: string, taskName?: string, taskNameLike?: string, taskDescription?: string, taskDescriptionLike?: string, taskDefinitionKey?: string, taskDefinitionKeyIn?: string, taskDeleteReason?: string, taskDeleteReasonLike?: string, taskAssignee?: string, taskAssigneeLike?: string, taskOwner?: string, taskOwnerLike?: string, taskPriority?: number, assigned?: boolean, unassigned?: boolean, finished?: boolean, unfinished?: boolean, processFinished?: boolean, processUnfinished?: boolean, taskDueDate?: Date, taskDueDateBefore?: Date, taskDueDateAfter?: Date, withoutTaskDueDate?: boolean, taskFollowUpDate?: Date, taskFollowUpDateBefore?: Date, taskFollowUpDateAfter?: Date, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, tenantIdIn?: string, withoutTenantId?: boolean, taskVariables?: string, processVariables?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, taskInvolvedUser?: string, taskInvolvedGroup?: string, taskHadCandidateUser?: string, taskHadCandidateGroup?: string, withCandidateGroups?: boolean, withoutCandidateGroups?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<HistoricTaskInstanceDto>>;
    public getHistoricTaskInstances(taskId?: string, taskParentTaskId?: string, processInstanceId?: string, processInstanceBusinessKey?: string, processInstanceBusinessKeyIn?: string, processInstanceBusinessKeyLike?: string, executionId?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionName?: string, caseInstanceId?: string, caseExecutionId?: string, caseDefinitionId?: string, caseDefinitionKey?: string, caseDefinitionName?: string, activityInstanceIdIn?: string, taskName?: string, taskNameLike?: string, taskDescription?: string, taskDescriptionLike?: string, taskDefinitionKey?: string, taskDefinitionKeyIn?: string, taskDeleteReason?: string, taskDeleteReasonLike?: string, taskAssignee?: string, taskAssigneeLike?: string, taskOwner?: string, taskOwnerLike?: string, taskPriority?: number, assigned?: boolean, unassigned?: boolean, finished?: boolean, unfinished?: boolean, processFinished?: boolean, processUnfinished?: boolean, taskDueDate?: Date, taskDueDateBefore?: Date, taskDueDateAfter?: Date, withoutTaskDueDate?: boolean, taskFollowUpDate?: Date, taskFollowUpDateBefore?: Date, taskFollowUpDateAfter?: Date, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, tenantIdIn?: string, withoutTenantId?: boolean, taskVariables?: string, processVariables?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, taskInvolvedUser?: string, taskInvolvedGroup?: string, taskHadCandidateUser?: string, taskHadCandidateGroup?: string, withCandidateGroups?: boolean, withoutCandidateGroups?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<HistoricTaskInstanceDto>>>;
    public getHistoricTaskInstances(taskId?: string, taskParentTaskId?: string, processInstanceId?: string, processInstanceBusinessKey?: string, processInstanceBusinessKeyIn?: string, processInstanceBusinessKeyLike?: string, executionId?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionName?: string, caseInstanceId?: string, caseExecutionId?: string, caseDefinitionId?: string, caseDefinitionKey?: string, caseDefinitionName?: string, activityInstanceIdIn?: string, taskName?: string, taskNameLike?: string, taskDescription?: string, taskDescriptionLike?: string, taskDefinitionKey?: string, taskDefinitionKeyIn?: string, taskDeleteReason?: string, taskDeleteReasonLike?: string, taskAssignee?: string, taskAssigneeLike?: string, taskOwner?: string, taskOwnerLike?: string, taskPriority?: number, assigned?: boolean, unassigned?: boolean, finished?: boolean, unfinished?: boolean, processFinished?: boolean, processUnfinished?: boolean, taskDueDate?: Date, taskDueDateBefore?: Date, taskDueDateAfter?: Date, withoutTaskDueDate?: boolean, taskFollowUpDate?: Date, taskFollowUpDateBefore?: Date, taskFollowUpDateAfter?: Date, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, tenantIdIn?: string, withoutTenantId?: boolean, taskVariables?: string, processVariables?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, taskInvolvedUser?: string, taskInvolvedGroup?: string, taskHadCandidateUser?: string, taskHadCandidateGroup?: string, withCandidateGroups?: boolean, withoutCandidateGroups?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<HistoricTaskInstanceDto>>>;
    public getHistoricTaskInstances(taskId?: string, taskParentTaskId?: string, processInstanceId?: string, processInstanceBusinessKey?: string, processInstanceBusinessKeyIn?: string, processInstanceBusinessKeyLike?: string, executionId?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionName?: string, caseInstanceId?: string, caseExecutionId?: string, caseDefinitionId?: string, caseDefinitionKey?: string, caseDefinitionName?: string, activityInstanceIdIn?: string, taskName?: string, taskNameLike?: string, taskDescription?: string, taskDescriptionLike?: string, taskDefinitionKey?: string, taskDefinitionKeyIn?: string, taskDeleteReason?: string, taskDeleteReasonLike?: string, taskAssignee?: string, taskAssigneeLike?: string, taskOwner?: string, taskOwnerLike?: string, taskPriority?: number, assigned?: boolean, unassigned?: boolean, finished?: boolean, unfinished?: boolean, processFinished?: boolean, processUnfinished?: boolean, taskDueDate?: Date, taskDueDateBefore?: Date, taskDueDateAfter?: Date, withoutTaskDueDate?: boolean, taskFollowUpDate?: Date, taskFollowUpDateBefore?: Date, taskFollowUpDateAfter?: Date, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, tenantIdIn?: string, withoutTenantId?: boolean, taskVariables?: string, processVariables?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, taskInvolvedUser?: string, taskInvolvedGroup?: string, taskHadCandidateUser?: string, taskHadCandidateGroup?: string, withCandidateGroups?: boolean, withoutCandidateGroups?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {































































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (taskId !== undefined && taskId !== null) {
            queryParameters = queryParameters.set('taskId', <any>taskId);
        }
        if (taskParentTaskId !== undefined && taskParentTaskId !== null) {
            queryParameters = queryParameters.set('taskParentTaskId', <any>taskParentTaskId);
        }
        if (processInstanceId !== undefined && processInstanceId !== null) {
            queryParameters = queryParameters.set('processInstanceId', <any>processInstanceId);
        }
        if (processInstanceBusinessKey !== undefined && processInstanceBusinessKey !== null) {
            queryParameters = queryParameters.set('processInstanceBusinessKey', <any>processInstanceBusinessKey);
        }
        if (processInstanceBusinessKeyIn !== undefined && processInstanceBusinessKeyIn !== null) {
            queryParameters = queryParameters.set('processInstanceBusinessKeyIn', <any>processInstanceBusinessKeyIn);
        }
        if (processInstanceBusinessKeyLike !== undefined && processInstanceBusinessKeyLike !== null) {
            queryParameters = queryParameters.set('processInstanceBusinessKeyLike', <any>processInstanceBusinessKeyLike);
        }
        if (executionId !== undefined && executionId !== null) {
            queryParameters = queryParameters.set('executionId', <any>executionId);
        }
        if (processDefinitionId !== undefined && processDefinitionId !== null) {
            queryParameters = queryParameters.set('processDefinitionId', <any>processDefinitionId);
        }
        if (processDefinitionKey !== undefined && processDefinitionKey !== null) {
            queryParameters = queryParameters.set('processDefinitionKey', <any>processDefinitionKey);
        }
        if (processDefinitionName !== undefined && processDefinitionName !== null) {
            queryParameters = queryParameters.set('processDefinitionName', <any>processDefinitionName);
        }
        if (caseInstanceId !== undefined && caseInstanceId !== null) {
            queryParameters = queryParameters.set('caseInstanceId', <any>caseInstanceId);
        }
        if (caseExecutionId !== undefined && caseExecutionId !== null) {
            queryParameters = queryParameters.set('caseExecutionId', <any>caseExecutionId);
        }
        if (caseDefinitionId !== undefined && caseDefinitionId !== null) {
            queryParameters = queryParameters.set('caseDefinitionId', <any>caseDefinitionId);
        }
        if (caseDefinitionKey !== undefined && caseDefinitionKey !== null) {
            queryParameters = queryParameters.set('caseDefinitionKey', <any>caseDefinitionKey);
        }
        if (caseDefinitionName !== undefined && caseDefinitionName !== null) {
            queryParameters = queryParameters.set('caseDefinitionName', <any>caseDefinitionName);
        }
        if (activityInstanceIdIn !== undefined && activityInstanceIdIn !== null) {
            queryParameters = queryParameters.set('activityInstanceIdIn', <any>activityInstanceIdIn);
        }
        if (taskName !== undefined && taskName !== null) {
            queryParameters = queryParameters.set('taskName', <any>taskName);
        }
        if (taskNameLike !== undefined && taskNameLike !== null) {
            queryParameters = queryParameters.set('taskNameLike', <any>taskNameLike);
        }
        if (taskDescription !== undefined && taskDescription !== null) {
            queryParameters = queryParameters.set('taskDescription', <any>taskDescription);
        }
        if (taskDescriptionLike !== undefined && taskDescriptionLike !== null) {
            queryParameters = queryParameters.set('taskDescriptionLike', <any>taskDescriptionLike);
        }
        if (taskDefinitionKey !== undefined && taskDefinitionKey !== null) {
            queryParameters = queryParameters.set('taskDefinitionKey', <any>taskDefinitionKey);
        }
        if (taskDefinitionKeyIn !== undefined && taskDefinitionKeyIn !== null) {
            queryParameters = queryParameters.set('taskDefinitionKeyIn', <any>taskDefinitionKeyIn);
        }
        if (taskDeleteReason !== undefined && taskDeleteReason !== null) {
            queryParameters = queryParameters.set('taskDeleteReason', <any>taskDeleteReason);
        }
        if (taskDeleteReasonLike !== undefined && taskDeleteReasonLike !== null) {
            queryParameters = queryParameters.set('taskDeleteReasonLike', <any>taskDeleteReasonLike);
        }
        if (taskAssignee !== undefined && taskAssignee !== null) {
            queryParameters = queryParameters.set('taskAssignee', <any>taskAssignee);
        }
        if (taskAssigneeLike !== undefined && taskAssigneeLike !== null) {
            queryParameters = queryParameters.set('taskAssigneeLike', <any>taskAssigneeLike);
        }
        if (taskOwner !== undefined && taskOwner !== null) {
            queryParameters = queryParameters.set('taskOwner', <any>taskOwner);
        }
        if (taskOwnerLike !== undefined && taskOwnerLike !== null) {
            queryParameters = queryParameters.set('taskOwnerLike', <any>taskOwnerLike);
        }
        if (taskPriority !== undefined && taskPriority !== null) {
            queryParameters = queryParameters.set('taskPriority', <any>taskPriority);
        }
        if (assigned !== undefined && assigned !== null) {
            queryParameters = queryParameters.set('assigned', <any>assigned);
        }
        if (unassigned !== undefined && unassigned !== null) {
            queryParameters = queryParameters.set('unassigned', <any>unassigned);
        }
        if (finished !== undefined && finished !== null) {
            queryParameters = queryParameters.set('finished', <any>finished);
        }
        if (unfinished !== undefined && unfinished !== null) {
            queryParameters = queryParameters.set('unfinished', <any>unfinished);
        }
        if (processFinished !== undefined && processFinished !== null) {
            queryParameters = queryParameters.set('processFinished', <any>processFinished);
        }
        if (processUnfinished !== undefined && processUnfinished !== null) {
            queryParameters = queryParameters.set('processUnfinished', <any>processUnfinished);
        }
        if (taskDueDate !== undefined && taskDueDate !== null) {
            queryParameters = queryParameters.set('taskDueDate', <any>taskDueDate.toISOString());
        }
        if (taskDueDateBefore !== undefined && taskDueDateBefore !== null) {
            queryParameters = queryParameters.set('taskDueDateBefore', <any>taskDueDateBefore.toISOString());
        }
        if (taskDueDateAfter !== undefined && taskDueDateAfter !== null) {
            queryParameters = queryParameters.set('taskDueDateAfter', <any>taskDueDateAfter.toISOString());
        }
        if (withoutTaskDueDate !== undefined && withoutTaskDueDate !== null) {
            queryParameters = queryParameters.set('withoutTaskDueDate', <any>withoutTaskDueDate);
        }
        if (taskFollowUpDate !== undefined && taskFollowUpDate !== null) {
            queryParameters = queryParameters.set('taskFollowUpDate', <any>taskFollowUpDate.toISOString());
        }
        if (taskFollowUpDateBefore !== undefined && taskFollowUpDateBefore !== null) {
            queryParameters = queryParameters.set('taskFollowUpDateBefore', <any>taskFollowUpDateBefore.toISOString());
        }
        if (taskFollowUpDateAfter !== undefined && taskFollowUpDateAfter !== null) {
            queryParameters = queryParameters.set('taskFollowUpDateAfter', <any>taskFollowUpDateAfter.toISOString());
        }
        if (startedBefore !== undefined && startedBefore !== null) {
            queryParameters = queryParameters.set('startedBefore', <any>startedBefore.toISOString());
        }
        if (startedAfter !== undefined && startedAfter !== null) {
            queryParameters = queryParameters.set('startedAfter', <any>startedAfter.toISOString());
        }
        if (finishedBefore !== undefined && finishedBefore !== null) {
            queryParameters = queryParameters.set('finishedBefore', <any>finishedBefore.toISOString());
        }
        if (finishedAfter !== undefined && finishedAfter !== null) {
            queryParameters = queryParameters.set('finishedAfter', <any>finishedAfter.toISOString());
        }
        if (tenantIdIn !== undefined && tenantIdIn !== null) {
            queryParameters = queryParameters.set('tenantIdIn', <any>tenantIdIn);
        }
        if (withoutTenantId !== undefined && withoutTenantId !== null) {
            queryParameters = queryParameters.set('withoutTenantId', <any>withoutTenantId);
        }
        if (taskVariables !== undefined && taskVariables !== null) {
            queryParameters = queryParameters.set('taskVariables', <any>taskVariables);
        }
        if (processVariables !== undefined && processVariables !== null) {
            queryParameters = queryParameters.set('processVariables', <any>processVariables);
        }
        if (variableNamesIgnoreCase !== undefined && variableNamesIgnoreCase !== null) {
            queryParameters = queryParameters.set('variableNamesIgnoreCase', <any>variableNamesIgnoreCase);
        }
        if (variableValuesIgnoreCase !== undefined && variableValuesIgnoreCase !== null) {
            queryParameters = queryParameters.set('variableValuesIgnoreCase', <any>variableValuesIgnoreCase);
        }
        if (taskInvolvedUser !== undefined && taskInvolvedUser !== null) {
            queryParameters = queryParameters.set('taskInvolvedUser', <any>taskInvolvedUser);
        }
        if (taskInvolvedGroup !== undefined && taskInvolvedGroup !== null) {
            queryParameters = queryParameters.set('taskInvolvedGroup', <any>taskInvolvedGroup);
        }
        if (taskHadCandidateUser !== undefined && taskHadCandidateUser !== null) {
            queryParameters = queryParameters.set('taskHadCandidateUser', <any>taskHadCandidateUser);
        }
        if (taskHadCandidateGroup !== undefined && taskHadCandidateGroup !== null) {
            queryParameters = queryParameters.set('taskHadCandidateGroup', <any>taskHadCandidateGroup);
        }
        if (withCandidateGroups !== undefined && withCandidateGroups !== null) {
            queryParameters = queryParameters.set('withCandidateGroups', <any>withCandidateGroups);
        }
        if (withoutCandidateGroups !== undefined && withoutCandidateGroups !== null) {
            queryParameters = queryParameters.set('withoutCandidateGroups', <any>withoutCandidateGroups);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (sortOrder !== undefined && sortOrder !== null) {
            queryParameters = queryParameters.set('sortOrder', <any>sortOrder);
        }
        if (firstResult !== undefined && firstResult !== null) {
            queryParameters = queryParameters.set('firstResult', <any>firstResult);
        }
        if (maxResults !== undefined && maxResults !== null) {
            queryParameters = queryParameters.set('maxResults', <any>maxResults);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<HistoricTaskInstanceDto>>('get',`${this.basePath}/history/task`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Task Count
     * Queries for the number of historic tasks that fulfill the given parameters. Takes the same parameters as the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.19/reference/rest/history/task/get-task-query/) method.
     * @param taskId Filter by task id.
     * @param taskParentTaskId Filter by parent task id.
     * @param processInstanceId Filter by process instance id.
     * @param processInstanceBusinessKey Filter by process instance business key.
     * @param processInstanceBusinessKeyIn Filter by process instances with one of the give business keys. The keys need to be in a comma-separated list.
     * @param processInstanceBusinessKeyLike Filter by  process instance business key that has the parameter value as a substring.
     * @param executionId Filter by the id of the execution that executed the task.
     * @param processDefinitionId Filter by process definition id.
     * @param processDefinitionKey Restrict to tasks that belong to a process definition with the given key.
     * @param processDefinitionName Restrict to tasks that belong to a process definition with the given name.
     * @param caseInstanceId Filter by case instance id.
     * @param caseExecutionId Filter by the id of the case execution that executed the task.
     * @param caseDefinitionId Filter by case definition id.
     * @param caseDefinitionKey Restrict to tasks that belong to a case definition with the given key.
     * @param caseDefinitionName Restrict to tasks that belong to a case definition with the given name.
     * @param activityInstanceIdIn Only include tasks which belong to one of the passed comma-separated activity instance ids.
     * @param taskName Restrict to tasks that have the given name.
     * @param taskNameLike Restrict to tasks that have a name with the given parameter value as substring.
     * @param taskDescription Restrict to tasks that have the given description.
     * @param taskDescriptionLike Restrict to tasks that have a description that has the parameter value as a substring.
     * @param taskDefinitionKey Restrict to tasks that have the given key.
     * @param taskDefinitionKeyIn Restrict to tasks that have one of the passed comma-separated task definition keys.
     * @param taskDeleteReason Restrict to tasks that have the given delete reason.
     * @param taskDeleteReasonLike Restrict to tasks that have a delete reason that has the parameter value as a substring.
     * @param taskAssignee Restrict to tasks that the given user is assigned to.
     * @param taskAssigneeLike Restrict to tasks that are assigned to users with the parameter value as a substring.
     * @param taskOwner Restrict to tasks that the given user owns.
     * @param taskOwnerLike Restrict to tasks that are owned by users with the parameter value as a substring.
     * @param taskPriority Restrict to tasks that have the given priority.
     * @param assigned If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned.
     * @param unassigned If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned.
     * @param finished Only include finished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param unfinished Only include unfinished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param processFinished Only include tasks of finished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param processUnfinished Only include tasks of unfinished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param taskDueDate Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param taskDueDateBefore Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param taskDueDateAfter Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param withoutTaskDueDate Only include tasks which have no due date. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param taskFollowUpDate Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param taskFollowUpDateBefore Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param taskFollowUpDateAfter Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param startedBefore Restrict to tasks that were started before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param startedAfter Restrict to tasks that were started after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param finishedBefore Restrict to tasks that were finished before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param finishedAfter Restrict to tasks that were finished after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. A task instance must have one of the given tenant ids.
     * @param withoutTenantId Only include historic task instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param taskVariables Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
     * @param processVariables Only include tasks that belong to process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;; * &#x60;notLike&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
     * @param variableNamesIgnoreCase Match the variable name provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal.
     * @param variableValuesIgnoreCase Match the variable value provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal.
     * @param taskInvolvedUser Restrict to tasks with a historic identity link to the given user.
     * @param taskInvolvedGroup Restrict to tasks with a historic identity link to the given group.
     * @param taskHadCandidateUser Restrict to tasks with a historic identity link to the given candidate user.
     * @param taskHadCandidateGroup Restrict to tasks with a historic identity link to the given candidate group.
     * @param withCandidateGroups Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param withoutCandidateGroups Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHistoricTaskInstancesCount(taskId?: string, taskParentTaskId?: string, processInstanceId?: string, processInstanceBusinessKey?: string, processInstanceBusinessKeyIn?: string, processInstanceBusinessKeyLike?: string, executionId?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionName?: string, caseInstanceId?: string, caseExecutionId?: string, caseDefinitionId?: string, caseDefinitionKey?: string, caseDefinitionName?: string, activityInstanceIdIn?: string, taskName?: string, taskNameLike?: string, taskDescription?: string, taskDescriptionLike?: string, taskDefinitionKey?: string, taskDefinitionKeyIn?: string, taskDeleteReason?: string, taskDeleteReasonLike?: string, taskAssignee?: string, taskAssigneeLike?: string, taskOwner?: string, taskOwnerLike?: string, taskPriority?: number, assigned?: boolean, unassigned?: boolean, finished?: boolean, unfinished?: boolean, processFinished?: boolean, processUnfinished?: boolean, taskDueDate?: Date, taskDueDateBefore?: Date, taskDueDateAfter?: Date, withoutTaskDueDate?: boolean, taskFollowUpDate?: Date, taskFollowUpDateBefore?: Date, taskFollowUpDateAfter?: Date, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, tenantIdIn?: string, withoutTenantId?: boolean, taskVariables?: string, processVariables?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, taskInvolvedUser?: string, taskInvolvedGroup?: string, taskHadCandidateUser?: string, taskHadCandidateGroup?: string, withCandidateGroups?: boolean, withoutCandidateGroups?: boolean, observe?: 'body', reportProgress?: boolean): Observable<CountResultDto>;
    public getHistoricTaskInstancesCount(taskId?: string, taskParentTaskId?: string, processInstanceId?: string, processInstanceBusinessKey?: string, processInstanceBusinessKeyIn?: string, processInstanceBusinessKeyLike?: string, executionId?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionName?: string, caseInstanceId?: string, caseExecutionId?: string, caseDefinitionId?: string, caseDefinitionKey?: string, caseDefinitionName?: string, activityInstanceIdIn?: string, taskName?: string, taskNameLike?: string, taskDescription?: string, taskDescriptionLike?: string, taskDefinitionKey?: string, taskDefinitionKeyIn?: string, taskDeleteReason?: string, taskDeleteReasonLike?: string, taskAssignee?: string, taskAssigneeLike?: string, taskOwner?: string, taskOwnerLike?: string, taskPriority?: number, assigned?: boolean, unassigned?: boolean, finished?: boolean, unfinished?: boolean, processFinished?: boolean, processUnfinished?: boolean, taskDueDate?: Date, taskDueDateBefore?: Date, taskDueDateAfter?: Date, withoutTaskDueDate?: boolean, taskFollowUpDate?: Date, taskFollowUpDateBefore?: Date, taskFollowUpDateAfter?: Date, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, tenantIdIn?: string, withoutTenantId?: boolean, taskVariables?: string, processVariables?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, taskInvolvedUser?: string, taskInvolvedGroup?: string, taskHadCandidateUser?: string, taskHadCandidateGroup?: string, withCandidateGroups?: boolean, withoutCandidateGroups?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CountResultDto>>;
    public getHistoricTaskInstancesCount(taskId?: string, taskParentTaskId?: string, processInstanceId?: string, processInstanceBusinessKey?: string, processInstanceBusinessKeyIn?: string, processInstanceBusinessKeyLike?: string, executionId?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionName?: string, caseInstanceId?: string, caseExecutionId?: string, caseDefinitionId?: string, caseDefinitionKey?: string, caseDefinitionName?: string, activityInstanceIdIn?: string, taskName?: string, taskNameLike?: string, taskDescription?: string, taskDescriptionLike?: string, taskDefinitionKey?: string, taskDefinitionKeyIn?: string, taskDeleteReason?: string, taskDeleteReasonLike?: string, taskAssignee?: string, taskAssigneeLike?: string, taskOwner?: string, taskOwnerLike?: string, taskPriority?: number, assigned?: boolean, unassigned?: boolean, finished?: boolean, unfinished?: boolean, processFinished?: boolean, processUnfinished?: boolean, taskDueDate?: Date, taskDueDateBefore?: Date, taskDueDateAfter?: Date, withoutTaskDueDate?: boolean, taskFollowUpDate?: Date, taskFollowUpDateBefore?: Date, taskFollowUpDateAfter?: Date, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, tenantIdIn?: string, withoutTenantId?: boolean, taskVariables?: string, processVariables?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, taskInvolvedUser?: string, taskInvolvedGroup?: string, taskHadCandidateUser?: string, taskHadCandidateGroup?: string, withCandidateGroups?: boolean, withoutCandidateGroups?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CountResultDto>>;
    public getHistoricTaskInstancesCount(taskId?: string, taskParentTaskId?: string, processInstanceId?: string, processInstanceBusinessKey?: string, processInstanceBusinessKeyIn?: string, processInstanceBusinessKeyLike?: string, executionId?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionName?: string, caseInstanceId?: string, caseExecutionId?: string, caseDefinitionId?: string, caseDefinitionKey?: string, caseDefinitionName?: string, activityInstanceIdIn?: string, taskName?: string, taskNameLike?: string, taskDescription?: string, taskDescriptionLike?: string, taskDefinitionKey?: string, taskDefinitionKeyIn?: string, taskDeleteReason?: string, taskDeleteReasonLike?: string, taskAssignee?: string, taskAssigneeLike?: string, taskOwner?: string, taskOwnerLike?: string, taskPriority?: number, assigned?: boolean, unassigned?: boolean, finished?: boolean, unfinished?: boolean, processFinished?: boolean, processUnfinished?: boolean, taskDueDate?: Date, taskDueDateBefore?: Date, taskDueDateAfter?: Date, withoutTaskDueDate?: boolean, taskFollowUpDate?: Date, taskFollowUpDateBefore?: Date, taskFollowUpDateAfter?: Date, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, tenantIdIn?: string, withoutTenantId?: boolean, taskVariables?: string, processVariables?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, taskInvolvedUser?: string, taskInvolvedGroup?: string, taskHadCandidateUser?: string, taskHadCandidateGroup?: string, withCandidateGroups?: boolean, withoutCandidateGroups?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



























































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (taskId !== undefined && taskId !== null) {
            queryParameters = queryParameters.set('taskId', <any>taskId);
        }
        if (taskParentTaskId !== undefined && taskParentTaskId !== null) {
            queryParameters = queryParameters.set('taskParentTaskId', <any>taskParentTaskId);
        }
        if (processInstanceId !== undefined && processInstanceId !== null) {
            queryParameters = queryParameters.set('processInstanceId', <any>processInstanceId);
        }
        if (processInstanceBusinessKey !== undefined && processInstanceBusinessKey !== null) {
            queryParameters = queryParameters.set('processInstanceBusinessKey', <any>processInstanceBusinessKey);
        }
        if (processInstanceBusinessKeyIn !== undefined && processInstanceBusinessKeyIn !== null) {
            queryParameters = queryParameters.set('processInstanceBusinessKeyIn', <any>processInstanceBusinessKeyIn);
        }
        if (processInstanceBusinessKeyLike !== undefined && processInstanceBusinessKeyLike !== null) {
            queryParameters = queryParameters.set('processInstanceBusinessKeyLike', <any>processInstanceBusinessKeyLike);
        }
        if (executionId !== undefined && executionId !== null) {
            queryParameters = queryParameters.set('executionId', <any>executionId);
        }
        if (processDefinitionId !== undefined && processDefinitionId !== null) {
            queryParameters = queryParameters.set('processDefinitionId', <any>processDefinitionId);
        }
        if (processDefinitionKey !== undefined && processDefinitionKey !== null) {
            queryParameters = queryParameters.set('processDefinitionKey', <any>processDefinitionKey);
        }
        if (processDefinitionName !== undefined && processDefinitionName !== null) {
            queryParameters = queryParameters.set('processDefinitionName', <any>processDefinitionName);
        }
        if (caseInstanceId !== undefined && caseInstanceId !== null) {
            queryParameters = queryParameters.set('caseInstanceId', <any>caseInstanceId);
        }
        if (caseExecutionId !== undefined && caseExecutionId !== null) {
            queryParameters = queryParameters.set('caseExecutionId', <any>caseExecutionId);
        }
        if (caseDefinitionId !== undefined && caseDefinitionId !== null) {
            queryParameters = queryParameters.set('caseDefinitionId', <any>caseDefinitionId);
        }
        if (caseDefinitionKey !== undefined && caseDefinitionKey !== null) {
            queryParameters = queryParameters.set('caseDefinitionKey', <any>caseDefinitionKey);
        }
        if (caseDefinitionName !== undefined && caseDefinitionName !== null) {
            queryParameters = queryParameters.set('caseDefinitionName', <any>caseDefinitionName);
        }
        if (activityInstanceIdIn !== undefined && activityInstanceIdIn !== null) {
            queryParameters = queryParameters.set('activityInstanceIdIn', <any>activityInstanceIdIn);
        }
        if (taskName !== undefined && taskName !== null) {
            queryParameters = queryParameters.set('taskName', <any>taskName);
        }
        if (taskNameLike !== undefined && taskNameLike !== null) {
            queryParameters = queryParameters.set('taskNameLike', <any>taskNameLike);
        }
        if (taskDescription !== undefined && taskDescription !== null) {
            queryParameters = queryParameters.set('taskDescription', <any>taskDescription);
        }
        if (taskDescriptionLike !== undefined && taskDescriptionLike !== null) {
            queryParameters = queryParameters.set('taskDescriptionLike', <any>taskDescriptionLike);
        }
        if (taskDefinitionKey !== undefined && taskDefinitionKey !== null) {
            queryParameters = queryParameters.set('taskDefinitionKey', <any>taskDefinitionKey);
        }
        if (taskDefinitionKeyIn !== undefined && taskDefinitionKeyIn !== null) {
            queryParameters = queryParameters.set('taskDefinitionKeyIn', <any>taskDefinitionKeyIn);
        }
        if (taskDeleteReason !== undefined && taskDeleteReason !== null) {
            queryParameters = queryParameters.set('taskDeleteReason', <any>taskDeleteReason);
        }
        if (taskDeleteReasonLike !== undefined && taskDeleteReasonLike !== null) {
            queryParameters = queryParameters.set('taskDeleteReasonLike', <any>taskDeleteReasonLike);
        }
        if (taskAssignee !== undefined && taskAssignee !== null) {
            queryParameters = queryParameters.set('taskAssignee', <any>taskAssignee);
        }
        if (taskAssigneeLike !== undefined && taskAssigneeLike !== null) {
            queryParameters = queryParameters.set('taskAssigneeLike', <any>taskAssigneeLike);
        }
        if (taskOwner !== undefined && taskOwner !== null) {
            queryParameters = queryParameters.set('taskOwner', <any>taskOwner);
        }
        if (taskOwnerLike !== undefined && taskOwnerLike !== null) {
            queryParameters = queryParameters.set('taskOwnerLike', <any>taskOwnerLike);
        }
        if (taskPriority !== undefined && taskPriority !== null) {
            queryParameters = queryParameters.set('taskPriority', <any>taskPriority);
        }
        if (assigned !== undefined && assigned !== null) {
            queryParameters = queryParameters.set('assigned', <any>assigned);
        }
        if (unassigned !== undefined && unassigned !== null) {
            queryParameters = queryParameters.set('unassigned', <any>unassigned);
        }
        if (finished !== undefined && finished !== null) {
            queryParameters = queryParameters.set('finished', <any>finished);
        }
        if (unfinished !== undefined && unfinished !== null) {
            queryParameters = queryParameters.set('unfinished', <any>unfinished);
        }
        if (processFinished !== undefined && processFinished !== null) {
            queryParameters = queryParameters.set('processFinished', <any>processFinished);
        }
        if (processUnfinished !== undefined && processUnfinished !== null) {
            queryParameters = queryParameters.set('processUnfinished', <any>processUnfinished);
        }
        if (taskDueDate !== undefined && taskDueDate !== null) {
            queryParameters = queryParameters.set('taskDueDate', <any>taskDueDate.toISOString());
        }
        if (taskDueDateBefore !== undefined && taskDueDateBefore !== null) {
            queryParameters = queryParameters.set('taskDueDateBefore', <any>taskDueDateBefore.toISOString());
        }
        if (taskDueDateAfter !== undefined && taskDueDateAfter !== null) {
            queryParameters = queryParameters.set('taskDueDateAfter', <any>taskDueDateAfter.toISOString());
        }
        if (withoutTaskDueDate !== undefined && withoutTaskDueDate !== null) {
            queryParameters = queryParameters.set('withoutTaskDueDate', <any>withoutTaskDueDate);
        }
        if (taskFollowUpDate !== undefined && taskFollowUpDate !== null) {
            queryParameters = queryParameters.set('taskFollowUpDate', <any>taskFollowUpDate.toISOString());
        }
        if (taskFollowUpDateBefore !== undefined && taskFollowUpDateBefore !== null) {
            queryParameters = queryParameters.set('taskFollowUpDateBefore', <any>taskFollowUpDateBefore.toISOString());
        }
        if (taskFollowUpDateAfter !== undefined && taskFollowUpDateAfter !== null) {
            queryParameters = queryParameters.set('taskFollowUpDateAfter', <any>taskFollowUpDateAfter.toISOString());
        }
        if (startedBefore !== undefined && startedBefore !== null) {
            queryParameters = queryParameters.set('startedBefore', <any>startedBefore.toISOString());
        }
        if (startedAfter !== undefined && startedAfter !== null) {
            queryParameters = queryParameters.set('startedAfter', <any>startedAfter.toISOString());
        }
        if (finishedBefore !== undefined && finishedBefore !== null) {
            queryParameters = queryParameters.set('finishedBefore', <any>finishedBefore.toISOString());
        }
        if (finishedAfter !== undefined && finishedAfter !== null) {
            queryParameters = queryParameters.set('finishedAfter', <any>finishedAfter.toISOString());
        }
        if (tenantIdIn !== undefined && tenantIdIn !== null) {
            queryParameters = queryParameters.set('tenantIdIn', <any>tenantIdIn);
        }
        if (withoutTenantId !== undefined && withoutTenantId !== null) {
            queryParameters = queryParameters.set('withoutTenantId', <any>withoutTenantId);
        }
        if (taskVariables !== undefined && taskVariables !== null) {
            queryParameters = queryParameters.set('taskVariables', <any>taskVariables);
        }
        if (processVariables !== undefined && processVariables !== null) {
            queryParameters = queryParameters.set('processVariables', <any>processVariables);
        }
        if (variableNamesIgnoreCase !== undefined && variableNamesIgnoreCase !== null) {
            queryParameters = queryParameters.set('variableNamesIgnoreCase', <any>variableNamesIgnoreCase);
        }
        if (variableValuesIgnoreCase !== undefined && variableValuesIgnoreCase !== null) {
            queryParameters = queryParameters.set('variableValuesIgnoreCase', <any>variableValuesIgnoreCase);
        }
        if (taskInvolvedUser !== undefined && taskInvolvedUser !== null) {
            queryParameters = queryParameters.set('taskInvolvedUser', <any>taskInvolvedUser);
        }
        if (taskInvolvedGroup !== undefined && taskInvolvedGroup !== null) {
            queryParameters = queryParameters.set('taskInvolvedGroup', <any>taskInvolvedGroup);
        }
        if (taskHadCandidateUser !== undefined && taskHadCandidateUser !== null) {
            queryParameters = queryParameters.set('taskHadCandidateUser', <any>taskHadCandidateUser);
        }
        if (taskHadCandidateGroup !== undefined && taskHadCandidateGroup !== null) {
            queryParameters = queryParameters.set('taskHadCandidateGroup', <any>taskHadCandidateGroup);
        }
        if (withCandidateGroups !== undefined && withCandidateGroups !== null) {
            queryParameters = queryParameters.set('withCandidateGroups', <any>withCandidateGroups);
        }
        if (withoutCandidateGroups !== undefined && withoutCandidateGroups !== null) {
            queryParameters = queryParameters.set('withoutCandidateGroups', <any>withoutCandidateGroups);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CountResultDto>('get',`${this.basePath}/history/task/count`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Tasks (Historic) (POST)
     * Queries for historic tasks that fulfill the given parameters. This method is slightly more powerful than the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.19/reference/rest/history/task/get-task-query/) method because it allows filtering by multiple process or task variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;. The size of the result set can be retrieved by using the [Get Task Count (POST)](https://docs.camunda.org/manual/7.19/reference/rest/history/task/post-task-query-count/) method.
     * @param body 
     * @param firstResult Pagination of results. Specifies the index of the first result to return.
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public queryHistoricTaskInstances(body?: HistoricTaskInstanceQueryDto, firstResult?: number, maxResults?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<HistoricTaskInstanceDto>>;
    public queryHistoricTaskInstances(body?: HistoricTaskInstanceQueryDto, firstResult?: number, maxResults?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<HistoricTaskInstanceDto>>>;
    public queryHistoricTaskInstances(body?: HistoricTaskInstanceQueryDto, firstResult?: number, maxResults?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<HistoricTaskInstanceDto>>>;
    public queryHistoricTaskInstances(body?: HistoricTaskInstanceQueryDto, firstResult?: number, maxResults?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (firstResult !== undefined && firstResult !== null) {
            queryParameters = queryParameters.set('firstResult', <any>firstResult);
        }
        if (maxResults !== undefined && maxResults !== null) {
            queryParameters = queryParameters.set('maxResults', <any>maxResults);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<HistoricTaskInstanceDto>>('post',`${this.basePath}/history/task`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Task Count (POST)
     * Queries for the number of historic tasks that fulfill the given parameters. Takes the same parameters as the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.19/reference/rest/history/task/get-task-query/) method. Corresponds to the size of the result set of the [Get Tasks (Historic) (POST)](https://docs.camunda.org/manual/7.19/reference/rest/history/task/post-task-query/) method and takes the same parameters.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public queryHistoricTaskInstancesCount(body?: HistoricTaskInstanceQueryDto, observe?: 'body', reportProgress?: boolean): Observable<CountResultDto>;
    public queryHistoricTaskInstancesCount(body?: HistoricTaskInstanceQueryDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CountResultDto>>;
    public queryHistoricTaskInstancesCount(body?: HistoricTaskInstanceQueryDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CountResultDto>>;
    public queryHistoricTaskInstancesCount(body?: HistoricTaskInstanceQueryDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CountResultDto>('post',`${this.basePath}/history/task/count`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
