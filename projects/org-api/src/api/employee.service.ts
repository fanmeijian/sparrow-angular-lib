/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Employee } from '../model/employee';
import { EmployeeOrganizationLevel } from '../model/employeeOrganizationLevel';
import { EmployeeOrganizationRole } from '../model/employeeOrganizationRole';
import { EmployeeRelation } from '../model/employeeRelation';
import { GroupEmployee } from '../model/groupEmployee';
import { OrganizationPositionLevelPK } from '../model/organizationPositionLevelPK';
import { OrganizationRolePK } from '../model/organizationRolePK';
import { PageEmployee } from '../model/pageEmployee';
import { SparrowTreeEmployeeString } from '../model/sparrowTreeEmployeeString';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class EmployeeService {

    protected basePath = 'http://localhost:4421/org-service';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 设置所属职级别
     * 
     * @param body 
     * @param employeeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addEmployeeLevel(body: Array<OrganizationPositionLevelPK>, employeeId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addEmployeeLevel(body: Array<OrganizationPositionLevelPK>, employeeId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addEmployeeLevel(body: Array<OrganizationPositionLevelPK>, employeeId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addEmployeeLevel(body: Array<OrganizationPositionLevelPK>, employeeId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addEmployeeLevel.');
        }

        if (employeeId === null || employeeId === undefined) {
            throw new Error('Required parameter employeeId was null or undefined when calling addEmployeeLevel.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/employees/${encodeURIComponent(String(employeeId))}/levels`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 设置员工上级
     * 
     * @param body 
     * @param employeeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addEmployeeParent(body: Array<string>, employeeId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addEmployeeParent(body: Array<string>, employeeId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addEmployeeParent(body: Array<string>, employeeId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addEmployeeParent(body: Array<string>, employeeId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addEmployeeParent.');
        }

        if (employeeId === null || employeeId === undefined) {
            throw new Error('Required parameter employeeId was null or undefined when calling addEmployeeParent.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/employees/${encodeURIComponent(String(employeeId))}/parents`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 设置担任岗位
     * 
     * @param body 
     * @param employeeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addEmployeeRole(body: Array<OrganizationRolePK>, employeeId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addEmployeeRole(body: Array<OrganizationRolePK>, employeeId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addEmployeeRole(body: Array<OrganizationRolePK>, employeeId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addEmployeeRole(body: Array<OrganizationRolePK>, employeeId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addEmployeeRole.');
        }

        if (employeeId === null || employeeId === undefined) {
            throw new Error('Required parameter employeeId was null or undefined when calling addEmployeeRole.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/employees/${encodeURIComponent(String(employeeId))}/roles`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 增加员工用户名
     * 
     * @param body 
     * @param employeeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addEmpolyeeUsers(body: Array<string>, employeeId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addEmpolyeeUsers(body: Array<string>, employeeId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addEmpolyeeUsers(body: Array<string>, employeeId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addEmpolyeeUsers(body: Array<string>, employeeId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addEmpolyeeUsers.');
        }

        if (employeeId === null || employeeId === undefined) {
            throw new Error('Required parameter employeeId was null or undefined when calling addEmpolyeeUsers.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/employees/${encodeURIComponent(String(employeeId))}/users/add`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 删除员工
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteEmployee(body: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteEmployee(body: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteEmployee(body: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteEmployee(body: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteEmployee.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/employees/delete`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 员工详情
     * 
     * @param employeeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public employee(employeeId: string, observe?: 'body', reportProgress?: boolean): Observable<Employee>;
    public employee(employeeId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Employee>>;
    public employee(employeeId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Employee>>;
    public employee(employeeId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (employeeId === null || employeeId === undefined) {
            throw new Error('Required parameter employeeId was null or undefined when calling employee.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Employee>('get',`${this.basePath}/employees/${encodeURIComponent(String(employeeId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 员工详情
     * 
     * @param username 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public employeeByUsername(username: string, observe?: 'body', reportProgress?: boolean): Observable<Employee>;
    public employeeByUsername(username: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Employee>>;
    public employeeByUsername(username: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Employee>>;
    public employeeByUsername(username: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling employeeByUsername.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (username !== undefined && username !== null) {
            queryParameters = queryParameters.set('username', <any>username);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Employee>('get',`${this.basePath}/employees/by-username`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 获取直接下属
     * 
     * @param employeeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public employeeChildren(employeeId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<EmployeeRelation>>;
    public employeeChildren(employeeId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EmployeeRelation>>>;
    public employeeChildren(employeeId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EmployeeRelation>>>;
    public employeeChildren(employeeId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (employeeId === null || employeeId === undefined) {
            throw new Error('Required parameter employeeId was null or undefined when calling employeeChildren.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<EmployeeRelation>>('get',`${this.basePath}/employees/${encodeURIComponent(String(employeeId))}/children`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 获取所属组
     * 
     * @param employeeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public employeeGroups(employeeId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<GroupEmployee>>;
    public employeeGroups(employeeId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GroupEmployee>>>;
    public employeeGroups(employeeId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GroupEmployee>>>;
    public employeeGroups(employeeId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (employeeId === null || employeeId === undefined) {
            throw new Error('Required parameter employeeId was null or undefined when calling employeeGroups.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<GroupEmployee>>('get',`${this.basePath}/employees/${encodeURIComponent(String(employeeId))}/groups`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 获取所属职级
     * 
     * @param employeeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public employeeLevels(employeeId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<EmployeeOrganizationLevel>>;
    public employeeLevels(employeeId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EmployeeOrganizationLevel>>>;
    public employeeLevels(employeeId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EmployeeOrganizationLevel>>>;
    public employeeLevels(employeeId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (employeeId === null || employeeId === undefined) {
            throw new Error('Required parameter employeeId was null or undefined when calling employeeLevels.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<EmployeeOrganizationLevel>>('get',`${this.basePath}/employees/${encodeURIComponent(String(employeeId))}/levels`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 获取直接上级
     * 
     * @param employeeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public employeeParent(employeeId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<EmployeeRelation>>;
    public employeeParent(employeeId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EmployeeRelation>>>;
    public employeeParent(employeeId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EmployeeRelation>>>;
    public employeeParent(employeeId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (employeeId === null || employeeId === undefined) {
            throw new Error('Required parameter employeeId was null or undefined when calling employeeParent.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<EmployeeRelation>>('get',`${this.basePath}/employees/${encodeURIComponent(String(employeeId))}/parents`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 获取担任岗位
     * 
     * @param employeeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public employeeRoles(employeeId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<EmployeeOrganizationRole>>;
    public employeeRoles(employeeId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EmployeeOrganizationRole>>>;
    public employeeRoles(employeeId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EmployeeOrganizationRole>>>;
    public employeeRoles(employeeId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (employeeId === null || employeeId === undefined) {
            throw new Error('Required parameter employeeId was null or undefined when calling employeeRoles.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<EmployeeOrganizationRole>>('get',`${this.basePath}/employees/${encodeURIComponent(String(employeeId))}/roles`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 获取员工关系树
     * 
     * @param employeeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public employeeTree(employeeId: string, observe?: 'body', reportProgress?: boolean): Observable<SparrowTreeEmployeeString>;
    public employeeTree(employeeId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SparrowTreeEmployeeString>>;
    public employeeTree(employeeId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SparrowTreeEmployeeString>>;
    public employeeTree(employeeId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (employeeId === null || employeeId === undefined) {
            throw new Error('Required parameter employeeId was null or undefined when calling employeeTree.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<SparrowTreeEmployeeString>('get',`${this.basePath}/employees/${encodeURIComponent(String(employeeId))}/tree`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 员工列表
     * 
     * @param page Zero-based page index (0..N)
     * @param size The size of the page to be returned
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param name 
     * @param code 
     * @param createdDate 
     * @param createdBy 
     * @param modifiedDate 
     * @param modifitedBy 
     * @param status 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public employees(page?: number, size?: number, sort?: Array<string>, name?: string, code?: string, createdDate?: Date, createdBy?: string, modifiedDate?: Date, modifitedBy?: string, status?: string, observe?: 'body', reportProgress?: boolean): Observable<PageEmployee>;
    public employees(page?: number, size?: number, sort?: Array<string>, name?: string, code?: string, createdDate?: Date, createdBy?: string, modifiedDate?: Date, modifitedBy?: string, status?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageEmployee>>;
    public employees(page?: number, size?: number, sort?: Array<string>, name?: string, code?: string, createdDate?: Date, createdBy?: string, modifiedDate?: Date, modifitedBy?: string, status?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageEmployee>>;
    public employees(page?: number, size?: number, sort?: Array<string>, name?: string, code?: string, createdDate?: Date, createdBy?: string, modifiedDate?: Date, modifitedBy?: string, status?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {











        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (sort) {
            sort.forEach((element) => {
                queryParameters = queryParameters.append('sort', <any>element);
            })
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (code !== undefined && code !== null) {
            queryParameters = queryParameters.set('code', <any>code);
        }
        if (createdDate !== undefined && createdDate !== null) {
            queryParameters = queryParameters.set('createdDate', <any>createdDate.toISOString());
        }
        if (createdBy !== undefined && createdBy !== null) {
            queryParameters = queryParameters.set('createdBy', <any>createdBy);
        }
        if (modifiedDate !== undefined && modifiedDate !== null) {
            queryParameters = queryParameters.set('modifiedDate', <any>modifiedDate.toISOString());
        }
        if (modifitedBy !== undefined && modifitedBy !== null) {
            queryParameters = queryParameters.set('modifitedBy', <any>modifitedBy);
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PageEmployee>('get',`${this.basePath}/employees/all`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 员工用户名列表
     * 
     * @param employeeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public empolyeeUsers(employeeId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public empolyeeUsers(employeeId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public empolyeeUsers(employeeId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public empolyeeUsers(employeeId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (employeeId === null || employeeId === undefined) {
            throw new Error('Required parameter employeeId was null or undefined when calling empolyeeUsers.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<string>>('get',`${this.basePath}/employees/${encodeURIComponent(String(employeeId))}/users`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 新增员工
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public newEmployee(body: Employee, observe?: 'body', reportProgress?: boolean): Observable<Employee>;
    public newEmployee(body: Employee, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Employee>>;
    public newEmployee(body: Employee, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Employee>>;
    public newEmployee(body: Employee, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling newEmployee.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Employee>('post',`${this.basePath}/employees`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 移除所属职级别
     * 
     * @param body 
     * @param employeeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeEmployeeLevel(body: Array<OrganizationPositionLevelPK>, employeeId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public removeEmployeeLevel(body: Array<OrganizationPositionLevelPK>, employeeId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public removeEmployeeLevel(body: Array<OrganizationPositionLevelPK>, employeeId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public removeEmployeeLevel(body: Array<OrganizationPositionLevelPK>, employeeId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling removeEmployeeLevel.');
        }

        if (employeeId === null || employeeId === undefined) {
            throw new Error('Required parameter employeeId was null or undefined when calling removeEmployeeLevel.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/employees/${encodeURIComponent(String(employeeId))}/levels/delete`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 移除员工上级
     * 
     * @param body 
     * @param employeeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeEmployeeParent(body: Array<string>, employeeId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public removeEmployeeParent(body: Array<string>, employeeId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public removeEmployeeParent(body: Array<string>, employeeId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public removeEmployeeParent(body: Array<string>, employeeId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling removeEmployeeParent.');
        }

        if (employeeId === null || employeeId === undefined) {
            throw new Error('Required parameter employeeId was null or undefined when calling removeEmployeeParent.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/employees/${encodeURIComponent(String(employeeId))}/parents/delete`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 移除担任岗位
     * 
     * @param body 
     * @param employeeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeEmployeeRole(body: Array<OrganizationRolePK>, employeeId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public removeEmployeeRole(body: Array<OrganizationRolePK>, employeeId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public removeEmployeeRole(body: Array<OrganizationRolePK>, employeeId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public removeEmployeeRole(body: Array<OrganizationRolePK>, employeeId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling removeEmployeeRole.');
        }

        if (employeeId === null || employeeId === undefined) {
            throw new Error('Required parameter employeeId was null or undefined when calling removeEmployeeRole.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/employees/${encodeURIComponent(String(employeeId))}/roles/delete`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 移除员工用户名
     * 
     * @param body 
     * @param employeeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeEmpolyeeUsers(body: Array<string>, employeeId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public removeEmpolyeeUsers(body: Array<string>, employeeId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public removeEmpolyeeUsers(body: Array<string>, employeeId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public removeEmpolyeeUsers(body: Array<string>, employeeId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling removeEmpolyeeUsers.');
        }

        if (employeeId === null || employeeId === undefined) {
            throw new Error('Required parameter employeeId was null or undefined when calling removeEmpolyeeUsers.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/employees/${encodeURIComponent(String(employeeId))}/users/remove`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 更新员工
     * 
     * @param body 
     * @param employeeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateEmployee(body: Employee, employeeId: string, observe?: 'body', reportProgress?: boolean): Observable<Employee>;
    public updateEmployee(body: Employee, employeeId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Employee>>;
    public updateEmployee(body: Employee, employeeId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Employee>>;
    public updateEmployee(body: Employee, employeeId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateEmployee.');
        }

        if (employeeId === null || employeeId === undefined) {
            throw new Error('Required parameter employeeId was null or undefined when calling updateEmployee.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Employee>('patch',`${this.basePath}/employees/${encodeURIComponent(String(employeeId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
