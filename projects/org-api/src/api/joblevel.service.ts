/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { EmployeeOrganizationLevel } from '../model/employeeOrganizationLevel';
import { Organization } from '../model/organization';
import { OrganizationPositionLevel } from '../model/organizationPositionLevel';
import { OrganizationPositionLevelPK } from '../model/organizationPositionLevelPK';
import { PagePositionLevel } from '../model/pagePositionLevel';
import { PositionLevel } from '../model/positionLevel';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class JoblevelService {

    protected basePath = 'http://localhost:4421/org-service';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 设置上级
     * 
     * @param body 
     * @param organizationId 
     * @param positionLevelId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addLevelParent(body: Array<OrganizationPositionLevelPK>, organizationId?: string, positionLevelId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addLevelParent(body: Array<OrganizationPositionLevelPK>, organizationId?: string, positionLevelId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addLevelParent(body: Array<OrganizationPositionLevelPK>, organizationId?: string, positionLevelId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addLevelParent(body: Array<OrganizationPositionLevelPK>, organizationId?: string, positionLevelId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addLevelParent.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (organizationId !== undefined && organizationId !== null) {
            queryParameters = queryParameters.set('organizationId', <any>organizationId);
        }
        if (positionLevelId !== undefined && positionLevelId !== null) {
            queryParameters = queryParameters.set('positionLevelId', <any>positionLevelId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/jobLevels/parents`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 设置所属组织
     * 
     * @param body 
     * @param levelId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addLevelParentOrg(body: Array<string>, levelId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addLevelParentOrg(body: Array<string>, levelId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addLevelParentOrg(body: Array<string>, levelId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addLevelParentOrg(body: Array<string>, levelId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addLevelParentOrg.');
        }

        if (levelId === null || levelId === undefined) {
            throw new Error('Required parameter levelId was null or undefined when calling addLevelParentOrg.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/jobLevels/${encodeURIComponent(String(levelId))}/parentOrganizations`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 删除职级
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteLevel(body: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteLevel(body: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteLevel(body: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteLevel(body: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteLevel.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/jobLevels/delete`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 职级详情
     * 
     * @param levelId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public level(levelId: string, observe?: 'body', reportProgress?: boolean): Observable<PositionLevel>;
    public level(levelId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PositionLevel>>;
    public level(levelId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PositionLevel>>;
    public level(levelId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (levelId === null || levelId === undefined) {
            throw new Error('Required parameter levelId was null or undefined when calling level.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PositionLevel>('get',`${this.basePath}/jobLevels/${encodeURIComponent(String(levelId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 获取下级
     * 
     * @param organizationId 
     * @param positionLevelId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public levelChildren(organizationId?: string, positionLevelId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<OrganizationPositionLevel>>;
    public levelChildren(organizationId?: string, positionLevelId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<OrganizationPositionLevel>>>;
    public levelChildren(organizationId?: string, positionLevelId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<OrganizationPositionLevel>>>;
    public levelChildren(organizationId?: string, positionLevelId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (organizationId !== undefined && organizationId !== null) {
            queryParameters = queryParameters.set('organizationId', <any>organizationId);
        }
        if (positionLevelId !== undefined && positionLevelId !== null) {
            queryParameters = queryParameters.set('positionLevelId', <any>positionLevelId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<OrganizationPositionLevel>>('get',`${this.basePath}/jobLevels/children`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 获取拥有此级别员工
     * 
     * @param organizationId 
     * @param positionLevelId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public levelEmployees(organizationId?: string, positionLevelId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<EmployeeOrganizationLevel>>;
    public levelEmployees(organizationId?: string, positionLevelId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EmployeeOrganizationLevel>>>;
    public levelEmployees(organizationId?: string, positionLevelId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EmployeeOrganizationLevel>>>;
    public levelEmployees(organizationId?: string, positionLevelId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (organizationId !== undefined && organizationId !== null) {
            queryParameters = queryParameters.set('organizationId', <any>organizationId);
        }
        if (positionLevelId !== undefined && positionLevelId !== null) {
            queryParameters = queryParameters.set('positionLevelId', <any>positionLevelId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<EmployeeOrganizationLevel>>('get',`${this.basePath}/jobLevels/employees`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 获取上级
     * 
     * @param organizationId 
     * @param positionLevelId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public levelParent(organizationId?: string, positionLevelId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<OrganizationPositionLevel>>;
    public levelParent(organizationId?: string, positionLevelId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<OrganizationPositionLevel>>>;
    public levelParent(organizationId?: string, positionLevelId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<OrganizationPositionLevel>>>;
    public levelParent(organizationId?: string, positionLevelId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (organizationId !== undefined && organizationId !== null) {
            queryParameters = queryParameters.set('organizationId', <any>organizationId);
        }
        if (positionLevelId !== undefined && positionLevelId !== null) {
            queryParameters = queryParameters.set('positionLevelId', <any>positionLevelId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<OrganizationPositionLevel>>('get',`${this.basePath}/jobLevels/parents`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 获取所属组织
     * 
     * @param levelId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public levelParentOrgs(levelId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Organization>>;
    public levelParentOrgs(levelId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Organization>>>;
    public levelParentOrgs(levelId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Organization>>>;
    public levelParentOrgs(levelId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (levelId === null || levelId === undefined) {
            throw new Error('Required parameter levelId was null or undefined when calling levelParentOrgs.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Organization>>('get',`${this.basePath}/jobLevels/${encodeURIComponent(String(levelId))}/parentOrganizations`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 级别列表
     * 
     * @param page Zero-based page index (0..N)
     * @param size The size of the page to be returned
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param name 
     * @param code 
     * @param createdDate 
     * @param createdBy 
     * @param modifiedDate 
     * @param modifitedBy 
     * @param status 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public levels(page?: number, size?: number, sort?: Array<string>, name?: string, code?: string, createdDate?: Date, createdBy?: string, modifiedDate?: Date, modifitedBy?: string, status?: string, observe?: 'body', reportProgress?: boolean): Observable<PagePositionLevel>;
    public levels(page?: number, size?: number, sort?: Array<string>, name?: string, code?: string, createdDate?: Date, createdBy?: string, modifiedDate?: Date, modifitedBy?: string, status?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagePositionLevel>>;
    public levels(page?: number, size?: number, sort?: Array<string>, name?: string, code?: string, createdDate?: Date, createdBy?: string, modifiedDate?: Date, modifitedBy?: string, status?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagePositionLevel>>;
    public levels(page?: number, size?: number, sort?: Array<string>, name?: string, code?: string, createdDate?: Date, createdBy?: string, modifiedDate?: Date, modifitedBy?: string, status?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {











        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (sort) {
            sort.forEach((element) => {
                queryParameters = queryParameters.append('sort', <any>element);
            })
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (code !== undefined && code !== null) {
            queryParameters = queryParameters.set('code', <any>code);
        }
        if (createdDate !== undefined && createdDate !== null) {
            queryParameters = queryParameters.set('createdDate', <any>createdDate.toISOString());
        }
        if (createdBy !== undefined && createdBy !== null) {
            queryParameters = queryParameters.set('createdBy', <any>createdBy);
        }
        if (modifiedDate !== undefined && modifiedDate !== null) {
            queryParameters = queryParameters.set('modifiedDate', <any>modifiedDate.toISOString());
        }
        if (modifitedBy !== undefined && modifitedBy !== null) {
            queryParameters = queryParameters.set('modifitedBy', <any>modifitedBy);
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PagePositionLevel>('get',`${this.basePath}/jobLevels`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 创建职级
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public newLevel(body: PositionLevel, observe?: 'body', reportProgress?: boolean): Observable<PositionLevel>;
    public newLevel(body: PositionLevel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PositionLevel>>;
    public newLevel(body: PositionLevel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PositionLevel>>;
    public newLevel(body: PositionLevel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling newLevel.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<PositionLevel>('post',`${this.basePath}/jobLevels`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 移除上级
     * 
     * @param body 
     * @param organizationId 
     * @param positionLevelId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeLevelParent(body: Array<OrganizationPositionLevelPK>, organizationId?: string, positionLevelId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public removeLevelParent(body: Array<OrganizationPositionLevelPK>, organizationId?: string, positionLevelId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public removeLevelParent(body: Array<OrganizationPositionLevelPK>, organizationId?: string, positionLevelId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public removeLevelParent(body: Array<OrganizationPositionLevelPK>, organizationId?: string, positionLevelId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling removeLevelParent.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (organizationId !== undefined && organizationId !== null) {
            queryParameters = queryParameters.set('organizationId', <any>organizationId);
        }
        if (positionLevelId !== undefined && positionLevelId !== null) {
            queryParameters = queryParameters.set('positionLevelId', <any>positionLevelId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/jobLevels/parents/remove`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 移除所属组织
     * 
     * @param body 
     * @param levelId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeLevelParentOrg(body: Array<string>, levelId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public removeLevelParentOrg(body: Array<string>, levelId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public removeLevelParentOrg(body: Array<string>, levelId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public removeLevelParentOrg(body: Array<string>, levelId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling removeLevelParentOrg.');
        }

        if (levelId === null || levelId === undefined) {
            throw new Error('Required parameter levelId was null or undefined when calling removeLevelParentOrg.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/jobLevels/${encodeURIComponent(String(levelId))}/parentOrganizations/remove`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 更新职级
     * 
     * @param body 
     * @param levelId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateLevel(body: { [key: string]: any; }, levelId: string, observe?: 'body', reportProgress?: boolean): Observable<PositionLevel>;
    public updateLevel(body: { [key: string]: any; }, levelId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PositionLevel>>;
    public updateLevel(body: { [key: string]: any; }, levelId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PositionLevel>>;
    public updateLevel(body: { [key: string]: any; }, levelId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateLevel.');
        }

        if (levelId === null || levelId === undefined) {
            throw new Error('Required parameter levelId was null or undefined when calling updateLevel.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<PositionLevel>('patch',`${this.basePath}/jobLevels/${encodeURIComponent(String(levelId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
